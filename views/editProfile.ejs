<%- include('partials/header2') %>

<style>
/* Custom styling for the edit profile page */
body {
    background-color: #fafafa;
}

.dark body {
    background-color: #121212;
}

/* Profile card shadow and hover effect */
.profile-card {
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.profile-card:hover {
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    transform: translateY(-2px);
}

/* Card background gradient */
.card-gradient::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 5px;
    background: linear-gradient(to right, #3b82f6, #8b5cf6);
}

/* Form input focus effects */
.form-input {
    transition: all 0.2s ease;
}

.form-input:focus {
    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
    transform: translateY(-1px);
}

/* Switch toggle styling */
.toggle-bg:after {
    transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.toggle-bg {
    transition: background-color 0.3s ease;
}

/* Toggle label hover */
.toggle-label:hover {
    opacity: 0.95;
}

/* Gradient animation for buttons */
.gradient-btn {
    background-size: 200% auto;
    transition: 0.4s;
    box-shadow: 0 4px 15px rgba(59, 130, 246, 0.15);
}

.gradient-btn:hover {
    background-position: right center;
    box-shadow: 0 6px 20px rgba(59, 130, 246, 0.25);
    transform: translateY(-2px);
}

.gradient-btn:active {
    transform: translateY(0px);
    box-shadow: 0 2px 10px rgba(59, 130, 246, 0.25);
}

/* Photo upload preview animation */
@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(99, 102, 241, 0.7);
    }
    70% {
        box-shadow: 0 0 0 15px rgba(99, 102, 241, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(99, 102, 241, 0);
    }
}

.pulse-animation {
    animation: pulse 2s infinite;
}

/* Shimmer effect for profile image */
.shimmer {
    position: relative;
    overflow: hidden;
}

.shimmer::after {
    content: "";
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
        to right,
        rgba(255, 255, 255, 0) 0%,
        rgba(255, 255, 255, 0.3) 50%,
        rgba(255, 255, 255, 0) 100%
    );
    transform: rotate(30deg);
    animation: shimmer 2s infinite;
}

@keyframes shimmer {
    0% {
        transform: translateX(-100%) rotate(30deg);
    }
    100% {
        transform: translateX(100%) rotate(30deg);
    }
}

/* Floating labels */
.floating-label {
    position: relative;
}

.floating-label input:focus + label,
.floating-label textarea:focus + label,
.floating-input:not(:placeholder-shown) + label {
    transform: translateY(-1.5rem) scale(0.85);
    color: #3b82f6;
}

.floating-label label {
    position: absolute;
    left: 1rem;
    top: 0.75rem;
    padding: 0 0.25rem;
    transition: all 0.2s ease;
    pointer-events: none;
}

/* Settings section hover effect */
.settings-item {
    transition: all 0.2s ease;
}

.settings-item:hover {
    background-color: rgba(243, 244, 246, 0.5);
}

.dark .settings-item:hover {
    background-color: rgba(31, 41, 55, 0.5);
}

/* Toast notification */
.toast {
    position: fixed;
    top: 1rem;
    right: 1rem;
    padding: 1rem;
    background: linear-gradient(to right, #3b82f6, #8b5cf6);
    color: white;
    border-radius: 0.5rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    z-index: 50;
    transform: translateY(-10px);
    opacity: 0;
    transition: all 0.3s ease;
}

.toast.show {
    transform: translateY(0);
    opacity: 1;
}
</style>

<div class="min-h-screen pb-12 bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-black">
    <!-- Header -->
    <div class="border-b border-gray-200 dark:border-gray-800 bg-white dark:bg-black sticky top-0 z-10 backdrop-blur-lg bg-opacity-80 dark:bg-opacity-80">
        <div class="max-w-4xl mx-auto px-4 py-4 flex items-center justify-between">
            <a href="/profile" class="flex items-center text-gray-800 dark:text-white hover:text-gray-600 dark:hover:text-gray-300 transition">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
                <span class="ml-2 text-sm font-medium">Back to Profile</span>
            </a>
            <h1 class="text-xl font-semibold text-center text-gray-800 dark:text-white">Edit Profile</h1>
            <button type="submit" form="profile-form" id="saveButton" class="px-4 py-1.5 rounded-full text-white bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 font-medium text-sm transition-all shadow-md hover:shadow-lg gradient-btn">
                Save Changes
            </button>
        </div>
    </div>

    <div class="max-w-4xl mx-auto px-4 pt-8">
        <!-- Profile Photo Section -->
        <div class="bg-white dark:bg-black rounded-lg shadow-md p-6 mb-6 profile-card card-gradient">
            <div class="flex flex-col items-center">
                <div class="mb-6 relative group">
                    <div class="relative rounded-full p-1 bg-gradient-to-r from-blue-500 to-purple-600 shimmer">
                        <div class="bg-white dark:bg-black p-[2px] rounded-full overflow-hidden">
                            <img src="<%= user.profileImage %>" 
                                alt="Profile" 
                                id="profile-preview"
                                class="w-28 h-28 md:w-32 md:h-32 rounded-full object-cover border-2 border-white dark:border-gray-900 transition-all duration-300">
                            <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-40 rounded-full opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer backdrop-blur-sm">
                                <label class="cursor-pointer text-white text-sm font-medium px-2 py-1 bg-black bg-opacity-50 rounded-full" for="profile-image-input">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                                    </svg>
                                    Change 
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <form action="/upload-profile-pic" method="POST" enctype="multipart/form-data" class="flex flex-col items-center">
                    <input type="file" 
                        name="profileImage" 
                        id="profile-image-input"
                        class="hidden"
                        accept="image/*"
                        onchange="previewImage(this)">
                    <div class="flex space-x-6 mt-2">
                        <label for="profile-image-input" class="text-blue-500 font-medium cursor-pointer text-sm hover:text-blue-600 transition flex items-center border border-blue-200 dark:border-blue-800 px-3 py-1.5 rounded-full hover:bg-blue-50 dark:hover:bg-blue-900/30">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                            Upload Photo
                        </label>
                        <a href="/remove-profile-pic" class="text-red-500 font-medium text-sm hover:text-red-600 transition flex items-center border border-red-200 dark:border-red-800 px-3 py-1.5 rounded-full hover:bg-red-50 dark:hover:bg-red-900/30">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                            Remove Photo
                        </a>
                    </div>
                </form>
            </div>
        </div>

        <!-- Profile Form -->
        <div class="bg-white dark:bg-black rounded-lg shadow-md overflow-hidden profile-card card-gradient">
            <div class="p-6 border-b border-gray-200 dark:border-gray-800">
                <h2 class="text-lg font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
                    <span class="inline-flex items-center justify-center h-8 w-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 mr-3">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                    </span>
                    Profile Information
                </h2>
                <form id="profile-form" action="/update-profile" method="POST" class="space-y-6">
                    <!-- Basic Info Section -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- Name Field -->
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-500 dark:text-gray-400">Full Name</label>
                            <div class="relative group">
                                <span class="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-400 dark:text-gray-600 group-hover:text-blue-500 transition-colors duration-200">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                    </svg>
                                </span>
                                <input type="text" 
                                    name="name" 
                                    value="<%= user.name %>" 
                                    class="block w-full pl-10 pr-3 py-2.5 bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none form-input transition"
                                    required>
                            </div>
                        </div>

                        <!-- Username Field -->
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-500 dark:text-gray-400">Username</label>
                            <div class="relative group">
                                <span class="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-400 dark:text-gray-600 group-hover:text-blue-500 transition-colors duration-200">
                                    <span class="text-sm font-medium">@</span>
                                </span>
                                <input type="text" 
                                    name="username" 
                                    value="<%= user.username %>" 
                                    class="block w-full pl-10 pr-3 py-2.5 bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none form-input transition"
                                    required>
                            </div>
                        </div>
                    </div>

                    <!-- Bio Field -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-500 dark:text-gray-400 flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
                            </svg>
                            Bio
                        </label>
                        <div class="relative group">
                            <textarea name="bio" 
                                    rows="4" 
                                    class="block w-full px-4 py-3 bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none form-input transition resize-none"
                                    placeholder="Tell us about yourself..."><%= user.bio %></textarea>
                            <div class="absolute bottom-3 right-3 text-xs bg-white dark:bg-gray-800 px-2 py-1 rounded-full text-gray-500 dark:text-gray-400 transition-all duration-200" id="bioCount">0/150</div>
                        </div>
                        <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Write a short bio to let people know more about you.</p>
                    </div>
                </form>
            </div>

            <!-- Settings -->
            <div>
                <!-- Account Settings Section -->
                <div class="px-6 py-4 bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 text-sm font-medium text-gray-800 dark:text-gray-300 flex items-center border-t border-gray-200 dark:border-gray-800">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                    Account Settings
                </div>
                
                <!-- Dark Mode Toggle -->
                <div class="px-6 py-4 bg-white dark:bg-black border-t border-gray-200 dark:border-gray-800 settings-item">
                    <div class="flex items-center justify-between">
                        <div>
                            <div class="flex items-center">
                                <div class="w-10 h-10 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center mr-3">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 dark:text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                                    </svg>
                                </div>
                                <div>
                                    <div class="text-sm font-medium text-gray-900 dark:text-white">Dark Mode</div>
                                    <div class="text-xs text-gray-500 dark:text-gray-400">Adjust app appearance</div>
                                </div>
                            </div>
                        </div>
                        <label class="inline-flex items-center cursor-pointer toggle-label">
                            <input type="checkbox" id="darkMode" class="sr-only peer" <%= user.darkMode ? 'checked' : '' %>>
                            <div class="relative w-14 h-7 bg-gray-200 peer-focus:outline-none rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all dark:border-gray-600 peer-checked:bg-gradient-to-r peer-checked:from-blue-500 peer-checked:to-purple-600 toggle-bg"></div>
                        </label>
                    </div>
                </div>
                
                <!-- Privacy Section -->
                <div class="px-6 py-4 bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 text-sm font-medium text-gray-800 dark:text-gray-300 flex items-center border-t border-gray-200 dark:border-gray-800">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                    </svg>
                    Privacy
                </div>
            </div>
        </div>
        
        <!-- Save Changes Button (Mobile) -->
        <div class="fixed bottom-6 right-6 md:hidden z-20">
            <button type="submit" form="profile-form" class="w-14 h-14 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white flex items-center justify-center shadow-lg transition gradient-btn">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
            </button>
        </div>
    </div>
</div>

<!-- Success Toast Notification -->
<div id="savedToast" class="toast">
    <div class="flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
        <span>Profile updated successfully!</span>
    </div>
</div>

<script>
// Preview image before upload with smooth transition
function previewImage(input) {
    if (input.files && input.files[0]) {
        const reader = new FileReader();
        const preview = document.getElementById('profile-preview');
        
        preview.classList.add('opacity-50', 'scale-95');
        
        reader.onload = function(e) {
            setTimeout(() => {
                preview.src = e.target.result;
                preview.classList.remove('opacity-50', 'scale-95');
                preview.classList.add('pulse-animation');
                
                // Reset animation after a moment
                setTimeout(() => {
                    preview.classList.remove('pulse-animation');
                }, 2000);
                
                // Auto-submit the form
                input.form.submit();
            }, 200);
        }
        
        reader.readAsDataURL(input.files[0]);
    }
}

// Dark mode functionality
document.addEventListener('DOMContentLoaded', function() {
    const darkModeToggle = document.getElementById('darkMode');
    const saveButton = document.getElementById('saveButton');
    const savedToast = document.getElementById('savedToast');
    
    // Check if dark mode is enabled in localStorage
    if (localStorage.getItem('darkMode') === 'enabled') {
        document.documentElement.classList.add('dark');
        darkModeToggle.checked = true;
    }
    
    // Toggle dark mode
    darkModeToggle.addEventListener('change', function() {
        if (this.checked) {
            document.documentElement.classList.add('dark');
            localStorage.setItem('darkMode', 'enabled');
            
            // Save preference to user profile
            updateDarkModePreference(true);
        } else {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('darkMode', 'disabled');
            
            // Save preference to user profile
            updateDarkModePreference(false);
        }
    });
    
    // Function to update user dark mode preference
    function updateDarkModePreference(isDarkMode) {
        fetch('/update-theme', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ darkMode: isDarkMode })
        })
        .then(response => response.json())
        .then(data => {
            console.log('Theme preference updated:', data);
            // Show toast notification
            showToast();
        })
        .catch(error => console.error('Error updating theme preference:', error));
    }
    
    // Bio character counter
    const bioTextarea = document.querySelector('textarea[name="bio"]');
    const bioCount = document.getElementById('bioCount');
    
    if (bioTextarea && bioCount) {
        const maxLength = 150;
        
        const updateCount = () => {
            const currentLength = bioTextarea.value.length;
            bioCount.textContent = `${currentLength}/${maxLength}`;
            
            // Change color when approaching limit
            if (currentLength > maxLength * 0.8) {
                bioCount.classList.add('text-yellow-500');
                bioCount.classList.add('bg-yellow-50');
                bioCount.classList.add('dark:bg-yellow-900/30');
            } else {
                bioCount.classList.remove('text-yellow-500');
                bioCount.classList.remove('bg-yellow-50');
                bioCount.classList.remove('dark:bg-yellow-900/30');
            }
            
            if (currentLength > maxLength) {
                bioCount.classList.add('text-red-500');
                bioCount.classList.add('bg-red-50');
                bioCount.classList.add('dark:bg-red-900/30');
            } else {
                bioCount.classList.remove('text-red-500');
                bioCount.classList.remove('bg-red-50');
                bioCount.classList.remove('dark:bg-red-900/30');
            }
        };
        
        // Initialize count
        updateCount();
        
        // Update on input
        bioTextarea.addEventListener('input', updateCount);
    }
    
    // Show toast notification
    function showToast() {
        savedToast.classList.add('show');
        setTimeout(() => {
            savedToast.classList.remove('show');
        }, 3000);
    }
    
    // Show toast on form submission
    if (saveButton) {
        saveButton.addEventListener('click', function() {
            // The form will be submitted and page will reload
            // This is to prevent showing the toast in case form is invalid
            localStorage.setItem('showSavedToast', 'true');
        });
    }
    
    // Check if we should show the toast (after page reload)
    if (localStorage.getItem('showSavedToast') === 'true') {
        showToast();
        localStorage.removeItem('showSavedToast');
    }
    
    // Add input field focus animation
    const inputFields = document.querySelectorAll('input, textarea');
    inputFields.forEach(field => {
        field.addEventListener('focus', function() {
            this.closest('.group')?.querySelector('svg')?.classList.add('text-blue-500');
            this.closest('.group')?.querySelector('span')?.classList.add('text-blue-500');
        });
        
        field.addEventListener('blur', function() {
            this.closest('.group')?.querySelector('svg')?.classList.remove('text-blue-500');
            this.closest('.group')?.querySelector('span')?.classList.remove('text-blue-500');
        });
    });
});
</script>
</body>
</html> 