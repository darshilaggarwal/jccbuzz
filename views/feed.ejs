<%- include('partials/header') %>

<!-- Modern Toast Notification -->
<div id="toast" class="fixed bottom-5 left-1/2 transform -translate-x-1/2 translate-y-full transition-all duration-300 z-50 opacity-0">
    <div class="bg-black bg-opacity-75 text-white px-6 py-3 rounded-full shadow-lg backdrop-blur-sm">
        <span id="toast-message" class="font-medium text-sm"></span>
    </div>
</div>

<!-- Comments Modal -->
<div id="commentsModal" class="hidden fixed inset-0 bg-opacity-50 z-50 flex items-end sm:items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-t-xl sm:rounded-xl max-w-md w-full mx-auto overflow-hidden animate-slideUp">
        <div class="p-3 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
            <div></div>
            <h3 class="text-base font-semibold text-gray-800 dark:text-white">Comments</h3>
            <button onclick="closeCommentsModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
                </div>
        
        <div id="modalCommentsContainer" class="p-4 max-h-[70vh] overflow-y-auto">
            <!-- Comments will be loaded here -->
            </div>
        
        <div class="p-3 border-t border-gray-200 dark:border-gray-700">
            <form class="flex items-center" id="modalCommentForm">
                <img id="modalUserImage" src="<%= user.profileImage %>" 
                     alt="Your profile" 
                     class="w-8 h-8 rounded-full object-cover mr-2">
                <div class="relative flex-1">
                    <input type="text" 
                           id="modalCommentInput" 
                           placeholder="Add a comment..." 
                           class="w-full py-2 px-3 border border-gray-300 dark:border-gray-700 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-white text-sm"
                           required>
                    <button type="submit" class="absolute right-2 top-1/2 transform -translate-y-1/2 text-blue-500 hover:text-blue-600">
                        <i class="fas fa-paper-plane"></i>
            </button>
                </div>
        </form>
        </div>
    </div>
</div>

<!-- Top Navigation Bar with Story Bubbles -->
<div class="sticky top-0 bg-white dark:bg-black border-b border-gray-200 dark:border-gray-800 z-30 pb-2">
    <div class="max-w-xl mx-auto px-2">
        

        <!-- Stories List -->
        <div class="flex space-x-4 overflow-x-auto py-4 scrollbar-hide">
            <!-- Add Story Button -->
            <div class="flex-shrink-0 text-center">
                <label class="cursor-pointer block">
                    <div class="w-16 h-16 rounded-full bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-800 flex items-center justify-center border-2 border-white dark:border-black">
                        <div class="w-14 h-14 rounded-full bg-white dark:bg-black flex items-center justify-center">
                        <i class="fas fa-plus text-blue-500"></i>
                        </div>
                    </div>
                    <input type="file" 
                           id="storyInput" 
                           class="hidden" 
                           accept="image/*,video/*" 
                           onchange="handleStoryUpload(event)">
                    <p class="text-xs mt-1 text-gray-600 dark:text-gray-400 font-medium">Your story</p>
                </label>
            </div>

            <!-- Stories List -->
            <div id="storiesList" class="flex space-x-4">
                <!-- Stories will be loaded dynamically -->
            </div>
        </div>
        </div>
    </div>

<!-- Main Content -->
<div class="max-w-xl mx-auto mt-2 px-0 sm:px-2">
    <!-- Create Post Button (Mobile) -->
    <div class="fixed bottom-6 right-6 z-40 md:hidden">
        <button onclick="openCreatePostModal()" 
                class="w-14 h-14 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-full shadow-lg flex items-center justify-center">
            <i class="fas fa-plus text-xl"></i>
        </button>
    </div>

    <!-- Create Post Button (Desktop) -->
    <!-- <div class="fixed top-24 right-6 z-40 hidden md:block">
        <button onclick="openCreatePostModal()" 
                class="bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg px-4 py-2 shadow-md hover:shadow-lg transition-all flex items-center">
            <i class="fas fa-plus mr-2"></i> Create Post
        </button>
    </div> -->
    
    <!-- Posts Feed -->
    <div class="space-y-4">
        <% posts.forEach(post => { 
            // Additional safety check to filter out posts with null users at template level
            if (!post || !post.user) {
                return; // Skip this post entirely
            }
        %>
            <div class="bg-white dark:bg-black border border-gray-200 dark:border-gray-800 sm:rounded-lg overflow-hidden transform transition-all post-container">
                <!-- Post Header -->
                <div class="p-3 flex items-center justify-between">
                    <a href="/user/<%= post.user.username %>" class="flex items-center group">
                        <div class="relative">
                            <div class="<%= post.user.hasActiveStory ? 'story-ring p-[2px]' : '' %> rounded-full">
                                <div class="bg-white dark:bg-black p-[1px] rounded-full">
                            <img src="<%= post.user.profileImage %>" 
                                 alt="Profile" 
                                         class="w-8 h-8 rounded-full object-cover">
                        </div>
                            </div>
                        </div>
                        <div class="ml-2">
                            <h5 class="font-semibold text-sm text-gray-800 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400"><%= post.user.name %></h5>
                            <p class="text-xs text-gray-500 dark:text-gray-400"><%= post.user.location ? post.user.location : '' %></p>
                        </div>
                    </a>
                    <button onclick="showPostOptions('<%= post._id %>')" class="text-gray-600 dark:text-gray-400 p-1 hover:text-gray-800 dark:hover:text-gray-200 transition">
                            <i class="fas fa-ellipsis-h"></i>
                        </button>
                </div>

                <!-- Images -->
                <% if (post.images && post.images.length > 0) { %>
                    <div class="relative post-image" ondblclick="handleDoubleTap('<%= post._id %>')">
                        <div class="swiper-container">
                            <div class="swiper-wrapper">
                                <% post.images.forEach(image => { %>
                                    <div class="swiper-slide">
                                        <img src="<%= image.url %>" 
                                             alt="Post image"
                                             class="w-full object-cover aspect-square sm:aspect-auto sm:max-h-[600px]">
                                    </div>
                                <% }) %>
                            </div>
                            <% if (post.images.length > 1) { %>
                                <div class="swiper-pagination"></div>
                                <div class="swiper-button-next"></div>
                                <div class="swiper-button-prev"></div>
                                <div class="absolute bottom-4 right-4 bg-black/50 text-white text-xs px-2 py-1 rounded-full z-10">
                                    <span class="current-slide">1</span>/<%= post.images.length %>
                                </div>
                            <% } %>
                        </div>
                        <div class="heart-animation hidden">
                            <i class="fas fa-heart text-red-500"></i>
                        </div>
                    </div>
                <% } %>

                <!-- Post Content -->
                <div class="px-4 pb-4">
                    <!-- Actions -->
                    <div class="flex items-center justify-between py-3">
                        <div class="flex items-center space-x-4">
                            <button onclick="toggleLike('<%= post._id %>')" 
                                    id="like-btn-<%= post._id %>"
                                    class="like-btn <%= post.likes.some(id => id.toString() === user._id.toString()) ? 'text-red-500' : 'text-gray-800 dark:text-white' %> hover:scale-110 transform transition-transform">
                                <% if (post.likes.some(id => id.toString() === user._id.toString())) { %>
                                <i class="fas fa-heart text-2xl"></i>
                                <% } else { %>
                                    <i class="far fa-heart text-2xl"></i>
                                <% } %>
                            </button>
                            <button onclick="showComments('<%= post._id %>')" 
                                    class="text-gray-800 dark:text-white hover:scale-110 transform transition-transform">
                                <i class="far fa-comment text-2xl"></i>
                            </button>
                            <button onclick="sharePost('<%= post._id %>')" 
                                    class="text-gray-800 dark:text-white hover:scale-110 transform transition-transform">
                                <i class="far fa-paper-plane text-2xl"></i>
                            </button>
                        </div>
                        <button onclick="toggleSavePost('<%= post._id %>')"
                                id="save-btn-<%= post._id %>"
                                class="save-btn hover:scale-110 transform transition-transform">
                            <% if (user.savedPosts && user.savedPosts.includes(post._id)) { %>
                                <i class="fas fa-bookmark text-2xl text-gray-800 dark:text-white"></i>
                            <% } else { %>
                                <i class="far fa-bookmark text-2xl text-gray-800 dark:text-white"></i>
                            <% } %>
                        </button>
                    </div>

                    <!-- Likes Count -->
                    <div class="mb-2">
                        <p class="font-semibold text-sm text-gray-800 dark:text-white">
                            <span class="like-count-<%= post._id %>"><%= post.likes.length %></span> likes
                        </p>
                    </div>

                    <!-- Caption -->
                    <div class="mb-2">
                        <p class="text-sm text-gray-800 dark:text-white">
                            <span class="font-semibold mr-1"><%= post.user.username %></span>
                            <%= post.content %>
                        </p>
                    </div>

                    <!-- Post Metadata -->
                    <div class="text-xs text-gray-500 dark:text-gray-400 mb-1">
                        <%= new Date(post.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) %>
                        <% if (post.comments && post.comments.length > 0) { %>
                            • <button onclick="showComments('<%= post._id %>')" class="text-gray-500 dark:text-gray-400 hover:underline">
                                View all <%= post.comments.length %> comments
                            </button>
                        <% } %>
                    </div>
                </div>
            </div>
        <% }) %>
    </div>

    <!-- Loading Spinner -->
    <div class="flex justify-center my-8 loading-spinner">
        <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
    </div>
</div>

<!-- Create Post Modal with Instagram-like UI -->
<div id="createPostModal" class="hidden fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-lg w-full mx-4">
        <div class="p-3 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
            <div></div>
            <h2 class="text-base font-semibold text-gray-800 dark:text-white">Create New Post</h2>
            <button onclick="closeCreatePostModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <form id="createPostForm" class="p-4">
            <!-- Image Upload Section -->
            <div class="mb-4">
                <div id="imagePreviewContainer" class="hidden grid grid-cols-2 gap-4 mb-4">
                    <!-- Image previews will be added here -->
                </div>
                
                <div class="flex items-center justify-center w-full">
                    <label class="w-full flex flex-col items-center px-4 py-6 bg-white dark:bg-gray-800 rounded-lg border-2 border-dashed border-gray-300 dark:border-gray-600 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                        <span class="mt-2 text-sm text-gray-500 dark:text-gray-400">Upload photos</span>
                        <span class="mt-1 text-xs text-gray-400 dark:text-gray-500">PNG, JPG up to 10MB</span>
                        <input type="file" id="imageInput" name="processedImages" multiple accept="image/*" class="hidden" onchange="handleImageSelect(event)">
                    </label>
                </div>
            </div>

            <!-- Caption Input -->
            <textarea name="content" 
                     placeholder="Write a caption..."
                     class="w-full p-4 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4 dark:bg-gray-800 dark:border-gray-700 dark:text-white"
                     rows="3"
                     required></textarea>

            <button type="submit" 
                    id="submitPostBtn"
                    class="w-full px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg
                         hover:from-blue-600 hover:to-purple-700 transition duration-200">
                Share
            </button>
        </form>
    </div>
</div>

<!-- Story Viewer Modal -->
<div id="storyModal" class="hidden fixed inset-0 bg-black z-50">
    <div class="relative h-full flex justify-center">
        <!-- Mobile-like container with fixed aspect ratio -->
        <div class="h-full aspect-[9/16] bg-black relative max-w-[500px] w-full">
            <!-- Touch areas for navigation -->
            <div class="absolute inset-0 z-10 flex">
                <div class="w-1/2 h-full" onclick="showPreviousStory()"></div>
                <div class="w-1/2 h-full" onclick="showNextStory()"></div>
            </div>
            
            <button onclick="closeStoryModal()" class="absolute top-4 right-4 text-white text-2xl z-20">
                <i class="fas fa-times"></i>
            </button>
            
            <div class="h-full flex items-center justify-center bg-black">
                <div id="storyImage" class="w-full h-full relative">
                    <!-- Media will be inserted here -->
                </div>
            </div>

            <!-- Story Progress Bar -->
            <div class="absolute top-0 left-0 right-0 flex space-x-1 p-2 z-20">
                <div class="story-progress-container flex-1 h-1 bg-gray-600 rounded-full overflow-hidden">
                    <div id="storyProgress" class="h-full bg-white w-0 transition-all"></div>
                </div>
            </div>

            <!-- Story User Info -->
            <div class="absolute top-4 left-4 flex items-center z-20">
                <div class="story-ring p-[2px] rounded-full">
                    <div class="bg-black p-[1px] rounded-full">
                <img id="storyUserImage" src="" alt="Profile" class="w-8 h-8 rounded-full object-cover">
                    </div>
                </div>
                <div class="ml-2 text-white">
                    <p id="storyUsername" class="font-semibold text-sm"></p>
                    <p id="storyTime" class="text-xs opacity-75"></p>
                </div>
            </div>

            <!-- Story Reply Section -->
            <div class="absolute bottom-4 left-4 right-4 z-20">
                <form onsubmit="replyToStory(event)" class="flex items-center gap-2">
                    <input type="text" 
                           id="storyReplyInput"
                           placeholder="Reply to story..." 
                           class="flex-1 px-4 py-3 rounded-full bg-white/10 text-white placeholder-white/70 backdrop-blur-sm border border-white/20 focus:outline-none focus:ring-2 focus:ring-white/50">
                    <button type="submit" 
                            class="p-3 rounded-full bg-white/10 text-white backdrop-blur-sm border border-white/20 hover:bg-white/20 flex items-center justify-center">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </form>
            </div>
                    </div>
                    </div>
                </div>

<!-- Post Options Modal - Instagram Style -->
<div id="postOptionsModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-end sm:items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-t-xl sm:rounded-xl max-w-md w-full mx-auto overflow-hidden animate-slideUp">
        <div class="divide-y divide-gray-200 dark:divide-gray-700">
            <button onclick="copyPostLink()" class="w-full text-center py-4 text-sm font-medium text-gray-800 dark:text-white hover:bg-gray-50 dark:hover:bg-gray-800 transition">
                Copy link
            </button>
            <button onclick="reportPost()" class="w-full text-center py-4 text-sm font-medium text-gray-800 dark:text-white hover:bg-gray-50 dark:hover:bg-gray-800 transition">
                Report
            </button>
            <button onclick="unfollowUser()" class="w-full text-center py-4 text-sm font-medium text-red-600 hover:bg-gray-50 dark:hover:bg-gray-800 transition">
                Unfollow
            </button>
            <button onclick="closePostOptionsModal()" class="w-full text-center py-4 text-sm font-medium text-gray-800 dark:text-white hover:bg-gray-50 dark:hover:bg-gray-800 transition">
                Cancel
            </button>
        </div>
    </div>
</div>

<!-- Share Modal - Instagram Style -->
<div id="shareModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-end sm:items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-t-xl sm:rounded-xl max-w-md w-full mx-auto overflow-hidden animate-slideUp">
        <div class="p-4 border-b border-gray-200 dark:border-gray-700 text-center">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Share Post</h3>
        </div>
        
        <div class="p-4">
            <div class="mb-4 relative">
                <div class="flex items-center px-3 py-2 bg-gray-100 dark:bg-gray-800 rounded-lg">
                    <i class="fas fa-search text-gray-400 mr-2"></i>
                <input type="text" 
                       id="shareUsername" 
                           class="w-full bg-transparent border-none focus:outline-none text-gray-800 dark:text-white"
                           placeholder="Search for a user...">
            </div>
                
                <div id="userResults" class="absolute left-0 right-0 mt-1 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg max-h-60 overflow-y-auto hidden z-10">
                    <!-- User results will appear here -->
                </div>
            </div>
            
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Message (optional)</label>
                <textarea id="shareMessage" 
                          class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-700 dark:text-white"
                          rows="3" 
                          placeholder="Add a message..."></textarea>
            </div>
            
            <div class="flex justify-end space-x-3">
                <button onclick="closeShareModal()" 
                        class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
                    Cancel
                </button>
                <button onclick="confirmShare()" 
                        class="px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg hover:from-blue-600 hover:to-purple-700">
                    Share
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Add Swiper JS for image carousel -->
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>

<style>
/* Hide scrollbar for Chrome, Safari and Opera */
.scrollbar-hide::-webkit-scrollbar {
    display: none;
}

/* Hide scrollbar for IE, Edge and Firefox */
.scrollbar-hide {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
}

/* Swiper Customization */
.swiper-button-next,
.swiper-button-prev {
    color: white !important;
    background: rgba(0, 0, 0, 0.3);
    width: 30px !important;
    height: 30px !important;
    border-radius: 50%;
    --swiper-navigation-size: 18px;
}

.swiper-button-next:after,
.swiper-button-prev:after {
    font-size: 18px;
}

.swiper-pagination-bullet {
    background: white !important;
    opacity: 0.6 !important;
    width: 6px;
    height: 6px;
}

.swiper-pagination-bullet-active {
    opacity: 1 !important;
    background: white !important;
}

/* Animations */
@keyframes like-animation {
    0% { transform: scale(0); opacity: 0; }
    15% { transform: scale(1.5); opacity: 1; }
    30% { transform: scale(0.8); opacity: 1; }
    45% { transform: scale(1.2); opacity: 1; }
    60% { transform: scale(0.9); opacity: 1; }
    75% { transform: scale(1.1); opacity: 1; }
    100% { transform: scale(1); opacity: 0; }
}

.heart-animation {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 100px;
    color: rgba(255, 255, 255, 0.9);
    text-shadow: 0 0 20px rgba(0,0,0,0.4);
    pointer-events: none;
    z-index: 10;
    opacity: 0;
}

.heart-animation.active {
    animation: like-animation 1s ease-in-out forwards;
}

.like-btn {
    transition: transform 0.2s, color 0.2s;
}

.like-btn.liked {
    animation: like-button-animation 0.3s ease-in-out;
}

@keyframes like-button-animation {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1); }
}

.story-ring {
    background: linear-gradient(45deg, #f09433 0%, #e6683c 25%, #dc2743 50%, #cc2366 75%, #bc1888 100%);
}

.story-ring-viewed {
    background: #ccc;
}

@keyframes slideUp {
    from { transform: translateY(100%); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

.animate-slideUp {
    animation: slideUp 0.3s ease-out forwards;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.animate-fadeIn {
    animation: fadeIn 0.3s ease-out forwards;
}

/* Better comment transitions */
.comments-container {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
}

.comments-container.open {
    max-height: 500px;
}

@media (prefers-color-scheme: dark) {
    .swiper-button-next,
    .swiper-button-prev {
        background: rgba(255, 255, 255, 0.15);
    }
}

/* Loading shimmer effect */
@keyframes shimmer {
    0% { background-position: -1000px 0; }
    100% { background-position: 1000px 0; }
}

.shimmer {
    background: linear-gradient(90deg, 
        rgba(255, 255, 255, 0.1), 
        rgba(255, 255, 255, 0.2), 
        rgba(255, 255, 255, 0.1)
    );
    background-size: 1000px 100%;
    animation: shimmer 2s infinite linear;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize Swiper carousels for post images
    const swipers = document.querySelectorAll('.swiper-container');
    swipers.forEach((container, index) => {
        const swiper = new Swiper(container, {
            pagination: {
                el: '.swiper-pagination',
                dynamicBullets: true,
            },
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },
            grabCursor: true,
            keyboard: {
                enabled: true,
            },
            on: {
                slideChange: function() {
                    const currentSlideIndicator = container.querySelector('.current-slide');
                    if (currentSlideIndicator) {
                        currentSlideIndicator.textContent = this.activeIndex + 1;
                    }
                }
            }
        });
    });
    
    // Infinite scroll functionality
    let isLoading = false;
    let page = 1;

    window.addEventListener('scroll', function() {
        if (isLoading) return;
        
        const scrollPosition = window.innerHeight + window.scrollY;
        const pageHeight = document.body.offsetHeight;
        const loadingSpinner = document.querySelector('.loading-spinner');
        
        if (scrollPosition >= pageHeight - 500 && loadingSpinner) {
            isLoading = true;
            loadMorePosts();
        }
    });

    // Load stories on page load
    loadStories();
    
    // Initialize socket connection
    initializeSocketConnection();
    
    // Set up event listeners for post creation
    if (document.getElementById('createPostForm')) {
        document.getElementById('createPostForm').addEventListener('submit', handlePostSubmit);
    }
});

// Show comments modal
let currentPostIdForComments = null;

function showComments(postId) {
    currentPostIdForComments = postId;
    
    // Get the comments container
    const modalCommentsContainer = document.getElementById('modalCommentsContainer');
    modalCommentsContainer.innerHTML = '<div class="flex justify-center py-4"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div></div>';
    
    // Show the modal
    document.getElementById('commentsModal').classList.remove('hidden');
    document.body.style.overflow = 'hidden'; // Prevent scrolling
    
    // Fetch the comments
    fetch(`/post/${postId}/comments`)
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                modalCommentsContainer.innerHTML = `<p class="text-center text-red-500">${data.error}</p>`;
            return;
        }
        
            // Update the form
            const modalCommentForm = document.getElementById('modalCommentForm');
            modalCommentForm.onsubmit = function(e) {
                e.preventDefault();
                addCommentFromModal(postId);
            };
            
            // Display the comments
            if (data.comments && data.comments.length > 0) {
                let commentsHTML = '';
                
                data.comments.forEach(comment => {
                    commentsHTML += `
                        <div class="flex space-x-2 py-2 border-b border-gray-100 dark:border-gray-800 last:border-0">
                            <img src="${comment.user ? comment.user.profileImage : '/images/default-profile.png'}" 
                                 alt="${comment.user ? comment.user.name : 'User'}" 
                                 class="w-8 h-8 rounded-full flex-shrink-0 object-cover">
                            <div class="flex-1">
                                <div class="flex justify-between items-start">
                                    <p class="font-medium text-sm text-gray-800 dark:text-white">${comment.user ? comment.user.name : 'Deleted User'}</p>
                                    <span class="text-xs text-gray-500 dark:text-gray-400">${formatTimeAgo(new Date(comment.createdAt))}</span>
                                </div>
                                <p class="text-gray-600 dark:text-gray-300 text-sm">${comment.content}</p>
                                
                                <!-- Comment actions -->
                                <div class="mt-1 flex items-center text-xs space-x-4">
                                    <button onclick="likeComment('${comment._id}')" 
                                            class="comment-like-btn ${comment.likes && comment.likes.includes('<%= user._id %>') ? 'text-red-500' : 'text-gray-500'} hover:text-red-500">
                                        <i class="fas fa-heart"></i>
                                        <span class="like-count ml-1">${comment.likes ? comment.likes.length : 0}</span>
                                    </button>
                                    <button onclick="toggleReplyForm('${comment._id}')" 
                                            class="text-gray-500 hover:text-blue-500">
                                        Reply
                                    </button>
                                </div>
                                
                                <!-- Replies would go here -->
                        </div>
            </div>
        `;
                });
                
                modalCommentsContainer.innerHTML = commentsHTML;
            } else {
                modalCommentsContainer.innerHTML = '<p class="text-center text-gray-500 dark:text-gray-400 py-4">No comments yet</p>';
            }
        })
        .catch(error => {
            console.error('Error fetching comments:', error);
            modalCommentsContainer.innerHTML = '<p class="text-center text-red-500">Failed to load comments</p>';
        });
}

// Add comment from modal
function addCommentFromModal(postId) {
    const input = document.getElementById('modalCommentInput');
    const content = input.value.trim();
    
    if (!content) return;
    
    // Disable input and show loading state
    input.disabled = true;
    
    fetch(`/post/${postId}/comment`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ content })
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            showToast(data.error);
    } else {
            // Clear input
            input.value = '';
            
            // Refresh comments
            showComments(postId);
        }
    })
    .catch(error => {
        console.error('Error adding comment:', error);
        showToast('Failed to add comment');
    })
    .finally(() => {
        // Re-enable input
        input.disabled = false;
    });
}

// Close comments modal
function closeCommentsModal() {
    document.getElementById('commentsModal').classList.add('hidden');
    document.body.style.overflow = ''; // Re-enable scrolling
    currentPostIdForComments = null;
}

// Format time ago
function formatTimeAgo(date) {
    const seconds = Math.floor((new Date() - date) / 1000);
    
    let interval = Math.floor(seconds / 31536000);
    if (interval > 1) return interval + ' years ago';
    if (interval === 1) return '1 year ago';
    
    interval = Math.floor(seconds / 2592000);
    if (interval > 1) return interval + ' months ago';
    if (interval === 1) return '1 month ago';
    
    interval = Math.floor(seconds / 86400);
    if (interval > 1) return interval + ' days ago';
    if (interval === 1) return '1 day ago';
    
    interval = Math.floor(seconds / 3600);
    if (interval > 1) return interval + ' hours ago';
    if (interval === 1) return '1 hour ago';
    
    interval = Math.floor(seconds / 60);
    if (interval > 1) return interval + ' minutes ago';
    if (interval === 1) return '1 minute ago';
    
    return 'just now';
}

// Toggle post like
function toggleLike(postId) {
    const likeBtn = document.getElementById(`like-btn-${postId}`);
    const isLiked = likeBtn.classList.contains('text-red-500');
    
    // Optimistic UI update
    if (isLiked) {
        likeBtn.classList.remove('text-red-500');
        likeBtn.classList.add('text-gray-800', 'dark:text-white');
        likeBtn.innerHTML = '<i class="far fa-heart text-2xl"></i>';
        updateLikeCount(postId, -1);
                } else {
        likeBtn.classList.remove('text-gray-800', 'dark:text-white');
        likeBtn.classList.add('text-red-500', 'liked');
        likeBtn.innerHTML = '<i class="fas fa-heart text-2xl"></i>';
        updateLikeCount(postId, 1);
        
        // Show heart animation
        const heartAnimation = likeBtn.closest('.post-container').querySelector('.heart-animation');
        if (heartAnimation) {
            heartAnimation.classList.remove('hidden');
            heartAnimation.classList.add('active');
            
            setTimeout(() => {
                heartAnimation.classList.remove('active');
                heartAnimation.classList.add('hidden');
            }, 1000);
        }
    }
    
    // Send request to server
    fetch(`/post/${postId}/like`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .catch(error => {
        console.error('Error:', error);
        
        // Revert UI if request fails
        if (isLiked) {
            likeBtn.classList.add('text-red-500');
            likeBtn.classList.remove('text-gray-800', 'dark:text-white');
            likeBtn.innerHTML = '<i class="fas fa-heart text-2xl"></i>';
            updateLikeCount(postId, 1);
        } else {
            likeBtn.classList.add('text-gray-800', 'dark:text-white');
            likeBtn.classList.remove('text-red-500');
            likeBtn.innerHTML = '<i class="far fa-heart text-2xl"></i>';
            updateLikeCount(postId, -1);
        }
    });
}

// Update like count in UI
function updateLikeCount(postId, change) {
    const countElements = document.querySelectorAll(`.like-count-${postId}`);
    countElements.forEach(element => {
        const currentCount = parseInt(element.textContent);
        element.textContent = currentCount + change;
    });
}

// Double tap to like
function handleDoubleTap(postId) {
    const likeBtn = document.getElementById(`like-btn-${postId}`);
    const isLiked = likeBtn.classList.contains('text-red-500');
    
    if (!isLiked) {
        toggleLike(postId);
    }
}

// Toggle save post
function toggleSavePost(postId) {
    const saveBtn = document.getElementById(`save-btn-${postId}`);
    const isSaved = saveBtn.querySelector('i').classList.contains('fas');
    
    // Optimistic UI update
    if (isSaved) {
        saveBtn.innerHTML = '<i class="far fa-bookmark text-2xl text-gray-800 dark:text-white"></i>';
    } else {
        saveBtn.innerHTML = '<i class="fas fa-bookmark text-2xl text-gray-800 dark:text-white"></i>';
    }
    
    // Send request to server
    fetch(`/post/${postId}/save`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            // Revert UI if request fails
            if (isSaved) {
                saveBtn.innerHTML = '<i class="fas fa-bookmark text-2xl text-gray-800 dark:text-white"></i>';
        } else {
                saveBtn.innerHTML = '<i class="far fa-bookmark text-2xl text-gray-800 dark:text-white"></i>';
            }
            showToast(data.error);
        } else {
            showToast(data.saved ? 'Post saved. View in <a href="/saved-posts" class="underline">saved posts</a>.' : 'Post removed from your collection');
            
            // Update the page to show saved posts if on saved posts page
            if (window.location.pathname === '/saved-posts') {
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }
        }
    })
    .catch(error => {
        console.error('Error:', error);
        
        // Revert UI if request fails
        if (isSaved) {
            saveBtn.innerHTML = '<i class="fas fa-bookmark text-2xl text-gray-800 dark:text-white"></i>';
        } else {
            saveBtn.innerHTML = '<i class="far fa-bookmark text-2xl text-gray-800 dark:text-white"></i>';
        }
    });
}

// Open post options modal
function showPostOptions(postId) {
    currentPostId = postId;
    document.getElementById('postOptionsModal').classList.remove('hidden');
}

// Close post options modal
function closePostOptionsModal() {
    document.getElementById('postOptionsModal').classList.add('hidden');
}

// Copy post link
function copyPostLink() {
    const url = `${window.location.origin}/post/${currentPostId}`;
    navigator.clipboard.writeText(url).then(() => {
        showToast('Link copied to clipboard');
        closePostOptionsModal();
    });
}

// Report post
function reportPost() {
    // Implementation for reporting post
    showToast('Post reported');
    closePostOptionsModal();
}

// Unfollow user
function unfollowUser() {
    // Implementation for unfollowing user
    showToast('User unfollowed');
    closePostOptionsModal();
}

// Share post
function sharePost(postId) {
    currentPostId = postId;
    document.getElementById('shareModal').classList.remove('hidden');
    document.getElementById('shareUsername').value = '';
    document.getElementById('shareMessage').value = '';
}

// Close share modal
function closeShareModal() {
    document.getElementById('shareModal').classList.add('hidden');
}

// Confirm share post
function confirmShare() {
    const username = document.getElementById('shareUsername').value.trim();
    const message = document.getElementById('shareMessage').value.trim();
    
    if (!username) {
        showToast('Please select a user to share with');
        return;
    }
    
    fetch(`/post/${currentPostId}/share`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ username, message })
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            showToast(data.error);
        } else {
            showToast('Post shared successfully!');
            closeShareModal();
        }
    })
    .catch(error => {
        console.error('Error sharing post:', error);
        showToast('Failed to share post. Please try again.');
    });
}

// Toast notification
function showToast(message) {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    
    toastMessage.textContent = message;
    toast.classList.remove('translate-y-full', 'opacity-0');
    toast.classList.add('translate-y-0', 'opacity-100');
    
    // Hide after 3 seconds
    setTimeout(() => {
        toast.classList.remove('translate-y-0', 'opacity-100');
        toast.classList.add('translate-y-full', 'opacity-0');
    }, 3000);
}

// Load stories
function loadStories() {
    fetch('/stories')
        .then(response => response.json())
        .then(data => {
            const storiesList = document.getElementById('storiesList');
            
            if (data.stories && data.stories.length > 0) {
                data.stories.forEach(story => {
                    const storyItem = document.createElement('div');
                    storyItem.className = 'flex-shrink-0 text-center';
                    storyItem.innerHTML = `
                        <div class="cursor-pointer" onclick="openStory('${story._id}')">
                            <div class="${story.viewed ? 'story-ring-viewed' : 'story-ring'} rounded-full p-[2px]">
                                <div class="bg-white dark:bg-black p-[1px] rounded-full">
                                    <img src="${story.user.profileImage}" 
                                         alt="${story.user.name}" 
                                         class="w-16 h-16 rounded-full object-cover">
                                </div>
                            </div>
                            <p class="text-xs mt-1 text-gray-600 dark:text-gray-400 truncate max-w-[62px] mx-auto">${story.user.username}</p>
                        </div>
                    `;
                    
                    storiesList.appendChild(storyItem);
                });
            } else {
                // Handle empty state
            }
        })
        .catch(error => console.error('Error loading stories:', error));
}

// Socket connection for real-time updates
function initializeSocketConnection() {
    const socket = io();
    
    socket.on('connect', () => {
        console.log('Connected to socket.io server');
    });
    
    socket.on('newPost', data => {
        // Add new post to the feed
        console.log('New post received:', data);
        // Implement if needed
    });
    
    socket.on('newLike', data => {
        // Update like count for a post
        console.log('New like received:', data);
        updateLikeCount(data.postId, 1);
    });
    
    socket.on('newComment', data => {
        // Add new comment to a post
        console.log('New comment received:', data);
        // Implement if needed
    });
}

// Load more posts for infinite scrolling
function loadMorePosts() {
    const loadingSpinner = document.querySelector('.loading-spinner');
    loadingSpinner.classList.remove('hidden');
    
    fetch(`/api/posts?page=${page + 1}`)
        .then(response => response.json())
        .then(data => {
            if (data.posts && data.posts.length > 0) {
                page++;
                // Append new posts to the feed
                // Implementation depends on how your server returns data
            }
            
            isLoading = false;
            loadingSpinner.classList.add('hidden');
        })
        .catch(error => {
            console.error('Error loading more posts:', error);
            isLoading = false;
            loadingSpinner.classList.add('hidden');
        });
}

// Create Post Modal Functions
function openCreatePostModal() {
    document.getElementById('createPostModal').classList.remove('hidden');
    document.body.style.overflow = 'hidden'; // Prevent scrolling
}

function closeCreatePostModal() {
    document.getElementById('createPostModal').classList.add('hidden');
    document.body.style.overflow = ''; // Re-enable scrolling
    
    // Reset form
    const form = document.getElementById('createPostForm');
    if (form) form.reset();
    
    // Clear image previews
    const previewContainer = document.getElementById('imagePreviewContainer');
    if (previewContainer) {
        previewContainer.innerHTML = '';
        previewContainer.classList.add('hidden');
    }
    
    // Reset processed images
    processedImages = [];
}

// Variables for post creation
let processedImages = [];

// Handle image selection
function handleImageSelect(event) {
    const files = Array.from(event.target.files);
    
    // Check if maximum number of images is reached
    if (processedImages.filter(Boolean).length >= 10) {
        showToast('You can upload a maximum of 10 images per post');
        return;
    }
    
    // Get preview container
    const previewContainer = document.getElementById('imagePreviewContainer');
    
    // Process each file
    files.forEach(file => {
        if (!file.type.startsWith('image/')) return;
        
        const reader = new FileReader();
        reader.onload = function(e) {
            // Create temporary image for cropping
            const img = document.createElement('img');
            img.src = e.target.result;
            img.onload = function() {
                // Show preview
                const index = processedImages.length;
                processedImages.push(null); // Reserve spot
                
                const previewDiv = document.createElement('div');
                previewDiv.className = 'relative aspect-square overflow-hidden rounded-lg shadow-md';
                previewDiv.innerHTML = `
                    <img src="${e.target.result}" class="w-full h-full object-cover" />
                    <button type="button" class="absolute top-2 right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600" onclick="removeImage(${index})">
                        <i class="fas fa-times text-xs"></i>
                    </button>
                `;
                
                previewContainer.appendChild(previewDiv);
                previewContainer.classList.remove('hidden');
                
                // Process the image (convert to blob)
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                
                // Max size
                const MAX_WIDTH = 1200;
                const MAX_HEIGHT = 1200;
                
                let width = img.width;
                let height = img.height;
                
                // Resize if needed
                if (width > MAX_WIDTH || height > MAX_HEIGHT) {
                    if (width > height) {
                        height *= MAX_WIDTH / width;
                        width = MAX_WIDTH;
                    } else {
                        width *= MAX_HEIGHT / height;
                        height = MAX_HEIGHT;
                    }
                }
                
                canvas.width = width;
                canvas.height = height;
                
                // Draw and get as blob
                ctx.drawImage(img, 0, 0, width, height);
                canvas.toBlob(blob => {
                    processedImages[index] = blob;
                }, file.type, 0.85); // 85% quality
            };
        };
        reader.readAsDataURL(file);
    });
}

// Remove image from preview
function removeImage(index) {
    if (index >= 0 && index < processedImages.length) {
        processedImages[index] = null;
        
        // Remove preview
        const previewContainer = document.getElementById('imagePreviewContainer');
        const previews = previewContainer.querySelectorAll('div');
        if (previews[index]) {
            previews[index].remove();
        }
        
        // Hide container if empty
        if (previewContainer.children.length === 0) {
            previewContainer.classList.add('hidden');
        }
    }
}

// Handle post submission
async function handlePostSubmit(e) {
    e.preventDefault();
    
    // Get form data
    const form = e.target;
    const formData = new FormData(form);
    
    // Check if there are valid images
    const validImages = processedImages.filter(img => img !== null);
    
    if (validImages.length === 0) {
        showToast('Please add at least one image to your post');
        return;
    }
    
    // Update submit button state
    const submitBtn = document.getElementById('submitPostBtn');
    const originalText = submitBtn.innerHTML;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Uploading...';
    submitBtn.disabled = true;
    
    // Append processed images to form data
    validImages.forEach((blob, index) => {
        formData.append('processedImages', blob, `image-${index}.jpg`);
    });

    try {
        const response = await fetch('/post', {
            method: 'POST',
            body: formData
        });
        
        if (response.ok) {
            // Parse the JSON response but don't display it directly
            const data = await response.json();
            showToast(data.message || 'Post created successfully!');
            closeCreatePostModal();
            
            // Reload the page after a short delay to let user see the toast
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            const error = await response.text();
            showToast('Error creating post: ' + error);
        }
    } catch (error) {
        showToast('Network error. Please try again.');
    } finally {
        // Reset button state
        submitBtn.innerHTML = originalText;
        submitBtn.disabled = false;
    }
}
</script>

<%- include('partials/footer') %>