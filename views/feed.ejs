<%- include('partials/header') %>

<!-- Stories Section -->
<div class="max-w-4xl mx-auto mt-8 px-4">
    <!-- Stories Section -->
    <div class="bg-white rounded-lg shadow-md p-4 mb-8 overflow-x-auto">
        <div class="flex space-x-4">
            <!-- Add Story Button -->
            <div class="flex-shrink-0 text-center">
                <label class="cursor-pointer block">
                    <div class="w-16 h-16 rounded-full bg-gray-100 flex items-center justify-center border-2 border-dashed border-blue-500 hover:bg-gray-200 transition-colors">
                        <i class="fas fa-plus text-blue-500"></i>
                    </div>
                    <input type="file" 
                           id="storyInput" 
                           class="hidden" 
                           accept="image/*,video/*" 
                           onchange="uploadStory(event)">
                    <p class="text-xs mt-1 text-gray-600">Add Story</p>
                </label>
            </div>

            <!-- Stories List -->
            <div id="storiesList" class="flex space-x-4">
                <!-- Stories will be loaded dynamically -->
            </div>
        </div>
    </div>

    <!-- Create Post Card -->
    <div class="bg-white rounded-lg shadow-md p-4 mb-8">
        <div class="flex items-center space-x-4">
            <img src="<%= user.profileImage %>" 
                 alt="Profile" 
                 class="w-10 h-10 rounded-full object-cover">
            <button onclick="openCreatePostModal()" 
                    class="flex-1 px-4 py-2 bg-gray-100 rounded-full text-left text-gray-500 hover:bg-gray-200 transition-colors">
                What's on your mind, <%= user.name.split(' ')[0] %>?
            </button>
        </div>
        <div class="flex justify-around mt-4 pt-4 border-t">
            <button onclick="openCreatePostModal()" 
                    class="flex items-center space-x-2 text-gray-600 hover:text-gray-800">
                <i class="fas fa-image text-green-500"></i>
                <span>Photo/Video</span>
            </button>
            <button onclick="openCreatePostModal()" 
                    class="flex items-center space-x-2 text-gray-600 hover:text-gray-800">
                <i class="fas fa-smile text-yellow-500"></i>
                <span>Feeling/Activity</span>
            </button>
            <button onclick="openCreatePostModal()" 
                    class="flex items-center space-x-2 text-gray-600 hover:text-gray-800">
                <i class="fas fa-map-marker-alt text-red-500"></i>
                <span>Location</span>
            </button>
        </div>
    </div>

    <!-- Posts Feed -->
    <div class="space-y-8">
        <% posts.forEach(post => { %>
            <div class="bg-white rounded-lg shadow-md overflow-hidden transform hover:shadow-lg transition-shadow duration-200">
                <!-- Post Header -->
                <div class="p-4 flex items-center justify-between">
                    <a href="/user/<%= post.user.username %>" class="flex items-center group">
                        <div class="relative">
                            <img src="<%= post.user.profileImage %>" 
                                 alt="Profile" 
                                 class="w-10 h-10 rounded-full object-cover group-hover:opacity-90">
                            <div class="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white"></div>
                        </div>
                        <div class="ml-3">
                            <h5 class="font-semibold text-gray-800 group-hover:text-blue-600"><%= post.user.name %></h5>
                            <p class="text-xs text-gray-500">@<%= post.user.username %></p>
                        </div>
                    </a>
                    <button class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>
                </div>

                <!-- Images -->
                <% if (post.images && post.images.length > 0) { %>
                    <div class="relative">
                        <div class="swiper-container">
                            <div class="swiper-wrapper">
                                <% post.images.forEach(image => { %>
                                    <div class="swiper-slide">
                                        <img src="<%= image.url %>" 
                                             alt="Post image"
                                             class="w-full h-[32rem] object-cover">
                                    </div>
                                <% }) %>
                            </div>
                            <% if (post.images.length > 1) { %>
                                <div class="swiper-pagination"></div>
                                <div class="swiper-button-next"></div>
                                <div class="swiper-button-prev"></div>
                            <% } %>
                        </div>
                    </div>
                <% } %>

                <!-- Post Content -->
                <div class="p-4">
                    <!-- Actions -->
                    <div class="flex items-center justify-between mb-4">
                        <div class="flex items-center space-x-4">
                            <button onclick="toggleLike('<%= post._id %>')" 
                                    class="like-btn <%= post.likes.includes(user._id) ? 'text-red-500' : 'text-gray-500' %> hover:scale-110 transform transition-transform">
                                <i class="fas fa-heart text-2xl"></i>
                                <span class="like-count ml-1 text-sm"><%= post.likes.length %></span>
                            </button>
                            <button onclick="focusComment('<%= post._id %>')" 
                                    class="text-gray-500 hover:text-gray-700 hover:scale-110 transform transition-transform">
                                <i class="fas fa-comment text-2xl"></i>
                                <span class="ml-1 text-sm"><%= post.comments.length %></span>
                            </button>
                            <button class="text-gray-500 hover:text-gray-700 hover:scale-110 transform transition-transform">
                                <i class="fas fa-share text-2xl"></i>
                            </button>
                        </div>
                        <button class="text-gray-500 hover:text-gray-700 hover:scale-110 transform transition-transform">
                            <i class="fas fa-bookmark text-2xl"></i>
                        </button>
                    </div>

                    <h3 class="font-semibold text-lg mb-2"><%= post.title %></h3>
                    <p class="text-gray-700 mb-2"><%= post.content %></p>
                    
                    <!-- Post Metadata -->
                    <div class="text-xs text-gray-500 mb-4">
                        <span><%= new Date(post.createdAt).toLocaleDateString('en-US', { month: 'long', day: 'numeric' }) %></span>
                        • <span><%= post.likes.length %> likes</span>
                        • <span><%= post.comments.length %> comments</span>
                    </div>

                    <!-- Comments Section -->
                    <%- include('partials/comments', { post, user }) %>
                </div>
            </div>
        <% }) %>
    </div>

    <!-- Loading Spinner -->
    <div class="flex justify-center my-8">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
    </div>
</div>

<!-- Story Viewer Modal -->
<div id="storyModal" class="hidden fixed inset-0 bg-black z-50">
    <div class="relative h-full flex justify-center">
        <!-- Mobile-like container with fixed aspect ratio -->
        <div class="h-full aspect-[9/16] bg-black relative max-w-[500px] w-full">
            <!-- Touch areas for navigation -->
            <div class="absolute inset-0 z-10 flex">
                <div class="w-1/2 h-full" onclick="showPreviousStory()"></div>
                <div class="w-1/2 h-full" onclick="showNextStory()"></div>
            </div>
            
            <button onclick="closeStoryModal()" class="absolute top-4 right-4 text-white text-2xl z-20">
                <i class="fas fa-times"></i>
            </button>
            
            <div class="h-full flex items-center justify-center bg-black">
                <div id="storyImage" class="w-full h-full relative">
                    <!-- Media will be inserted here -->
                </div>
            </div>

            <!-- Story Progress Bar -->
            <div class="absolute top-0 left-0 right-0 h-1 bg-gray-700 z-20">
                <div id="storyProgress" class="h-full bg-white w-0 transition-all duration-100"></div>
            </div>

            <!-- Story User Info -->
            <div class="absolute top-4 left-4 flex items-center z-20">
                <img id="storyUserImage" src="" alt="Profile" class="w-8 h-8 rounded-full object-cover">
                <div class="ml-2 text-white">
                    <p id="storyUsername" class="font-semibold text-sm"></p>
                    <p id="storyTime" class="text-xs opacity-75"></p>
                </div>
            </div>

            <!-- Story Reply Section -->
            <div class="absolute bottom-4 left-4 right-4 z-20">
                <form onsubmit="replyToStory(event)" class="flex items-center gap-2">
                    <input type="text" 
                           id="storyReplyInput"
                           placeholder="Reply to story..." 
                           class="flex-1 px-4 py-2 rounded-full bg-white/10 text-white placeholder-white/70 backdrop-blur-sm border border-white/20 focus:outline-none focus:ring-2 focus:ring-white/50">
                    <button type="submit" 
                            class="px-4 py-2 rounded-full bg-white/10 text-white backdrop-blur-sm border border-white/20 hover:bg-white/20">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Add Swiper JS for image carousel -->
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>

<style>
/* Custom Scrollbar */
::-webkit-scrollbar {
    width: 8px;
    height: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: #555;
}

/* Swiper Customization */
.swiper-button-next,
.swiper-button-prev {
    color: white !important;
    background: rgba(0, 0, 0, 0.3);
    padding: 20px;
    border-radius: 50%;
    width: 40px !important;
    height: 40px !important;
}

.swiper-pagination-bullet {
    background: white !important;
    opacity: 0.8 !important;
}

.swiper-pagination-bullet-active {
    background: #3B82F6 !important;
}

/* Animations */
@keyframes like-animation {
    0% { transform: scale(1); }
    50% { transform: scale(1.2); }
    100% { transform: scale(1); }
}

.like-btn.liked {
    animation: like-animation 0.3s ease-in-out;
}

/* Add this to your existing styles */
.ring-gradient-to-tr {
    background: linear-gradient(to right, #fbbf24, #d946ef);
}

.story-progress {
    transition: width 30ms linear;
}

/* Story viewer animations */
.story-enter {
    animation: slideIn 0.3s ease-out;
}

.story-exit {
    animation: slideOut 0.3s ease-in;
}

@keyframes slideIn {
    from { transform: translateX(100%); }
    to { transform: translateX(0); }
}

@keyframes slideOut {
    from { transform: translateX(0); }
    to { transform: translateX(-100%); }
}

/* Add these styles */
@keyframes rotate {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.story-ring {
    background: linear-gradient(45deg, #f09433 0%, #e6683c 25%, #dc2743 50%, #cc2366 75%, #bc1888 100%);
}

.story-ring-viewed {
    background: #ccc;
}

/* Add these styles */
.story-container {
    max-height: 100vh;
    height: 100%;
    aspect-ratio: 9/16;
    margin: 0 auto;
    position: relative;
    background: #000;
}

@media (min-width: 500px) {
    .story-container {
        max-width: 500px;
    }
}

.story-media {
    width: 100%;
    height: 100%;
    object-fit: contain;
    background: #000;
}

/* Story viewer overlay gradient */
.story-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 25%;
    background: linear-gradient(to bottom, 
        rgba(0,0,0,0.5) 0%,
        rgba(0,0,0,0) 100%);
    pointer-events: none;
}

/* Story progress bar animation */
.story-progress {
    transition: width 30ms linear;
}

/* Add smooth fade transitions */
.story-fade-enter {
    opacity: 0;
    transform: scale(0.95);
}

.story-fade-enter-active {
    opacity: 1;
    transform: scale(1);
    transition: opacity 300ms, transform 300ms;
}

.story-fade-exit {
    opacity: 1;
    transform: scale(1);
}

.story-fade-exit-active {
    opacity: 0;
    transform: scale(0.95);
    transition: opacity 300ms, transform 300ms;
}
</style>

<script>
const socket = io();

socket.on('connect', () => {
    console.log('Socket connected');
});

socket.on('newStory', (data) => {
    console.log('New story received:', data); // Debug log
    stories.unshift(data.story);
    renderStories();
});

// Listen for new posts
socket.on('newPost', (data) => {
    const postHTML = createPostHTML(data.post);
    const feedContainer = document.querySelector('.space-y-8');
    feedContainer.insertAdjacentHTML('beforeend', postHTML);
    
    // Initialize Swiper for the new post if it has images
    if (data.post.images && data.post.images.length > 0) {
        const newPostContainer = feedContainer.lastElementChild;
        const swiper = new Swiper(newPostContainer.querySelector('.swiper-container'), {
            pagination: {
                el: '.swiper-pagination',
            },
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },
        });
    }
});

function createPostHTML(post) {
    const imagesHTML = post.images && post.images.length > 0 ? `
        <div class="relative">
            <div class="swiper-container">
                <div class="swiper-wrapper">
                    ${post.images.map(image => `
                        <div class="swiper-slide">
                            <img src="${image.url}" 
                                 alt="Post image"
                                 class="w-full object-cover">
                        </div>
                    `).join('')}
                </div>
                ${post.images.length > 1 ? `
                    <div class="swiper-pagination"></div>
                    <div class="swiper-button-next"></div>
                    <div class="swiper-button-prev"></div>
                ` : ''}
            </div>
        </div>
    ` : '';

    return `
        <div class="bg-white rounded-lg shadow-md overflow-hidden">
            <div class="p-4 flex items-center">
                <a href="/user/${post.user.username}" class="flex items-center">
                    <img src="${post.user.profileImage}" 
                         alt="Profile" 
                         class="w-8 h-8 rounded-full object-cover">
                    <div class="ml-3">
                        <h5 class="font-semibold text-gray-800">${post.user.name}</h5>
                        <p class="text-xs text-gray-500">@${post.user.username}</p>
                    </div>
                </a>
            </div>

            ${imagesHTML}

            <div class="p-4">
                <h3 class="font-semibold text-lg mb-2">${post.title}</h3>
                <p class="text-gray-700">${post.content}</p>
                
                <div class="mt-4 flex items-center space-x-4">
                    <button onclick="toggleLike('${post._id}')" 
                            class="like-btn text-gray-500">
                        <i class="fas fa-heart text-xl"></i>
                        <span class="like-count ml-1">0</span>
                    </button>
                    <button onclick="focusComment('${post._id}')" class="text-gray-500">
                        <i class="fas fa-comment text-xl"></i>
                        <span class="ml-1">0</span>
                    </button>
                </div>
            </div>

            <div class="mt-4 border-t pt-4">
                <form class="mb-4 flex gap-2" onsubmit="addComment(event, '${post._id}')">
                    <input type="text" 
                           placeholder="Write a comment..." 
                           class="flex-1 px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                           required>
                    <button type="submit" 
                            class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
                        Comment
                    </button>
                </form>
                <div class="space-y-4 comments-section" data-post-id="${post._id}"></div>
            </div>
        </div>
    `;
}

document.addEventListener('DOMContentLoaded', () => {
    const swipers = document.querySelectorAll('.swiper-container');
    swipers.forEach(container => {
        new Swiper(container, {
            pagination: {
                el: '.swiper-pagination',
            },
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },
        });
    });
});

// Add infinite scroll
let loading = false;
let page = 1;

window.addEventListener('scroll', () => {
    if (loading) return;
    
    if (window.innerHeight + window.scrollY >= document.documentElement.scrollHeight - 100) {
        loadMorePosts();
    }
});

async function loadMorePosts() {
    loading = true;
    page++;
    
    try {
        const response = await fetch(`/feed?page=${page}`);
        const data = await response.json();
        
        if (data.posts.length > 0) {
            // Append new posts
            const feedContainer = document.querySelector('.space-y-8');
            data.posts.forEach(post => {
                feedContainer.insertAdjacentHTML('beforeend', createPostHTML(post));
            });
            
            // Initialize Swiper for new posts
            initializeSwipers();
        }
    } catch (error) {
        console.error('Error loading more posts:', error);
    } finally {
        loading = false;
    }
}

// Add smooth animations for likes
function toggleLike(postId) {
    const likeButton = document.querySelector(`.like-btn[data-post-id="${postId}"]`);
    const isLiked = likeButton.classList.contains('text-red-500');

    const url = isLiked ? `/post/${postId}/unlike` : `/post/${postId}/like`;

    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (response.ok) {
            // Update the like count and button state
            const likeCount = likeButton.querySelector('.like-count');
            likeCount.textContent = data.likes;
            likeButton.classList.toggle('text-red-500');
        } else {
            alert(data.error);
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

// Add these variables at the top of your script
let currentStory = null;
let storyInterval;
let isPaused = false;

// Update the viewStory function
function viewStory(index) {
    isPaused = false;
    currentStoryIndex = index;
    currentStory = stories[index];
    const modal = document.getElementById('storyModal');
    const mediaContainer = document.getElementById('storyImage');
    const userImage = document.getElementById('storyUserImage');
    const username = document.getElementById('storyUsername');
    const timeElement = document.getElementById('storyTime');

    // Clear previous media
    mediaContainer.innerHTML = '';

    // Create appropriate media element
    const mediaElement = currentStory.media.type === 'video' 
        ? document.createElement('video')
        : document.createElement('img');

    mediaElement.src = currentStory.media.url;
    mediaElement.className = 'w-full h-full object-contain';
    
    if (mediaElement.tagName === 'VIDEO') {
        mediaElement.controls = false; // Hide default controls
        mediaElement.autoplay = true;
        mediaElement.muted = false;
        mediaElement.loop = false;
        mediaElement.playsInline = true;
    }

    mediaContainer.appendChild(mediaElement);
    userImage.src = currentStory.user.profileImage || '/images/default-profile.png';
    username.textContent = currentStory.user.username;
    timeElement.textContent = getTimeAgo(new Date(currentStory.createdAt));

    modal.classList.remove('hidden');
    startStoryProgress();
    markStoryAsViewed(currentStory._id);
}

// Add story reply function
async function replyToStory(event) {
    event.preventDefault();
    
    const replyInput = document.getElementById('storyReplyInput');
    const replyText = replyInput.value.trim();
    
    if (!replyText || !currentStory) return;

    try {
        const response = await fetch(`/story/${currentStory._id}/reply`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ content: replyText })
        });

        if (response.ok) {
            // Clear input
            replyInput.value = '';
            
            // Show success message
            const successMsg = document.createElement('div');
            successMsg.className = 'absolute bottom-20 left-1/2 transform -translate-x-1/2 bg-white/80 text-black px-4 py-2 rounded-full backdrop-blur-sm';
            successMsg.textContent = 'Reply sent!';
            document.getElementById('storyModal').appendChild(successMsg);
            setTimeout(() => successMsg.remove(), 2000);
        }
    } catch (error) {
        console.error('Error sending reply:', error);
        alert('Failed to send reply. Please try again.');
    }
}

// Add at the top of your script section
let stories = [];
let currentStoryIndex = 0;

// Function to load stories
async function loadStories() {
    try {
        const response = await fetch('/stories');
        stories = await response.json();
        console.log('Loaded stories:', stories); // Debug log
        renderStories();
    } catch (error) {
        console.error('Error loading stories:', error);
    }
}

// Function to render stories
function renderStories() {
    const storiesList = document.getElementById('storiesList');
    storiesList.innerHTML = '';

    stories.forEach((story, index) => {
        const hasViewed = story.viewers.some(viewer => viewer.user === '<%= user._id %>');
        const storyHTML = `
            <div class="flex-shrink-0 text-center">
                <div onclick="viewStory(${index})" 
                     class="relative w-16 h-16 cursor-pointer hover:scale-105 transition-transform">
                    <div class="absolute inset-0 rounded-full ${hasViewed ? 'bg-gray-300' : 'bg-gradient-to-tr from-yellow-400 to-fuchsia-600'} p-[2px]">
                        <div class="w-full h-full rounded-full bg-white p-[2px]">
                            <img src="${story.user.profileImage || '/images/default-profile.png'}" 
                                 alt="${story.user.username}'s story" 
                                 class="w-full h-full rounded-full object-cover">
                        </div>
                    </div>
                </div>
                <p class="text-xs mt-1 text-gray-600">${story.user.username}</p>
            </div>
        `;
        storiesList.insertAdjacentHTML('beforeend', storyHTML);
    });
}

// Function to upload story
async function uploadStory(event) {
    const file = event.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('story', file);

    try {
        const response = await fetch('/story', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (response.ok) {
            // Immediately add the new story to the list
            stories.unshift(data.story);
            renderStories();
            
            // Show success message
            const successMsg = document.createElement('div');
            successMsg.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50';
            successMsg.textContent = 'Story uploaded successfully!';
            document.body.appendChild(successMsg);
            setTimeout(() => successMsg.remove(), 3000);
        } else {
            throw new Error(data.error || 'Failed to upload story');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error uploading story: ' + error.message);
    }
}

// Listen for new stories
socket.on('newStory', (data) => {
    stories.unshift(data.story);
    renderStories();
});

// Function to mark story as viewed
async function markStoryAsViewed(storyId) {
    try {
        await fetch(`/story/${storyId}/view`, {
            method: 'POST'
        });
    } catch (error) {
        console.error('Error marking story as viewed:', error);
    }
}

// Function to get time ago
function getTimeAgo(date) {
    const seconds = Math.floor((new Date() - date) / 1000);
    if (seconds < 60) return 'just now';
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes}m ago`;
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours}h ago`;
    return 'yesterday';
}

// Load stories when page loads
loadStories();

// Update stories every minute to refresh timestamps
setInterval(loadStories, 60000);

function startStoryProgress() {
    const progressBar = document.getElementById('storyProgress');
    progressBar.style.width = '0%';
    
    let width = 0;
    clearInterval(storyInterval); // Clear any existing interval
    
    storyInterval = setInterval(() => {
        if (!isPaused) {
            width += 1;
            progressBar.style.width = width + '%';
            
            if (width >= 100) {
                clearInterval(storyInterval);
                showNextStory();
            }
        }
    }, 30); // 3 seconds total duration
}

function showNextStory() {
    if (currentStoryIndex < stories.length - 1) {
        viewStory(currentStoryIndex + 1);
    } else {
        closeStoryModal();
    }
}

function closeStoryModal() {
    document.getElementById('storyModal').classList.add('hidden');
    clearInterval(storyInterval);
    isPaused = false;
    const video = document.querySelector('#storyImage video');
    if (video) {
        video.pause();
    }
}

// Add touch/swipe support for stories
let touchStartX = 0;
document.getElementById('storyModal').addEventListener('touchstart', (e) => {
    touchStartX = e.touches[0].clientX;
    pauseStory();
});

document.getElementById('storyModal').addEventListener('touchend', (e) => {
    const touchEndX = e.changedTouches[0].clientX;
    const diff = touchStartX - touchEndX;

    if (Math.abs(diff) > 50) { // Minimum swipe distance
        if (diff > 0 && currentStoryIndex < stories.length - 1) {
            // Swipe left - next story
            viewStory(currentStoryIndex + 1);
        } else if (diff < 0 && currentStoryIndex > 0) {
            // Swipe right - previous story
            viewStory(currentStoryIndex - 1);
        }
    }
    resumeStory();
});

// Add mouse event listeners for desktop
document.getElementById('storyModal').addEventListener('mousedown', pauseStory);
document.getElementById('storyModal').addEventListener('mouseup', resumeStory);
document.getElementById('storyModal').addEventListener('mouseleave', resumeStory);

// Add keyboard controls
document.addEventListener('keydown', (e) => {
    if (!document.getElementById('storyModal').classList.contains('hidden')) {
        switch(e.key) {
            case 'ArrowLeft':
                showPreviousStory();
                break;
            case 'ArrowRight':
                showNextStory();
                break;
            case 'Escape':
                closeStoryModal();
                break;
            case ' ': // Spacebar
                e.preventDefault();
                if (isPaused) {
                    resumeStory();
                } else {
                    pauseStory();
                }
                break;
        }
    }
});

// Add previous story function
function showPreviousStory() {
    if (currentStoryIndex > 0) {
        viewStory(currentStoryIndex - 1);
    }
}

// Add pause and resume functions
function pauseStory() {
    isPaused = true;
    const mediaElement = document.querySelector('#storyImage video, #storyImage img');
    if (mediaElement && mediaElement.tagName === 'VIDEO') {
        mediaElement.pause();
    }
}

function resumeStory() {
    isPaused = false;
    const mediaElement = document.querySelector('#storyImage video, #storyImage img');
    if (mediaElement && mediaElement.tagName === 'VIDEO') {
        mediaElement.play();
    }
}
</script>

</body>
</html>