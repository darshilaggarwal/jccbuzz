<%- include('partials/header2') %>

<!-- Modern Toast Notification -->
<div id="toast" class="fixed bottom-5 left-1/2 transform -translate-x-1/2 translate-y-full transition-all duration-300 z-50 opacity-0">
    <div class="bg-black bg-opacity-75 text-white px-6 py-3 rounded-full shadow-lg backdrop-blur-sm">
        <span id="toast-message" class="font-medium text-sm"></span>
    </div>
</div>

<!-- Comments Modal -->
<div id="commentsModal" class="hidden fixed inset-0 bg-opacity-50 z-50 flex items-end sm:items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-t-xl sm:rounded-xl max-w-md w-full mx-auto overflow-hidden animate-slideUp">
        <div class="p-3 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
            <div></div>
            <h3 class="text-base font-semibold text-gray-800 dark:text-white">Comments</h3>
            <button onclick="closeCommentsModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
                </div>
        
        <div id="modalCommentsContainer" class="p-4 max-h-[70vh] overflow-y-auto">
            <!-- Comments will be loaded here -->
            </div>
        
        <div class="p-3 border-t border-gray-200 dark:border-gray-700">
            <form class="flex items-center" id="modalCommentForm">
                <img id="modalUserImage" src="<%= user.profileImage %>" 
                     alt="Your profile" 
                     class="w-8 h-8 rounded-full object-cover mr-2">
                <div class="relative flex-1">
                    <input type="text" 
                           id="modalCommentInput" 
                           placeholder="Add a comment..." 
                           class="w-full py-2 px-3 border border-gray-300 dark:border-gray-700 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-white text-sm"
                           required>
                    <button type="submit" class="absolute right-2 top-1/2 transform -translate-y-1/2 text-blue-500 hover:text-blue-600">
                        <i class="fas fa-paper-plane"></i>
            </button>
                </div>
        </form>
        </div>
    </div>
</div>

<!-- Top Navigation Bar with Story Bubbles -->
<div class="bg-white dark:bg-black border-b border-gray-200 dark:border-gray-800 pb-2">
    <div class="max-w-xl mx-auto px-2">
        

        <!-- Stories List -->
        <div class="flex space-x-4 overflow-x-auto py-4 scrollbar-hide">
            <!-- Add Story Button -->
            <div class="flex-shrink-0 text-center">
                <label class="cursor-pointer block">
                    <div class="w-16 h-16 rounded-full bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-800 flex items-center justify-center border-2 border-white dark:border-black">
                        <div class="w-14 h-14 rounded-full bg-white dark:bg-black flex items-center justify-center">
                        <i class="fas fa-plus text-blue-500"></i>
                        </div>
                    </div>
                    <input type="file" 
                           id="storyInput" 
                           class="hidden" 
                           accept="image/*,video/*" 
                           onchange="handleStoryUpload(event)">
                    <p class="text-xs mt-1 text-gray-600 dark:text-gray-400 font-medium">Your story</p>
                </label>
            </div>

            <!-- Stories List -->
            <div id="storiesList" class="flex space-x-4">
                <!-- Stories will be loaded dynamically -->
            </div>
        </div>
        </div>
    </div>

<!-- Main Content -->
<div class="max-w-xl mx-auto mt-2 px-0 sm:px-2">
    <!-- Create Post Button (Mobile) -->
    <div class="fixed bottom-6 right-6 z-40 md:hidden">
        <button onclick="openCreatePostModal()" 
                class="w-14 h-14 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-full shadow-lg flex items-center justify-center">
            <i class="fas fa-plus text-xl"></i>
        </button>
    </div>

    <!-- Create Post Button (Desktop) -->
    <!-- <div class="fixed top-24 right-6 z-40 hidden md:block">
        <button onclick="openCreatePostModal()" 
                class="bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg px-4 py-2 shadow-md hover:shadow-lg transition-all flex items-center">
            <i class="fas fa-plus mr-2"></i> Create Post
        </button>
    </div> -->
    
    <% if (isNewUser && suggestedUsers && suggestedUsers.length > 0) { %>
        <!-- New User Experience - Welcome and Suggested Users -->
        <div class="bg-white dark:bg-black border border-gray-200 dark:border-gray-800 sm:rounded-lg overflow-hidden mb-4">
            <div class="p-6 text-center">
                <div class="mb-4">
                    <i class="fas fa-users text-5xl text-blue-500 mb-3"></i>
                    <h2 class="text-xl font-bold text-gray-800 dark:text-white">Welcome to JCCbuzz!</h2>
                    <p class="text-gray-600 dark:text-gray-400 mt-2">
                        Follow some users to start seeing their posts in your feed.
                    </p>
                </div>
            </div>
        </div>

        <!-- Suggested Users -->
        <div class="bg-white dark:bg-black border border-gray-200 dark:border-gray-800 sm:rounded-lg overflow-hidden">
            <div class="p-4 border-b border-gray-200 dark:border-gray-800">
                <h3 class="font-semibold text-gray-800 dark:text-white">Suggested for you</h3>
            </div>
            <div class="divide-y divide-gray-200 dark:divide-gray-800">
                <% suggestedUsers.forEach(suggestedUser => { %>
                    <div class="p-4 flex items-center justify-between">
                        <a href="/user/<%= suggestedUser.username %>" class="flex items-center group">
                            <img src="<%= suggestedUser.profileImage %>" 
                                 alt="<%= suggestedUser.name %>" 
                                 class="w-10 h-10 rounded-full object-cover">
                            <div class="ml-3">
                                <h4 class="font-semibold text-sm text-gray-800 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400">
                                    <%= suggestedUser.name %>
                                </h4>
                                <p class="text-xs text-gray-500 dark:text-gray-400">@<%= suggestedUser.username %></p>
                            </div>
                        </a>
                        <button onclick="followUser('<%= suggestedUser._id %>')" 
                                class="text-sm font-semibold text-blue-500 hover:text-blue-700 follow-btn"
                                data-user-id="<%= suggestedUser._id %>">
                            Follow
                        </button>
                    </div>
                <% }) %>
            </div>
            <div class="p-4 text-center">
                <a href="/explore" class="text-blue-500 hover:text-blue-700 text-sm font-semibold">
                    See More
                </a>
            </div>
        </div>
    <% } else { %>
        <!-- Posts Feed -->
        <div class="max-w-md mx-auto space-y-4">
            <% posts.forEach(post => { 
                // Additional safety check to filter out posts with null users at template level
                if (!post || !post.user) {
                    return; // Skip this post entirely
                }
            %>
                <div class="bg-white dark:bg-black border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden post-container relative mb-3" data-post-id="<%= post._id %>" data-user-id="<%= post.user._id %>">
                    <!-- Gradient accent line with improved visual effects -->
                    <div class="absolute top-0 left-0 w-full h-0.5 bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-600"></div>
                    
                    <!-- Post Header with improved spacing -->
                    <div class="px-2 py-1.5 flex items-center justify-between">
                        <a href="/user/<%= post.user.username %>" class="flex items-center group">
                            <div class="relative">
                                <div class="<%= post.user.hasActiveStory ? 'story-ring rounded-full p-[1px]' : '' %>">
                                    <div class="bg-white dark:bg-black p-[1px] rounded-full">
                                <img src="<%= post.user.profileImage %>" 
                                     alt="Profile" 
                                     class="w-8 h-8 rounded-full object-cover">
                            </div>
                                </div>
                            </div>
                            <div class="ml-2">
                                <h5 class="font-semibold text-sm text-gray-800 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400"><%= post.user.name %></h5>
                                <p class="text-xs text-gray-500 dark:text-gray-400"><%= post.user.location ? post.user.location : '' %></p>
                            </div>
                        </a>
                        <button onclick="showPostOptions('<%= post._id %>')" class="text-gray-600 dark:text-gray-400 p-1 hover:text-gray-800 dark:hover:text-gray-200 transition">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                    </div>

                    <!-- Images -->
                    <% if (post.images && post.images.length > 0) { %>
                        <div class="relative post-image" ondblclick="handleDoubleTap('<%= post._id %>')">
                            <div class="swiper-container aspect-square">
                                <div class="swiper-wrapper">
                                    <% post.images.forEach(image => { %>
                                        <div class="swiper-slide">
                                            <img src="<%= image.url %>" 
                                                 alt="Post image" 
                                                 class="w-full h-full object-cover">
                                        </div>
                                    <% }) %>
                                </div>
                                <% if (post.images.length > 1) { %>
                                    <div class="swiper-pagination"></div>
                                    <div class="swiper-button-next"></div>
                                    <div class="swiper-button-prev"></div>
                                    <div class="absolute bottom-2 right-2 bg-black/50 text-white text-xs px-2 py-1 rounded-full z-10">
                                        <span class="current-slide">1</span>/<%= post.images.length %>
                                    </div>
                                <% } %>
                            </div>
                            <div class="heart-animation hidden">
                                <i class="fas fa-heart text-red-500"></i>
                            </div>
                        </div>
                    <% } %>

                    <!-- Post Content -->
                    <div class="px-3 pb-3">
                        <!-- Actions with no borders -->
                        <div class="flex items-center justify-between py-1 my-1 relative">
                            
                            <div class="flex items-center space-x-3">
                                <button onclick="toggleLike('<%= post._id %>')" 
                                        id="like-btn-<%= post._id %>"
                                        class="post-action-btn like-btn <%= post.likes.some(id => id.toString() === user._id.toString()) ? 'text-red-500' : 'text-gray-800 dark:text-white' %>">
                                    <% if (post.likes.some(id => id.toString() === user._id.toString())) { %>
                                    <i class="fas fa-heart text-xl"></i>
                                    <% } else { %>
                                        <i class="far fa-heart text-xl"></i>
                                    <% } %>
                                </button>
                                <button onclick="showComments('<%= post._id %>')" 
                                        class="post-action-btn text-gray-800 dark:text-white">
                                    <i class="far fa-comment text-xl"></i>
                                </button>
                                <button onclick="sharePost('<%= post._id %>')" 
                                        class="post-action-btn text-gray-800 dark:text-white">
                                    <i class="far fa-paper-plane text-xl"></i>
                                </button>
                            </div>
                            <button onclick="toggleSavePost('<%= post._id %>')"
                                    id="save-btn-<%= post._id %>"
                                    class="post-action-btn save-btn">
                                <% if (user.savedPosts && user.savedPosts.includes(post._id)) { %>
                                    <i class="fas fa-bookmark text-xl text-gray-800 dark:text-white"></i>
                                <% } else { %>
                                    <i class="far fa-bookmark text-xl text-gray-800 dark:text-white"></i>
                                <% } %>
                            </button>
                        </div>

                        <!-- Likes Count -->
                        <div class="mb-1.5">
                            <p class="font-semibold text-sm text-gray-800 dark:text-white">
                                <span class="like-count-<%= post._id %>"><%= post.likes.length %></span> likes
                            </p>
                        </div>

                        <!-- Caption -->
                        <div class="mb-1">
                            <div class="text-sm text-gray-800 dark:text-white flex flex-wrap items-start">
                                <span class="font-semibold mr-1"><%= post.user.username %></span>
                                <span class="caption-content">
                                    <%= post.content && post.content.length > 100 ? post.content.substring(0, 100) + '...' : post.content %>
                                </span>
                            </div>
                        </div>

                        <!-- Post Metadata -->
                        <div class="text-xs text-gray-500 dark:text-gray-400">
                            <span class="post-time" data-timestamp="<%= post.createdAt %>">
                                <%= post.createdAt ? new Date(post.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) : '' %>
                            </span>
                            <% if (post.comments && post.comments.length > 0) { %>
                                • <button onclick="showComments('<%= post._id %>')" class="text-gray-500 dark:text-gray-400 hover:underline">
                                    View all <%= post.comments.length %> comments
                                </button>
                            <% } %>
                        </div>
                    </div>
                </div>
            <% }) %>
        </div>

        <!-- Loading Spinner -->
        <div class="flex justify-center my-8 loading-spinner">
            <div class="animate-spin rounded-full h-8 w-8 border-2 border-t-blue-500 border-r-indigo-500 border-b-purple-500 border-l-blue-500"></div>
        </div>
    <% } %>
</div>

<!-- Create Post Modal with Instagram-like UI -->
<div id="createPostModal" class="hidden fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-lg w-full mx-4">
        <div class="p-3 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
            <div></div>
            <h2 class="text-base font-semibold text-gray-800 dark:text-white">Create New Post</h2>
            <button onclick="closeCreatePostModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <form id="createPostForm" class="p-4" onsubmit="handlePostSubmit(event)">
            <!-- Image Upload Section -->
            <div class="mb-4">
                <div id="imagePreviewContainer" class="hidden grid grid-cols-2 gap-2 mb-4 max-h-[300px] overflow-y-auto p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <!-- Image previews will be added here -->
                </div>
                
                <div class="flex items-center justify-center w-full">
                    <label class="w-full flex flex-col items-center px-4 py-6 bg-white dark:bg-gray-800 rounded-lg border-2 border-dashed border-gray-300 dark:border-gray-600 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                        <span class="mt-2 text-sm text-gray-500 dark:text-gray-400">Upload photos</span>
                        <span class="mt-1 text-xs text-gray-400 dark:text-gray-500">Images will be cropped to a square (1:1 ratio)</span>
                        <input type="file" id="imageInput" name="processedImages" multiple accept="image/*" class="hidden" onchange="handleImageSelect(event)">
                    </label>
                </div>
            </div>

            <!-- Caption Input -->
            <textarea name="content" 
                     placeholder="Write a caption..."
                     class="w-full p-4 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4 dark:bg-gray-800 dark:border-gray-700 dark:text-white"
                     rows="3"
                     required></textarea>

            <button type="submit" 
                    id="submitPostBtn"
                    class="w-full px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg
                         hover:from-blue-600 hover:to-purple-700 transition duration-200">
                Share
            </button>
        </form>
    </div>
</div>

<!-- Story Viewer Modal -->
<div id="storyModal" class="hidden fixed inset-0 bg-black z-50">
    <div class="relative h-full flex justify-center">
        <!-- Mobile-like container with fixed aspect ratio -->
        <div class="h-full aspect-[9/16] bg-black relative max-w-[500px] w-full">
            <!-- Touch areas for navigation -->
            <div class="absolute inset-0 z-10 flex">
                <div class="w-1/2 h-full" onclick="showPreviousStory()"></div>
                <div class="w-1/2 h-full" onclick="showNextStory()"></div>
            </div>
            
            <!-- Close button -->
            <button onclick="closeStoryModal()" class="absolute top-4 right-4 text-white text-3xl z-30 bg-black/70 p-3 rounded-full hover:bg-red-600 transition-colors focus:outline-none">
                <i class="fas fa-times"></i>
            </button>
            
            <!-- Separate delete button at the top left -->
            <button id="storyDeleteButtonTop" onclick="deleteCurrentStory()" class="absolute top-4 left-36 text-white text-xl z-30 bg-red-500 p-3 rounded-full hover:bg-red-600 transition-colors focus:outline-none hidden">
                <i class="fas fa-trash"></i>
            </button>
            
            <!-- Story container -->
            <div class="h-full flex items-center justify-center bg-black">
                <div id="storyImage" class="w-full h-full relative">
                    <!-- Story content will be loaded here -->
                </div>
            </div>
            
            <!-- Story UI -->
            <div class="absolute top-0 left-0 right-0 z-20 p-4">
                <!-- Story Progress Bars -->
                <div class="w-full flex mb-4">
                    <div id="storyProgressBars" class="flex-1 flex space-x-1">
                        <!-- Progress bars will be added dynamically -->
                    </div>
                </div>
                
                <!-- Story User Info -->
                <div class="absolute top-4 left-4 flex items-center z-20">
                    <div class="story-ring p-[2px] rounded-full">
                        <div class="bg-black p-[1px] rounded-full">
                            <img id="storyUserImage" src="" alt="Profile" class="w-8 h-8 rounded-full object-cover">
                        </div>
                    </div>
                    <div class="ml-2 text-white">
                        <p id="storyUsername" class="font-semibold text-sm"></p>
                        <p id="storyTime" class="text-xs opacity-75"></p>
                    </div>
                    <!-- Delete Story Button (only visible for own stories) -->
                    <div id="storyDeleteButton" class="hidden ml-auto">
                        <button onclick="deleteCurrentStory()" class="bg-red-500 hover:bg-red-600 text-white p-2 rounded-full flex items-center justify-center transition-colors">
                            <i class="fas fa-trash text-sm"></i>
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Story Reply Section -->
            <div class="absolute bottom-4 left-4 right-4 z-20">
                <div class="flex items-center gap-2">
                    <form onsubmit="replyToStory(event)" class="flex-1 flex items-center gap-2">
                        <input 
                            id="storyReplyInput"
                            placeholder="Reply to story..."
                            class="flex-1 bg-white/20 backdrop-blur-sm text-white border-0 rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                        <button 
                            id="storyReplyButton"
                            type="submit" 
                            class="bg-blue-500 hover:bg-blue-600 text-white rounded-full w-10 h-10 flex items-center justify-center transition-colors"
                        >
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </form>
                    <!-- Delete button at the bottom -->
                    <button id="storyDeleteButtonBottom" onclick="deleteCurrentStory()" class="p-3 rounded-full bg-red-500 text-white hidden hover:bg-red-600 transition-colors">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Post Options Modal - Instagram Style -->
<div id="postOptionsModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-end sm:items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-t-xl sm:rounded-xl max-w-md w-full mx-auto overflow-hidden animate-slideUp">
        <div class="divide-y divide-gray-200 dark:divide-gray-700">
            <button onclick="copyPostLink()" class="w-full text-center py-4 text-sm font-medium text-gray-800 dark:text-white hover:bg-gray-50 dark:hover:bg-gray-800 transition">
                Copy link
            </button>
            <button onclick="deletePost()" class="w-full text-center py-4 text-sm font-medium text-red-600 hover:bg-gray-50 dark:hover:bg-gray-800 transition">
                Delete post
            </button>
            <button onclick="unfollowUser()" class="w-full text-center py-4 text-sm font-medium text-red-600 hover:bg-gray-50 dark:hover:bg-gray-800 transition">
                Unfollow
            </button>
            <button onclick="closePostOptionsModal()" class="w-full text-center py-4 text-sm font-medium text-gray-800 dark:text-white hover:bg-gray-50 dark:hover:bg-gray-800 transition">
                Cancel
            </button>
        </div>
    </div>
</div>

<!-- Share Modal - Instagram Style -->
<div id="shareModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-end sm:items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-t-xl sm:rounded-xl max-w-md w-full mx-auto overflow-hidden animate-slideUp">
        <div class="p-4 border-b border-gray-200 dark:border-gray-700 text-center">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Share Post</h3>
        </div>
        
        <div class="p-4">
            <div class="mb-4 relative">
                <div class="flex items-center px-3 py-2 bg-gray-100 dark:bg-gray-800 rounded-lg">
                    <i class="fas fa-search text-gray-400 mr-2"></i>
                <input type="text" 
                       id="shareUsername" 
                           class="w-full bg-transparent border-none focus:outline-none text-gray-800 dark:text-white"
                           placeholder="Search for a user...">
            </div>
                
                <div id="userResults" class="absolute left-0 right-0 mt-1 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg max-h-60 overflow-y-auto hidden z-10">
                    <!-- User results will appear here -->
                </div>
            </div>
            
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Message (optional)</label>
                <textarea id="shareMessage" 
                          class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-700 dark:text-white"
                          rows="3" 
                          placeholder="Add a message..."></textarea>
            </div>
            
            <div class="flex justify-end space-x-3">
                <button onclick="closeShareModal()" 
                        class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
                    Cancel
                </button>
                <button onclick="confirmShare()" 
                        class="px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg hover:from-blue-600 hover:to-purple-700">
                    Share
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Image Cropper Modal -->
<div id="cropperModal" class="hidden fixed inset-0 bg-black bg-opacity-80 z-[100] flex items-center justify-center backdrop-blur-sm">
    <div class="bg-white dark:bg-gray-900 rounded-xl max-w-4xl w-full mx-4 shadow-xl overflow-hidden">
        <div class="px-4 py-3 border-b border-gray-200 dark:border-gray-800 flex justify-between items-center">
            <button id="cropperCancelBtn" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 p-1">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <h2 class="text-sm font-semibold text-gray-800 dark:text-white">Crop Image (3000×3000)</h2>
            <button id="cropperDoneBtn" class="text-blue-500 font-semibold hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 text-sm">
                Done
            </button>
        </div>

        <div class="p-4">
            <div class="cropper-container bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden flex items-center justify-center">
                <img id="cropperImage" class="max-w-full max-h-[60vh]">
            </div>
            
            <div class="mt-4 text-center text-gray-600 dark:text-gray-400 text-sm">
                <p>Drag to position and resize to crop your image to a perfect square</p>
                <p class="mt-1">Your image will be saved as 3000×3000 pixels</p>
            </div>
        </div>
    </div>
</div>

<!-- Add Swiper JS for image carousel -->
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>

<!-- Add Cropper.js for image cropping -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<script src="/js/feed-utils.js"></script>

<style>
/* Hide scrollbar for Chrome, Safari and Opera */
.scrollbar-hide::-webkit-scrollbar {
    display: none;
}

/* Hide scrollbar for IE, Edge and Firefox */
.scrollbar-hide {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
}

/* Swiper Customization */
.swiper-button-next,
.swiper-button-prev {
    color: white !important;
    background: rgba(0, 0, 0, 0.3);
    width: 30px !important;
    height: 30px !important;
    border-radius: 50%;
    --swiper-navigation-size: 18px;
}

.swiper-button-next:after,
.swiper-button-prev:after {
    font-size: 18px;
}

.swiper-pagination-bullet {
    background: white !important;
    opacity: 0.6 !important;
    width: 6px;
    height: 6px;
}

.swiper-pagination-bullet-active {
    opacity: 1 !important;
    background: white !important;
}

/* Cropper.js customization */
.cropper-container {
    max-height: calc(100vh - 200px);
    min-height: 300px;
}

.cropper-view-box,
.cropper-face {
    border-radius: 0;
}

.cropper-view-box {
    box-shadow: 0 0 0 2px #39f;
    outline: 0;
}

.cropper-line,
.cropper-point {
    background-color: #39f;
}

.cropper-point {
    width: 8px;
    height: 8px;
    opacity: 0.9;
}

.cropper-modal {
    opacity: 0.6;
    background-color: #000;
}

/* Animate cropper modal */
#cropperModal {
    opacity: 0;
    transition: opacity 0.3s ease;
}

#cropperModal.hidden {
    display: none;
    pointer-events: none;
}

#cropperModal:not(.hidden) {
    opacity: 1;
    display: flex;
}

/* Animations */
@keyframes like-animation {
    0% { transform: scale(0); opacity: 0; }
    15% { transform: scale(1.5); opacity: 1; }
    30% { transform: scale(0.8); opacity: 1; }
    45% { transform: scale(1.2); opacity: 1; }
    60% { transform: scale(0.9); opacity: 1; }
    75% { transform: scale(1.1); opacity: 1; }
    100% { transform: scale(1); opacity: 0; }
}

.heart-animation {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 100px;
    color: rgba(255, 255, 255, 0.9);
    text-shadow: 0 0 20px rgba(0,0,0,0.4);
    pointer-events: none;
    z-index: 10;
    opacity: 0;
}

.heart-animation.active {
    animation: like-animation 1s ease-in-out forwards;
}

.like-btn {
    transition: transform 0.2s, color 0.2s;
}

.like-btn.liked {
    animation: like-button-animation 0.3s ease-in-out;
}

@keyframes like-button-animation {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1); }
}

.story-ring {
    background: linear-gradient(to right, #3B82F6, #8B5CF6, #D946EF);
    border-radius: 50%;
    padding: 1px;
}

.story-ring-viewed {
    background: #8e8e8e;
    border-radius: 50%;
    padding: 1px;
}

@keyframes storyProgressAnimation {
    from {
        width: 0%;
    }
    to {
        width: 100%;
    }
}

.story-progress-bar {
    animation: storyProgressAnimation 5s linear forwards;
}

@keyframes pulse-ring {
    0% {
        transform: scale(0.85);
        opacity: 0.8;
    }
    50% {
        transform: scale(1);
        opacity: 1;
    }
    100% {
        transform: scale(0.85);
        opacity: 0.8;
    }
}

.pulse-ring {
    animation: pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite;
}

@keyframes slideUp {
    from { transform: translateY(100%); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

.animate-slideUp {
    animation: slideUp 0.3s ease-out forwards;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.animate-fadeIn {
    animation: fadeIn 0.3s ease-out forwards;
}

/* Better comment transitions */
.comments-container {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
}

.comments-container.open {
    max-height: 500px;
}

@media (prefers-color-scheme: dark) {
    .swiper-button-next,
    .swiper-button-prev {
        background: rgba(255, 255, 255, 0.15);
    }
}

/* Loading shimmer effect */
@keyframes shimmer {
    0% { background-position: -1000px 0; }
    100% { background-position: 1000px 0; }
}

.shimmer {
    background: linear-gradient(90deg, 
        rgba(255, 255, 255, 0.1), 
        rgba(255, 255, 255, 0.2), 
        rgba(255, 255, 255, 0.1)
    );
    background-size: 1000px 100%;
    animation: shimmer 2s infinite linear;
}

/* Improved Story UI */
.story-preview-modal {
    backdrop-filter: blur(8px);
}

.story-preview-container {
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.story-progress-bar {
    height: 3px;
    border-radius: 3px;
    transition: width 0.1s linear;
}

/* Post size control */
.post-container {
    max-width: 460px;
    margin-left: auto;
    margin-right: auto;
    box-shadow: 0 1px 2px rgba(0,0,0,0.05);
    border: 1px solid rgba(0,0,0,0.1);
    line-height: 1.4;
}

/* Remove the hover transform and effects */
.post-container::before {
    display: none;
}

.post-container:hover {
    box-shadow: 0 1px 2px rgba(0,0,0,0.05);
    transform: none;
}

.post-container:hover::before {
    opacity: 0;
}

.swiper-container.aspect-square {
    max-height: 450px;
    width: 100%;
}

/* Ensure feed is centered on desktop but full-width on mobile */
@media (min-width: 768px) {
    .max-w-md {
        max-width: 470px;
    }
}

@media (max-width: 640px) {
    .post-container {
        border-radius: 0;
        border-left: none;
        border-right: none;
        margin-bottom: 1rem;
    }
    
    .swiper-button-next,
    .swiper-button-prev {
        display: none;
    }
    
    .post-options-button {
        width: 2rem;
        height: 2rem;
    }
    
    .notification-filter {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }
    
    #createPostModal .modal-content {
        margin: 0;
        height: 100%;
        max-height: 100%;
        border-radius: 0;
    }
}

@keyframes gradient-shift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

.gradient-bg {
    background-size: 200% 200%;
    animation: gradient-shift 15s ease infinite;
}

.post-container .bg-gradient-to-r {
    background-size: 200% 200%;
    animation: gradient-shift 15s ease infinite;
}

/* Add subtle hover effects to post containers */

/* Mobile-specific post styling for Instagram-like appearance */
@media (max-width: 768px) {
    /* Make the main container full width on mobile */
    .mx-auto.py-6 {
        padding-left: 0 !important;
        padding-right: 0 !important;
    }
    
    /* Posts container takes full width */
    .max-w-md.mx-auto.space-y-4 {
        max-width: 100% !important;
        width: 100% !important;
        margin-left: 0 !important;
        margin-right: 0 !important;
        padding: 0 !important;
        space-y: 1px !important;
    }
    
    /* Each post container styling */
    .post-container {
        margin-bottom: 8px !important;
        border-radius: 0 !important;
        border-left: none !important;
        border-right: none !important;
        width: 100% !important;
    }
    
    /* Header section of post */
    .post-container .px-2 {
        padding-left: 12px !important;
        padding-right: 12px !important;
    }
    
    /* Post content area */
    .post-container .px-3 {
        padding-left: 12px !important;
        padding-right: 12px !important;
    }
    
    /* Fix image aspect ratio and overflow */
    .post-image .swiper-container {
        width: 100% !important;
        border-radius: 0 !important;
    }
    
    /* Instagram-like action buttons */
    .post-action-btn {
        padding: 6px !important;
    }
    
    /* Post metadata spacing */
    .post-container .mb-1.5 {
        margin-bottom: 4px !important;
    }
    
    /* Story container improvements */
    .story-container {
        margin-bottom: 8px !important;
        padding-left: 8px !important;
        padding-right: 8px !important;
    }
    
    /* Create post button position */
    .fixed.right-4.bottom-4 {
        right: 12px !important;
        bottom: 70px !important;
    }
}

/* Caption content styling */
.caption-content {
    word-break: break-word;
    max-width: 100%;
    display: inline;
    color: #4B5563;
    line-height: 1.4;
}

/* Story ring gradient styling */
.story-ring {
    background: linear-gradient(to right, #3B82F6, #8B5CF6, #D946EF);
}

/* Story section styling for smooth transitions */
.story-section {
    position: relative; /* Changed from sticky to relative */
    background-color: inherit;
}

/* Animation classes */
.animate-fadeIn {
    animation: fadeIn 0.3s ease-in-out forwards;
}

.animate-fadeOut {
    animation: fadeOut 0.3s ease-in-out forwards;
}

.animate-heartbeat {
    animation: heartbeat 0.6s ease-in-out;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

@keyframes fadeOut {
    from { opacity: 1; transform: translateY(0); }
    to { opacity: 0; transform: translateY(10px); }
}

@keyframes heartbeat {
    0% { transform: scale(1); }
    25% { transform: scale(1.3); }
    50% { transform: scale(1); }
    75% { transform: scale(1.3); }
    100% { transform: scale(1); }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize story-related variables
    window.currentUserId = '<%= user._id %>';
    window.currentUsername = '<%= user.username %>';
    window.viewedStories = [];
    
    // Initialize story rings on page load
    fetchAndUpdateStories();
    
    // Set up regular refresh of stories (every 2 minutes)
    setInterval(fetchAndUpdateStories, 120000);
    
    // Initialize Swiper carousels for post images
    const swipers = document.querySelectorAll('.swiper-container');
    swipers.forEach((container) => {
        const swiper = new Swiper(container, {
            pagination: {
                el: container.querySelector('.swiper-pagination'),
                clickable: true,
                dynamicBullets: true,
            },
            navigation: {
                nextEl: container.querySelector('.swiper-button-next'),
                prevEl: container.querySelector('.swiper-button-prev'),
            },
            slidesPerView: 1,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,
            grabCursor: true,
            loop: false,
            on: {
                slideChange: function() {
                    const currentSlideIndicator = container.querySelector('.current-slide');
                    if (currentSlideIndicator) {
                        currentSlideIndicator.textContent = this.activeIndex + 1;
                    }
                },
                init: function() {
                    console.log(`Swiper initialized with ${this.slides.length} slides`);
                    // Force update to ensure proper rendering
                    this.update();
                }
            }
        });
    });
    
    // Infinite scroll functionality
    let isLoading = false;
    let page = 1;

    window.addEventListener('scroll', function() {
        if (isLoading) return;
        
        const scrollPosition = window.innerHeight + window.scrollY;
        const pageHeight = document.body.offsetHeight;
        const loadingSpinner = document.querySelector('.loading-spinner');
        
        if (scrollPosition >= pageHeight - 500 && loadingSpinner) {
            isLoading = true;
            loadMorePosts();
        }
    });

    // Load stories on page load
    loadStories();
    
    // Initialize socket connection
    initializeSocketConnection();
    
    // Set up event listeners for post creation
    if (document.getElementById('createPostForm')) {
        document.getElementById('createPostForm').addEventListener('submit', handlePostSubmit);
    }
    
    // Store the current user's ID from the server
    window.currentUserId = '<%= user._id %>';

    // Add user IDs to post containers for easy story detection
    document.querySelectorAll('.post-container').forEach(postContainer => {
        const userLink = postContainer.querySelector('a[href^="/user/"]');
        if (userLink) {
            const username = userLink.getAttribute('href').split('/').pop();
            // Store the username as a data attribute to identify posts by this user
            postContainer.setAttribute('data-username', username);
        }
    });
    
    // Add click handlers to profile images to view stories
    document.querySelectorAll('.post-container .relative > div.story-ring').forEach(storyRing => {
        const parentLink = storyRing.closest('a[href^="/user/"]');
        if (parentLink) {
            // Find the parent post container to get user ID
            const postContainer = storyRing.closest('.post-container');
            const username = postContainer.getAttribute('data-username');
            
            // Add a click handler that prevents default link behavior and opens stories instead
            storyRing.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Fetch user ID from username and open stories
                fetchUserIdFromUsername(username).then(userId => {
                    if (userId) {
                        openStory(userId);
                    }
                });
                
                return false;
            });
        }
    });
});

// Show comments modal
let currentPostIdForComments = null;

function showComments(postId) {
    currentPostIdForComments = postId;
    
    // Get the comments container
    const modalCommentsContainer = document.getElementById('modalCommentsContainer');
    modalCommentsContainer.innerHTML = '<div class="flex justify-center py-4"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div></div>';
    
    // Show the modal
    document.getElementById('commentsModal').classList.remove('hidden');
    document.body.style.overflow = 'hidden'; // Prevent scrolling
    
    // Fetch the comments
    fetch(`/post/${postId}/comments`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to fetch comments');
            }
            return response.json();
        })
        .then(data => {
            if (data.error) {
                modalCommentsContainer.innerHTML = `<p class="text-center text-red-500">${data.error}</p>`;
                return;
            }

            // Update the form
            const modalCommentForm = document.getElementById('modalCommentForm');
            modalCommentForm.onsubmit = function(e) {
                e.preventDefault();
                addCommentFromModal(postId);
            };

            const comments = data.comments;
            if (comments && comments.length > 0) {
                const commentsHTML = comments.map(comment => {
                    // First generate the replies HTML if any
                    let repliesHTML = '';
                    if (comment.replies && comment.replies.length > 0) {
                        repliesHTML = `
                            <div class="mt-2 pl-3 border-l-2 border-gray-200 dark:border-gray-700 space-y-2">
                                ${comment.replies.map((reply, replyIndex) => `
                                    <div class="reply" id="reply-${comment._id}-${replyIndex}">
                                        <div class="flex items-start">
                                            <div class="flex-shrink-0 mr-1">
                                                <img src="${reply.user.profileImage || '/images/default-profile.png'}" 
                                                     alt="${reply.user.name}" 
                                                     class="w-6 h-6 rounded-full object-cover">
                                            </div>
                                            <div class="flex-1">
                                                <p class="text-xs">
                                                    <span class="font-medium text-gray-800 dark:text-white">${reply.user.name}</span>
                                                    ${reply.parentReplyIndex >= 0 && comment.replies[reply.parentReplyIndex] ? 
                                                        `<span class="text-gray-500 dark:text-gray-400">@${comment.replies[reply.parentReplyIndex].user.name}</span>` : ''}
                                                    <span class="text-gray-600 dark:text-gray-300">${reply.content}</span>
                                                </p>
                                                <div class="mt-1 flex items-center text-xs space-x-3">
                                                    <button onclick="likeReply('${comment._id}', '${replyIndex}', this)" 
                                                            class="reply-like-btn ${reply.likes && reply.likes.includes('<%= user._id %>') ? 'text-red-500' : 'text-gray-500'} hover:text-red-500">
                                                        <i class="fas fa-heart"></i>
                                                        <span class="reply-like-count">${reply.likes ? reply.likes.length : 0}</span>
                                                    </button>
                                                    <button onclick="toggleNestedReplyForm('${comment._id}', '${replyIndex}')" 
                                                            class="text-gray-500 hover:text-blue-500">
                                                        Reply
                                                    </button>
                                                    ${reply.user._id === '<%= user._id %>' ? `
                                                    <button onclick="deleteReply('${comment._id}', '${replyIndex}', this)" 
                                                            class="text-gray-500 hover:text-red-500">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                    ` : ''}
                                                </div>
                                                
                                                <!-- Hidden nested reply form -->
                                                <div id="nested-reply-form-${comment._id}-${replyIndex}" class="hidden mt-1">
                                                    <form class="flex items-center" onsubmit="addNestedReply(event, '${comment._id}', '${replyIndex}')">
                                                        <input type="text" 
                                                               placeholder="Reply to ${reply.user.name}..." 
                                                               class="flex-1 py-1 px-2 text-xs border border-gray-300 dark:border-gray-700 rounded-full focus:outline-none focus:ring-1 focus:ring-blue-500 bg-gray-50 dark:bg-gray-700"
                                                               required>
                                                        <button type="submit" class="ml-1 text-blue-500 hover:text-blue-600">
                                                            <i class="fas fa-paper-plane"></i>
                                                        </button>
                                                    </form>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                        `;
                    }
                
                    return `
                        <div class="flex space-x-3 mb-4">
                            <img src="${comment.user.profileImage || '/images/default-profile.png'}" 
                                 alt="${comment.user.name}" 
                                 class="w-8 h-8 rounded-full object-cover">
                            <div class="flex-1">
                                <div class="flex justify-between items-start">
                                    <p class="font-medium text-sm text-gray-800 dark:text-white">${comment.user.name}</p>
                                    <span class="text-xs text-gray-500 dark:text-gray-400">${formatTimeAgo(new Date(comment.createdAt))}</span>
                                </div>
                                <p class="text-gray-600 dark:text-gray-300 text-sm">${comment.content}</p>
                                
                                <!-- Comment actions -->
                                <div class="mt-1 flex items-center text-xs space-x-4">
                                    <button onclick="likeComment('${comment._id}', this)" 
                                            class="comment-like-btn ${comment.likes && comment.likes.includes('<%= user._id %>') ? 'text-red-500' : 'text-gray-500'} hover:text-red-500"
                                            data-comment-id="${comment._id}">
                                        <i class="fas fa-heart"></i>
                                        <span class="like-count ml-1">${comment.likes ? comment.likes.length : 0}</span>
                                    </button>
                                    <button onclick="toggleReplyForm('${comment._id}')" 
                                            class="text-gray-500 hover:text-blue-500">
                                        Reply
                                    </button>
                                    ${comment.user._id === '<%= user._id %>' ? `
                                    <button onclick="deleteComment('${comment._id}', this)" 
                                            class="text-gray-500 hover:text-red-500">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                    ` : ''}
                                </div>
                                
                                <!-- Reply form -->
                                <div id="reply-form-${comment._id}" class="hidden mt-2">
                                    <form class="flex items-center" onsubmit="addReply(event, '${comment._id}')">
                                        <input type="text" 
                                               placeholder="Add a reply..." 
                                               class="flex-1 py-1 px-2 text-xs border border-gray-300 dark:border-gray-700 rounded-full focus:outline-none focus:ring-1 focus:ring-blue-500 bg-gray-50 dark:bg-gray-700"
                                               required>
                                        <button type="submit" class="ml-1 text-blue-500 hover:text-blue-600">
                                            <i class="fas fa-paper-plane"></i>
                                        </button>
                                    </form>
                                </div>
                                
                                <!-- Replies section -->
                                ${repliesHTML}
                            </div>
                        </div>
                    `;
                }).join('');
                
                modalCommentsContainer.innerHTML = commentsHTML;
            } else {
                modalCommentsContainer.innerHTML = '<p class="text-center text-gray-500 dark:text-gray-400 py-4">No comments yet</p>';
            }
        })
        .catch(error => {
            console.error('Error fetching comments:', error);
            modalCommentsContainer.innerHTML = '<p class="text-center text-red-500">Failed to load comments</p>';
        });
}

// Add comment from modal
function addCommentFromModal(postId) {
    const input = document.getElementById('modalCommentInput');
    const content = input.value.trim();
    
    if (!content) return;
    
    // Disable input and show loading state
    input.disabled = true;
    
    fetch(`/post/${postId}/comment`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ content })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to add comment');
        }
        return response.json();
    })
    .then(data => {
        if (data.error) {
            console.error('Error adding comment:', data.error);
        } else {
            // Clear input
            input.value = '';
            
            // Refresh comments
            showComments(postId);
        }
    })
    .catch(error => {
        console.error('Error adding comment:', error);
    })
    .finally(() => {
        // Re-enable input
        input.disabled = false;
    });
}

// Close comments modal
function closeCommentsModal() {
    document.getElementById('commentsModal').classList.add('hidden');
    document.body.style.overflow = ''; // Re-enable scrolling
    currentPostIdForComments = null;
}

// Format time ago
function formatTimeAgo(date) {
    const seconds = Math.floor((new Date() - date) / 1000);
    
    let interval = Math.floor(seconds / 31536000);
    if (interval > 1) return interval + ' years ago';
    if (interval === 1) return '1 year ago';
    
    interval = Math.floor(seconds / 2592000);
    if (interval > 1) return interval + ' months ago';
    if (interval === 1) return '1 month ago';
    
    interval = Math.floor(seconds / 86400);
    if (interval > 1) return interval + ' days ago';
    if (interval === 1) return '1 day ago';
    
    interval = Math.floor(seconds / 3600);
    if (interval > 1) return interval + ' hours ago';
    if (interval === 1) return '1 hour ago';
    
    interval = Math.floor(seconds / 60);
    if (interval > 1) return interval + ' minutes ago';
    if (interval === 1) return '1 minute ago';
    
    return 'just now';
}

// Toggle post like
function toggleLike(postId) {
    const likeBtn = document.getElementById(`like-btn-${postId}`);
    
    // Get current like state
    const isLiked = likeBtn.classList.contains('text-red-500');
    
    // Send request to server first, don't update UI optimistically
    fetch(`/post/${postId}/like`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        credentials: 'include'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to process like');
        }
        return response.json();
    })
    .then(data => {
        // Update UI based on server response
        // Update like count with exact number from server
        const countElements = document.querySelectorAll(`.like-count-${postId}`);
        countElements.forEach(element => {
            element.textContent = data.likes;
        });
        
        // Update like button state
        if (data.isLiked) {
            likeBtn.innerHTML = '<i class="fas fa-heart text-2xl"></i>';
            likeBtn.classList.remove('text-gray-800', 'dark:text-white');
            likeBtn.classList.add('text-red-500');
            likeBtn.classList.add('liked');
            setTimeout(() => likeBtn.classList.remove('liked'), 300);
            
            // No need to show toast for likes
            // showToast('Post liked', 'like', true);
        } else {
            likeBtn.innerHTML = '<i class="far fa-heart text-2xl"></i>';
            likeBtn.classList.remove('text-red-500');
            likeBtn.classList.add('text-gray-800', 'dark:text-white');
            
            // No need to show toast for unlikes
            // showToast('Post unliked', 'like', true);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Failed to process like. Please try again.');
    });
}

// Follow a suggested user
function followUser(userId) {
    const btn = document.querySelector(`.follow-btn[data-user-id="${userId}"]`);
    
    // Disable button during request and change text
    btn.disabled = true;
    btn.innerHTML = 'Following...';
    
    // Send request to follow user
    fetch(`/user/${userId}/follow`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            showToast(data.error);
            // Reset button
            btn.disabled = false;
            btn.innerHTML = 'Follow';
        } else {
            // Success - update button
            if (data.followRequested) {
                btn.innerHTML = 'Requested';
                btn.classList.add('text-gray-500');
                btn.classList.remove('text-blue-500', 'hover:text-blue-700');
            } else {
                btn.innerHTML = 'Following';
                btn.classList.add('text-gray-500');
                btn.classList.remove('text-blue-500', 'hover:text-blue-700');
                
                // If the user followed someone for the first time, refresh feed to show posts
                if (document.querySelector('.divide-y[data-user-id]')) {
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                }
            }
            showToast(data.followRequested ? 'Follow request sent' : 'Following user');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Failed to follow user');
        // Reset button
        btn.disabled = false;
        btn.innerHTML = 'Follow';
    });
}

// Update like count in UI (removed - we'll update counts directly from server response)
function updateLikeCount(postId, change) {
    // This function is now deprecated - we update counts directly from server response
}

// Double tap to like
function handleDoubleTap(postId) {
    const likeBtn = document.getElementById(`like-btn-${postId}`);
    const isLiked = likeBtn.classList.contains('text-red-500');
    
    if (!isLiked) {
        toggleLike(postId);
    }
}

// Toggle save post
function toggleSavePost(postId) {
    const saveBtn = document.getElementById(`save-btn-${postId}`);
    const isSaved = saveBtn.querySelector('i').classList.contains('fas');
    
    // Optimistic UI update
    if (isSaved) {
        saveBtn.innerHTML = '<i class="far fa-bookmark text-2xl text-gray-800 dark:text-white"></i>';
    } else {
        saveBtn.innerHTML = '<i class="fas fa-bookmark text-2xl text-gray-800 dark:text-white"></i>';
    }
    
    // Send request to server
    fetch(`/post/${postId}/save`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            // Revert UI if request fails
            if (isSaved) {
                saveBtn.innerHTML = '<i class="fas fa-bookmark text-2xl text-gray-800 dark:text-white"></i>';
        } else {
                saveBtn.innerHTML = '<i class="far fa-bookmark text-2xl text-gray-800 dark:text-white"></i>';
            }
            showToast(data.error, 'error');
        } else {
            // Set showOnlyImportant to true for save notifications
            showToast(data.saved ? 'Post saved. View in <a href="/saved-posts" class="underline">saved posts</a>.' : 'Post removed from your collection', 'post-save', true);
            
            // Update the page to show saved posts if on saved posts page
            if (window.location.pathname === '/saved-posts') {
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }
        }
    })
    .catch(error => {
        console.error('Error:', error);
        
        // Revert UI if request fails
        if (isSaved) {
            saveBtn.innerHTML = '<i class="fas fa-bookmark text-2xl text-gray-800 dark:text-white"></i>';
        } else {
            saveBtn.innerHTML = '<i class="far fa-bookmark text-2xl text-gray-800 dark:text-white"></i>';
        }
    });
}

// Open post options modal
let currentPostId = null;
let currentPostUserId = null;

function showPostOptions(postId) {
    // Find the post container to get post information
    const postContainer = document.querySelector(`.post-container[data-post-id="${postId}"]`);
    if (!postContainer) {
        showToast('Error: Post not found');
        return;
    }
    
    currentPostId = postId;
    currentPostUserId = postContainer.getAttribute('data-user-id');
    
    // Show/hide delete option based on whether user owns the post
    const deleteBtn = document.querySelector('#postOptionsModal button:nth-child(2)');
    if (deleteBtn) {
        if (currentPostUserId === window.currentUserId) {
            deleteBtn.classList.remove('hidden');
        } else {
            deleteBtn.classList.add('hidden');
        }
    }
    
    document.getElementById('postOptionsModal').classList.remove('hidden');
}

// Close post options modal
function closePostOptionsModal() {
    document.getElementById('postOptionsModal').classList.add('hidden');
}

// Copy post link
function copyPostLink() {
    const url = `${window.location.origin}/post/${currentPostId}`;
    navigator.clipboard.writeText(url).then(() => {
        showToast('Link copied to clipboard');
        closePostOptionsModal();
    });
}

// Report post
function reportPost() {
    // Implementation for reporting post
    showToast('Post reported');
    closePostOptionsModal();
}

// Unfollow user
function unfollowUser() {
    // Implementation for unfollowing user
    showToast('User unfollowed');
    closePostOptionsModal();
}

// Share post
function sharePost(postId) {
    currentPostId = postId;
    document.getElementById('shareModal').classList.remove('hidden');
    document.getElementById('shareUsername').value = '';
    document.getElementById('shareMessage').value = '';
}

// Close share modal
function closeShareModal() {
    document.getElementById('shareModal').classList.add('hidden');
}

// Confirm share post
function confirmShare() {
    const username = document.getElementById('shareUsername').value.trim();
    const message = document.getElementById('shareMessage').value.trim();
    
    if (!username) {
        showToast('Please select a user to share with');
        return;
    }
    
    fetch(`/post/${currentPostId}/share`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ username, message })
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            showToast(data.error);
        } else {
            showToast('Post shared successfully!');
            closeShareModal();
        }
    })
    .catch(error => {
        console.error('Error sharing post:', error);
        showToast('Failed to share post. Please try again.');
    });
}

// Toast notification
function showToast(message, type = 'info', showOnlyImportant) {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    
    toastMessage.textContent = message;
    toast.classList.remove('translate-y-full', 'opacity-0');
    toast.classList.add('translate-y-0', 'opacity-100');
    
    // Always use the blue-purple gradient theme
    toast.style.background = 'linear-gradient(45deg, #3b82f6, #8b5cf6)';
    
    // Add common styles
    toast.style.color = 'white';
    toast.style.borderRadius = '8px';
    toast.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
    
    // Hide after 3 seconds
    setTimeout(() => {
        toast.classList.remove('translate-y-0', 'opacity-100');
        toast.classList.add('translate-y-full', 'opacity-0');
    }, 3000);
}

// Load stories
function loadStories() {
    console.log('Loading stories...');
    fetch('/stories')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok: ' + response.statusText);
            }
            return response.json();
        })
        .then(data => {
            console.log('Stories data:', data);
            const storiesList = document.getElementById('storiesList');
            storiesList.innerHTML = ''; // Clear existing stories
            
            // Handle both response formats for backward compatibility
            const stories = data.stories || data;
            
            if (stories && stories.length > 0) {
                // Group stories by user
                const storiesByUser = {};
                stories.forEach(story => {
                    if (!storiesByUser[story.user._id]) {
                        storiesByUser[story.user._id] = {
                            user: story.user,
                            stories: []
                        };
                    }
                    storiesByUser[story.user._id].stories.push(story);
                });
                
                // Create story bubbles for each user
                Object.values(storiesByUser).forEach(userStories => {
                    const hasUnviewedStory = userStories.stories.some(story => 
                        !story.viewers || !story.viewers.includes(window.currentUserId));
                    
                    const storyItem = document.createElement('div');
                    storyItem.className = 'flex-shrink-0 text-center';
                    storyItem.innerHTML = `
                        <div class="cursor-pointer" onclick="openStory('${userStories.user._id}')">
                            <div class="${hasUnviewedStory ? 'story-ring' : 'story-ring-viewed'} rounded-full p-[2px]">
                                <div class="bg-white dark:bg-black p-[1px] rounded-full">
                                    <img src="${userStories.user.profileImage}" 
                                         alt="${userStories.user.name}" 
                                         class="w-16 h-16 rounded-full object-cover">
                                </div>
                            </div>
                            <p class="text-xs mt-1 text-gray-600 dark:text-gray-400 truncate max-w-[62px] mx-auto">${userStories.user.username}</p>
                        </div>
                    `;
                    
                    storiesList.appendChild(storyItem);
                });
                
                // Update any profile pictures in posts that have active stories
                updatePostHeadersWithStoryRings(Object.keys(storiesByUser));
            } else {
                console.log('No stories available or empty stories array');
            }
        })
        .catch(error => {
            console.error('Error loading stories:', error);
        });
}

// Update post headers with story rings for users who have active stories
function updatePostHeadersWithStoryRings(userIdsWithStories) {
    // Find all post headers and update them
    document.querySelectorAll('.post-container').forEach(post => {
        const userId = post.getAttribute('data-user-id');
        if (userId && userIdsWithStories.includes(userId)) {
            const profileImgContainer = post.querySelector('.relative > div');
            if (profileImgContainer && !profileImgContainer.classList.contains('story-ring')) {
                // Check if user has viewed all stories
                const hasViewedAllStories = checkIfViewedAllStories(userId);
                profileImgContainer.className = `${hasViewedAllStories ? 'story-ring-viewed' : 'story-ring'} rounded-full p-[2px]`;
            }
        }
    });
}

// Helper function to check if user has viewed all stories
function checkIfViewedAllStories(userId) {
    // This would ideally be implemented with proper story viewing data
    // For now we'll default to showing the red ring (unviewed)
    return false;
}

// Open story viewer by user ID
function openStory(userId) {
    console.log('Opening stories for user:', userId);
    fetch('/stories')
        .then(response => response.json())
        .then(data => {
            // Handle both response formats for backward compatibility
            const stories = data.stories || data;
            
            if (!stories || stories.length === 0) {
                console.log('No stories available');
                return;
            }
            
            // Group stories by user
            const storiesByUser = {};
            stories.forEach(story => {
                if (!storiesByUser[story.user._id]) {
                    storiesByUser[story.user._id] = {
                        user: story.user,
                        stories: []
                    };
                }
                storiesByUser[story.user._id].stories.push(story);
            });
            
            // Convert to array and find starting user index
            const userStoriesArray = Object.values(storiesByUser);
            currentUserIndex = userStoriesArray.findIndex(item => item.user._id === userId);
            if (currentUserIndex === -1) {
                console.log('User stories not found, starting from beginning');
                currentUserIndex = 0;
            }
            
            // Set current stories to selected user's stories
            currentStories = userStoriesArray;
            currentStoryIndex = 0;
            
            // Display the first story
            displayCurrentStory();
            
            // Show modal
            document.getElementById('storyModal').classList.remove('hidden');
            document.body.style.overflow = 'hidden'; // Prevent background scrolling
        })
        .catch(error => console.error('Error opening story:', error));
}

// Display the current story
function displayCurrentStory() {
    if (!currentStories || currentStories.length === 0 || currentUserIndex < 0 || currentUserIndex >= currentStories.length) {
        closeStoryModal();
        return;
    }
    
    const userStories = currentStories[currentUserIndex];
    if (!userStories.stories || userStories.stories.length === 0 || currentStoryIndex < 0 || currentStoryIndex >= userStories.stories.length) {
        // Move to next user's stories
        currentUserIndex++;
        currentStoryIndex = 0;
        
        // If we've reached the end of all stories, close modal
        if (currentUserIndex >= currentStories.length) {
            closeStoryModal();
            return;
        }
    }
    
    const story = userStories.stories[currentStoryIndex];
    const user = userStories.user;
    
    // Set user info
    document.getElementById('storyUserImage').src = user.profileImage;
    document.getElementById('storyUsername').textContent = user.username;
    
    // Calculate time difference
    const storyTime = new Date(story.createdAt);
    const now = new Date();
    const diffInHours = Math.floor((now - storyTime) / (1000 * 60 * 60));
    
    document.getElementById('storyTime').textContent = diffInHours === 0 
        ? 'Just now' 
        : `${diffInHours}h ago`;
    
    // Update progress bars
    const progressBarsContainer = document.getElementById('storyProgressBars');
    progressBarsContainer.innerHTML = '';
    
    userStories.stories.forEach((s, index) => {
        const progressBar = document.createElement('div');
        progressBar.className = 'flex-1 h-1 bg-gray-600 rounded-full overflow-hidden';
        
        // Check if this story has already been viewed
        const isViewed = index < currentStoryIndex || 
                         (index === currentStoryIndex && s.viewers && 
                          s.viewers.includes(window.currentUserId));
        
        // For completed stories, fill 100%
        if (index < currentStoryIndex) {
            progressBar.innerHTML = `<div class="h-full bg-white" style="width: 100%;"></div>`;
        } 
        // For current story, animate from 0 to 100%
        else if (index === currentStoryIndex) {
            progressBar.innerHTML = `<div class="h-full bg-white story-progress-bar" style="width: 0%"></div>`;
        } 
        // For future stories, show empty
        else {
            progressBar.innerHTML = `<div class="h-full bg-white" style="width: 0%"></div>`;
        }
        
        progressBarsContainer.appendChild(progressBar);
    });
    
    // Update story image container
    const storyImageContainer = document.getElementById('storyImage');
    storyImageContainer.innerHTML = '<div class="w-full h-full flex items-center justify-center"><div class="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-white"></div></div>';
    
    if (story.media.type === 'image') {
        const img = new Image();
        img.onload = function() {
            storyImageContainer.innerHTML = `<img src="${story.media.url}" class="w-full h-full object-contain">`;
        };
        img.onerror = function() {
            storyImageContainer.innerHTML = `<div class="flex flex-col items-center justify-center h-full">
                <i class="fas fa-exclamation-triangle text-red-500 text-4xl mb-2"></i>
                <p class="text-white text-center">Error loading image</p>
            </div>`;
        };
        img.src = story.media.url;
    } else {
        storyImageContainer.innerHTML = `
            <video src="${story.media.url}" class="w-full h-full object-contain" autoplay muted
                   onloadeddata="this.play()" 
                   onplay="this.classList.remove('opacity-0')"
                   onerror="this.parentNode.innerHTML = '<div class=\\'flex flex-col items-center justify-center h-full\\'><i class=\\'fas fa-exclamation-triangle text-red-500 text-4xl mb-2\\'></i><p class=\\'text-white text-center\\'>Error loading video</p></div>';"
                   class="opacity-0 transition-opacity duration-300"></video>
        `;
    }
    
    // Mark story as viewed
    markStoryAsViewed(story._id);
    
    // Clear existing timer
    if (storyTimer) clearTimeout(storyTimer);
    
    // Start progress timer (5 seconds for images, video duration for videos)
    const duration = story.media.type === 'image' ? 5000 : 10000; // Default 10s for videos
    
    storyTimer = setTimeout(() => {
        nextStory();
    }, duration);
    
    // Reset reply input
    const replyInput = document.getElementById('storyReplyInput');
    if (replyInput) {
        replyInput.value = '';
    }
}

// Mark story as viewed
function markStoryAsViewed(storyId) {
    fetch(`/story/${storyId}/view`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (response.ok) {
            // Add this story ID to locally viewed stories for immediate UI update
            if (!window.viewedStories) window.viewedStories = [];
            if (!window.viewedStories.includes(storyId)) {
                window.viewedStories.push(storyId);
            }
            
            // Update story ring on this post if present
            const storyRings = document.querySelectorAll('.story-ring');
            storyRings.forEach(ring => {
                const postContainer = ring.closest('.post-container');
                if (postContainer) {
                    const userId = postContainer.getAttribute('data-user-id');
                    const userStories = currentStories.find(s => s.user._id === userId);
                    
                    if (userStories) {
                        // Check if all stories from this user are viewed
                        const allViewed = userStories.stories.every(story => 
                            window.viewedStories.includes(story._id) || 
                            (story.viewers && story.viewers.includes(window.currentUserId))
                        );
                        
                        if (allViewed) {
                            ring.classList.remove('story-ring');
                            ring.classList.add('story-ring-viewed');
                        }
                    }
                }
            });
            
            return response.json();
        }
        throw new Error('Failed to mark story as viewed');
    })
    .then(data => {
        console.log('Story marked as viewed:', data);
    })
    .catch(error => console.error('Error marking story as viewed:', error));
}

// Show next story
function nextStory() {
    const userStories = currentStories[currentUserIndex];
    
    // Move to next story in current user's stories
    currentStoryIndex++;
    
    // If we've reached the end of this user's stories, move to next user
    if (currentStoryIndex >= userStories.stories.length) {
        currentUserIndex++;
        currentStoryIndex = 0;
        
        // If we've reached the end of all stories, close modal
        if (currentUserIndex >= currentStories.length) {
            closeStoryModal();
                return;
        }
    }
    
    displayCurrentStory();
}

// Show previous story
function previousStory() {
    currentStoryIndex--;
    
    // If we're at the beginning of this user's stories, move to previous user
    if (currentStoryIndex < 0) {
        currentUserIndex--;
        
        // If we're at the beginning of all stories, loop to the end
        if (currentUserIndex < 0) {
            closeStoryModal();
            return;
        }
        
        // Set to last story of previous user
        currentStoryIndex = currentStories[currentUserIndex].stories.length - 1;
    }
    
    displayCurrentStory();
}

// Show next story
function showNextStory() {
    if (storyTimer) clearTimeout(storyTimer);
    nextStory();
}

// Show previous story
function showPreviousStory() {
    if (storyTimer) clearTimeout(storyTimer);
    previousStory();
}

// Close story modal
function closeStoryModal() {
    console.log('closeStoryModal function called');
    if (storyTimer) {
        console.log('Clearing story timer');
        clearTimeout(storyTimer);
    }
    
    const storyModal = document.getElementById('storyModal');
    if (storyModal) {
        console.log('Hiding story modal');
        storyModal.classList.add('hidden');
        document.body.style.overflow = ''; // Re-enable scrolling
    } else {
        console.error('Story modal element not found');
    }
    
    // Reset story state
    currentStories = [];
    currentUserIndex = 0;
    currentStoryIndex = 0;
    console.log('Story modal should now be closed');
}

// Reply to story
function replyToStory(event) {
    event.preventDefault();
    
    const replyInput = document.getElementById('storyReplyInput');
    const message = replyInput.value.trim();
    
    if (!message) {
        showToast('Please enter a message');
        return;
    }
    
    // Get current story
    if (!currentStories || currentUserIndex < 0 || currentStoryIndex < 0) {
        showToast('Cannot reply to story');
        return;
    }
    
    const userStories = currentStories[currentUserIndex];
    if (!userStories || !userStories.stories) {
        showToast('Cannot reply to story');
        return;
    }
    
    const story = userStories.stories[currentStoryIndex];
    if (!story) {
        showToast('Cannot reply to story');
        return;
    }
    
    // Show loading state
    const replyButton = document.getElementById('storyReplyButton');
    const originalText = replyButton.innerHTML;
    replyButton.disabled = true;
    replyButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    
    // Send reply
    fetch(`/story/${story._id}/reply`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ message })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to send reply');
        }
        return response.json();
    })
    .then(data => {
        replyInput.value = '';
        showToast('Reply sent successfully!');
    })
    .catch(error => {
        console.error('Error replying to story:', error);
        showToast('Failed to send reply. Please try again.');
    })
    .finally(() => {
        // Reset button state
        replyButton.disabled = false;
        replyButton.innerHTML = originalText;
    });
}

// Create Post Modal Functions
function openCreatePostModal() {
    document.getElementById('createPostModal').classList.remove('hidden');
    document.body.style.overflow = 'hidden'; // Prevent scrolling
}

function closeCreatePostModal() {
    document.getElementById('createPostModal').classList.add('hidden');
    document.body.style.overflow = ''; // Re-enable scrolling
    
    // Reset form
    const form = document.getElementById('createPostForm');
    if (form) form.reset();
    
    // Clear image previews
    const previewContainer = document.getElementById('imagePreviewContainer');
    if (previewContainer) {
        previewContainer.innerHTML = '';
        previewContainer.classList.add('hidden');
    }
    
    // Clear file input
    const fileInput = document.getElementById('imageInput');
    if (fileInput) {
        fileInput.value = '';
    }
    
    // Reset processed images
    processedImages = [];
    
    // Make sure cropper is closed
    if (currentCropper) {
        closeCropperModal();
    }
}

// Variables for post creation
let processedImages = [];
let currentCropper = null;
let currentImageIndex = null;
let imagesToCrop = [];

// Handle image selection
function handleImageSelect(event) {
    const files = Array.from(event.target.files);
    
    // Check if maximum number of images is reached
    if (processedImages.filter(Boolean).length + files.length > 10) {
        showToast('You can upload a maximum of 10 images per post');
        return;
    }
    
    // Store files that need cropping
    imagesToCrop = files.filter(file => file.type.startsWith('image/'));
    
    if (imagesToCrop.length === 0) {
        showToast('Please select valid image files');
        return;
    }
    
    console.log('Starting image cropping process');
    // Start cropping the first image
    startCroppingNext();
}

// Start cropping the next image in the queue
function startCroppingNext() {
    if (imagesToCrop.length === 0) {
        return;
    }
    
    const file = imagesToCrop.shift();
    currentImageIndex = processedImages.length;
    processedImages.push(null); // Reserve spot
    
    console.log('Loading image for cropping');
    const reader = new FileReader();
    reader.onload = function(e) {
        const cropperImage = document.getElementById('cropperImage');
        cropperImage.src = e.target.result;
        
        // Show the cropper modal
        document.getElementById('cropperModal').classList.remove('hidden');
        document.body.style.overflow = 'hidden'; // Prevent scrolling
        console.log('Cropper modal should be visible now');
        
        // Initialize cropper after image loads
        cropperImage.onload = function() {
            console.log('Image loaded, initializing Cropper.js');
            if (currentCropper) {
                currentCropper.destroy();
            }
            
            try {
                currentCropper = new Cropper(cropperImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    autoCropArea: 0.85,
                    responsive: true,
                    restore: false,
                    modal: true,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false
                });
                console.log('Cropper initialized successfully');
            } catch (error) {
                console.error('Error initializing cropper:', error);
                showToast('Error initializing image cropper. Please try again.');
            }
        };
    };
    reader.readAsDataURL(file);
    
    // Set up event listeners for buttons
    document.getElementById('cropperDoneBtn').onclick = finishCropping;
    document.getElementById('cropperCancelBtn').onclick = cancelCropping;
}

// Finish cropping the current image
function finishCropping() {
    if (!currentCropper) {
        showToast('Cropper not initialized. Please try again.');
        return;
    }
    
    console.log('Finishing cropping process');
    
    try {
        // Get the cropped canvas - ensuring square aspect ratio
        const canvas = currentCropper.getCroppedCanvas({
            width: 1080, // Instagram standard size
            height: 1080, // Keep it square
            fillColor: '#fff',
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high'
        });
        
        if (!canvas) {
            showToast('Error creating cropped image. Please try again.');
            return;
        }
        
        console.log('Got cropped canvas, size:', canvas.width, 'x', canvas.height);
        
        // Convert canvas to blob
        canvas.toBlob(blob => {
            // Store the cropped image
            processedImages[currentImageIndex] = blob;
            console.log('Image blob created successfully');
            
            // Add to preview
            const previewContainer = document.getElementById('imagePreviewContainer');
            
            // Check if there's already a preview at this index and remove it
            const existingPreview = previewContainer.querySelector(`[data-index="${currentImageIndex}"]`);
            if (existingPreview) {
                existingPreview.remove();
            }
            
            const previewDiv = document.createElement('div');
            previewDiv.className = 'relative aspect-square overflow-hidden rounded-lg shadow-md';
            previewDiv.setAttribute('data-index', currentImageIndex);
            previewDiv.innerHTML = `
                <img src="${canvas.toDataURL()}" class="w-full h-full object-cover" />
                <button type="button" class="absolute top-2 right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600" onclick="removeImage(${currentImageIndex})">
                    <i class="fas fa-times text-xs"></i>
                </button>
            `;
            
            previewContainer.appendChild(previewDiv);
            previewContainer.classList.remove('hidden');
            console.log('Preview added to DOM');
            
            // Close the cropper modal
            closeCropperModal();
            
            // Process the next image if any
            if (imagesToCrop.length > 0) {
                startCroppingNext();
            }
        }, 'image/jpeg', 0.9); // Good quality JPEG for performance
    } catch (error) {
        console.error('Error in finishCropping:', error);
        showToast('Error processing image. Please try again.');
        closeCropperModal();
    }
}

// Cancel cropping the current image
function cancelCropping() {
    // Remove the reserved spot
    processedImages.splice(currentImageIndex, 1);
    
    closeCropperModal();
    
    // Process the next image if any
    if (imagesToCrop.length > 0) {
        startCroppingNext();
    }
}

// Close the cropper modal
function closeCropperModal() {
    console.log('Closing cropper modal');
    if (currentCropper) {
        try {
            currentCropper.destroy();
            console.log('Cropper instance destroyed');
        } catch (error) {
            console.error('Error destroying cropper:', error);
        }
        currentCropper = null;
    }
    
    document.getElementById('cropperModal').classList.add('hidden');
    document.body.style.overflow = ''; // Re-enable scrolling
    
    // Clear the image source to prevent memory leaks
    const cropperImage = document.getElementById('cropperImage');
    if (cropperImage) {
        cropperImage.src = '';
    }
    
    console.log('Cropper modal closed');
}

// Remove image from preview
function removeImage(index) {
    if (index >= 0 && index < processedImages.length) {
        processedImages[index] = null;
        
        // Remove preview
        const previewContainer = document.getElementById('imagePreviewContainer');
        const previewToRemove = previewContainer.querySelector(`[data-index="${index}"]`);
        if (previewToRemove) {
            previewToRemove.remove();
        }
        
        // Hide container if all previews removed
        if (previewContainer.children.length === 0) {
            previewContainer.classList.add('hidden');
        }
    }
}

// Handle post submission
async function handlePostSubmit(e) {
    e.preventDefault();
    e.stopPropagation();
    
    // Get form data
    const form = e.target;
    
    // Prevent multiple submissions
    const submitBtn = document.getElementById('submitPostBtn');
    if (submitBtn.disabled) {
        console.log('Form submission already in progress');
        return;
    }
    
    // Check if there are valid images
    const validImages = processedImages.filter(img => img !== null);
    
    if (validImages.length === 0) {
        showToast('Please add at least one image to your post');
        return;
    }
    
    // Update submit button state
    const originalText = submitBtn.innerHTML;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Uploading...';
    submitBtn.disabled = true;
    
    // Create a new FormData instance
    const formData = new FormData();
    
    // Add the caption content
    const contentField = form.querySelector('textarea[name="content"]');
    if (contentField) {
        formData.append('content', contentField.value);
    }
    
    // Append only valid images to form data
    validImages.forEach((blob, index) => {
        console.log(`Adding image ${index+1} to form data (${blob.size} bytes)`);
        formData.append('processedImages', blob, `image-${index}-3000x3000.jpg`);
    });
    
    // Detach event listeners from the form to prevent duplicate submissions
    const oldForm = form;
    const newForm = oldForm.cloneNode(true);
    oldForm.parentNode.replaceChild(newForm, oldForm);

    try {
        console.log('Sending post request to server...');
        const response = await fetch('/post', {
            method: 'POST',
            body: formData
        });
        
        if (response.ok) {
            // Parse the JSON response but don't display it directly
            const data = await response.json();
            console.log('Post created successfully:', data);
            showToast(data.message || 'Post created successfully!');
            closeCreatePostModal();
            
            // Redirect to the profile page after a short delay
            setTimeout(() => {
                window.location.href = `/profile`;
            }, 1000);
        } else {
            console.error('Error creating post:', response.status, response.statusText);
            let errorText = 'Error creating post';
            try {
                const errorData = await response.json();
                errorText = errorData.error || errorText;
            } catch (e) {
                // If the response isn't valid JSON, try to get the text
                errorText = await response.text() || errorText;
            }
            showToast(errorText);
        }
    } catch (error) {
        console.error('Network error creating post:', error);
        showToast('Network error. Please try again.');
    } finally {
        // Reset button state
        submitBtn.innerHTML = originalText;
        submitBtn.disabled = false;
    }
}

// Story handling functions
let storyFile = null;
let currentStories = [];
let currentStoryIndex = 0;
let currentUserIndex = 0;
let storyTimer = null;

// Fetch user ID from username
function fetchUserIdFromUsername(username) {
    return fetch(`/api/user/${username}/id`)
        .then(response => response.json())
        .then(data => {
            if (data.userId) {
                return data.userId;
            }
            return null;
        })
        .catch(error => {
            console.error('Error fetching user ID:', error);
            return null;
        });
}

// Update all story rings in the UI when new stories are added/viewed
function updateAllStoryRings() {
    fetch('/stories')
        .then(response => response.json())
        .then(data => {
            if (!data.stories || data.stories.length === 0) return;
            
            // Group stories by user
            const userIdsWithStories = new Set();
            const userIdsWithUnviewedStories = new Set();
            
            data.stories.forEach(story => {
                userIdsWithStories.add(story.user._id);
                
                // Check if the current user has viewed this story
                if (!story.viewers || !story.viewers.includes(window.currentUserId)) {
                    userIdsWithUnviewedStories.add(story.user._id);
                }
            });
            
            // Update story rings in post headers
            document.querySelectorAll('.post-container').forEach(post => {
                const username = post.getAttribute('data-username');
                if (!username) return;
                
                // Find the user ID for this username
                fetchUserIdFromUsername(username).then(userId => {
                    if (!userId) return;
                    
                    const profileImgContainer = post.querySelector('.relative > div');
                    if (!profileImgContainer) return;
                    
                    if (userIdsWithStories.has(userId)) {
                        // Add story ring with appropriate style (viewed/unviewed)
                        const hasUnviewedStories = userIdsWithUnviewedStories.has(userId);
                        profileImgContainer.className = `${hasUnviewedStories ? 'story-ring' : 'story-ring-viewed'} rounded-full p-[2px]`;
                        
                        // Add click handler if not already present
                        const img = profileImgContainer.querySelector('img');
                        if (img && !img.hasAttribute('data-has-story-handler')) {
                            img.setAttribute('data-has-story-handler', 'true');
                            img.parentElement.parentElement.addEventListener('click', function(e) {
                                e.preventDefault();
                                e.stopPropagation();
                                openStory(userId);
                                return false;
                            });
                        }
                    } else {
                        // Remove story ring if no stories
                        profileImgContainer.className = '';
                    }
                });
            });
        })
        .catch(error => console.error('Error updating story rings:', error));
}

// Set interval to refresh stories every minute
setInterval(updateAllStoryRings, 60000);

// Like/unlike a comment
function likeComment(commentId, button) {
    // If button parameter is not provided, find it in the DOM
    if (!button) {
        button = document.querySelector(`.comment-like-btn[data-comment-id="${commentId}"]`);
        if (!button) return;
    }
    
    const likeCountEl = button.querySelector('.like-count');
    const isLiked = button.classList.contains('text-red-500');
    
    // Optimistic UI update
    if (isLiked) {
        button.classList.remove('text-red-500');
        button.classList.add('text-gray-500');
        const currentCount = parseInt(likeCountEl.textContent);
        likeCountEl.textContent = Math.max(0, currentCount - 1);
    } else {
        button.classList.add('text-red-500');
        button.classList.remove('text-gray-500');
        const currentCount = parseInt(likeCountEl.textContent);
        likeCountEl.textContent = currentCount + 1;
    }
    
    fetch(`/comment/${commentId}/like`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to process like');
        }
        return response.json();
    })
    .then(data => {
        // Update count with actual value from server
        likeCountEl.textContent = data.likes;
        
        if (data.isLiked) {
            button.classList.add('text-red-500');
            button.classList.remove('text-gray-500');
        } else {
            button.classList.remove('text-red-500');
            button.classList.add('text-gray-500');
        }
    })
    .catch(error => {
        console.error('Error liking comment:', error);
        // Revert the UI change on error
        if (isLiked) {
            button.classList.add('text-red-500');
            button.classList.remove('text-gray-500');
        } else {
            button.classList.remove('text-red-500');
            button.classList.add('text-gray-500');
        }
        // Reset count (this is just an approximation as we don't know the real count now)
        if (isLiked) {
            const currentCount = parseInt(likeCountEl.textContent);
            likeCountEl.textContent = currentCount + 1;
        } else {
            const currentCount = parseInt(likeCountEl.textContent);
            likeCountEl.textContent = Math.max(0, currentCount - 1);
        }
    });
}

// Like/unlike a reply
function likeReply(commentId, replyIndex, button) {
    // If button parameter is not provided, find it in the DOM
    if (!button) {
        button = document.querySelector(`.reply-like-btn[data-comment-id="${commentId}"][data-reply-index="${replyIndex}"]`);
        if (!button) return;
    }
    
    const likeCountEl = button.querySelector('.reply-like-count');
    const isLiked = button.classList.contains('text-red-500');
    
    // Optimistic UI update
    if (isLiked) {
        button.classList.remove('text-red-500');
        button.classList.add('text-gray-500');
        const currentCount = parseInt(likeCountEl.textContent);
        likeCountEl.textContent = Math.max(0, currentCount - 1);
    } else {
        button.classList.add('text-red-500');
        button.classList.remove('text-gray-500');
        const currentCount = parseInt(likeCountEl.textContent);
        likeCountEl.textContent = currentCount + 1;
    }
    
    fetch(`/comment/${commentId}/reply/${replyIndex}/like`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to process like');
        }
        return response.json();
    })
    .then(data => {
        // Update count with actual value from server
        likeCountEl.textContent = data.likes;
        
        if (data.isLiked) {
            button.classList.add('text-red-500');
            button.classList.remove('text-gray-500');
        } else {
            button.classList.remove('text-red-500');
            button.classList.add('text-gray-500');
        }
    })
    .catch(error => {
        console.error('Error liking reply:', error);
        // Revert the UI change on error
        if (isLiked) {
            button.classList.add('text-red-500');
            button.classList.remove('text-gray-500');
        } else {
            button.classList.remove('text-red-500');
            button.classList.add('text-gray-500');
        }
        // Reset count (this is just an approximation as we don't know the real count now)
        if (isLiked) {
            const currentCount = parseInt(likeCountEl.textContent);
            likeCountEl.textContent = currentCount + 1;
        } else {
            const currentCount = parseInt(likeCountEl.textContent);
            likeCountEl.textContent = Math.max(0, currentCount - 1);
        }
    });
}

// Toggle reply form
function toggleReplyForm(commentId) {
    const replyForm = document.getElementById(`reply-form-${commentId}`);
    if (!replyForm) return;
    
    replyForm.classList.toggle('hidden');
    
    if (!replyForm.classList.contains('hidden')) {
        const input = replyForm.querySelector('input');
        if (input) input.focus();
    }
}

// Add reply to a comment
function addReply(event, commentId) {
    event.preventDefault();
    
    const form = event.target;
    const input = form.querySelector('input');
    const content = input.value.trim();
    
    if (!content) return;
    
    // Disable input during submission
    input.disabled = true;
    
    fetch(`/comment/${commentId}/reply`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ content })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to add reply');
        }
        return response.json();
    })
    .then(data => {
        // Clear input
        input.value = '';
        input.disabled = false;
        
        // Hide the reply form
        toggleReplyForm(commentId);
        
        // If we're in the comments modal, refresh comments to show the new reply
        if (currentPostIdForComments) {
            showComments(currentPostIdForComments);
        }
    })
    .catch(error => {
        console.error('Error adding reply:', error);
        showToast('Failed to add reply. Please try again.');
        input.disabled = false;
    });
}

// Delete post
function deletePost() {
    if (!currentPostId) {
        showToast('Error: Post ID not found');
        closePostOptionsModal();
        return;
    }

    // Show confirmation before deleting
    if (confirm('Are you sure you want to delete this post? This action cannot be undone.')) {
        // Show deleting toast
        showToast('Deleting post...');
        
        fetch(`/post/${currentPostId}/delete`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to delete post');
            }
            return response.json();
        })
        .then(data => {
            showToast('Post deleted successfully');
            closePostOptionsModal();
            
            // Remove the post from the feed
            const postElement = document.querySelector(`.post-container[data-post-id="${currentPostId}"]`);
            if (postElement) {
                postElement.remove();
            } else {
                // If we can't find the post by ID, reload the page
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }
        })
        .catch(error => {
            console.error('Error deleting post:', error);
            showToast('Failed to delete post. Please try again.');
        });
    } else {
        closePostOptionsModal();
    }
}

// Handle story upload
function handleStoryUpload(event) {
    const file = event.target.files[0];
    
    if (!file) return;
    
    if (!file.type.startsWith('image/') && !file.type.startsWith('video/')) {
        showToast('Please select an image or video file');
        return;
    }

    storyFile = file;
    
    // Show preview
    const previewContainer = document.getElementById('storyPreviewContainer');

    if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = function(e) {
            previewContainer.innerHTML = `<img src="${e.target.result}" class="w-full h-full object-cover">`;
            document.getElementById('storyPreviewModal').classList.remove('hidden');
        };
        reader.readAsDataURL(file);
    } else if (file.type.startsWith('video/')) {
        const reader = new FileReader();
        reader.onload = function(e) {
            previewContainer.innerHTML = `
                <video src="${e.target.result}" class="w-full h-full object-cover" autoplay muted loop></video>
            `;
            document.getElementById('storyPreviewModal').classList.remove('hidden');
        };
        reader.readAsDataURL(file);
    }
}

// Upload story
async function uploadStory() {
    if (!storyFile) {
        showToast('Please select a file first');
        return;
    }

    // Show loading state
    const uploadButton = document.querySelector('#storyPreviewModal button:last-child');
    const originalText = uploadButton.textContent;
    uploadButton.disabled = true;
    uploadButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Uploading...';

    const formData = new FormData();
    formData.append('file', storyFile);

    try {
        const response = await fetch('/story', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        // Close the preview regardless of success/failure
        closeStoryPreview();

        if (response.ok) {
            showToast('Story uploaded successfully!');
            
            // Refresh story rings without reloading page
            setTimeout(() => {
                fetchAndUpdateStories();
            }, 1000);
        } else {
            const errorMsg = data.error || 'Error uploading story';
            const details = data.details ? `: ${data.details}` : '';
            showToast(`${errorMsg}${details}`);
        }
    } catch (error) {
        console.error('Error:', error);
        showToast('Error uploading story. Please try again.');
        closeStoryPreview();
    } finally {
        // Reset button state
        uploadButton.disabled = false;
        uploadButton.textContent = originalText;
    }
}

// Fetch stories and update UI without page reload
function fetchAndUpdateStories() {
    fetch('/stories')
        .then(response => response.json())
        .then(data => {
            const stories = data.stories || [];
            
            if (stories.length === 0) return;
            
            // Group stories by user
            const storiesByUser = {};
            stories.forEach(story => {
                if (!storiesByUser[story.user._id]) {
                    storiesByUser[story.user._id] = {
                        user: story.user,
                        stories: []
                    };
                }
                storiesByUser[story.user._id].stories.push(story);
            });
            
            // Create story bubbles in the header
            const storiesList = document.getElementById('storiesList');
            if (storiesList) {
                storiesList.innerHTML = '';
                
                Object.values(storiesByUser).forEach(userStories => {
                    const hasUnviewedStory = userStories.stories.some(story =>
                        !story.viewers || !story.viewers.includes(window.currentUserId));
                    
                    const storyItem = document.createElement('div');
                    storyItem.className = 'flex-shrink-0 text-center';
                    storyItem.innerHTML = `
                        <div class="cursor-pointer" onclick="openStory('${userStories.user._id}')">
                            <div class="${hasUnviewedStory ? 'story-ring' : 'story-ring-viewed'} rounded-full p-[2px]">
                                <div class="w-16 h-16 rounded-full bg-white dark:bg-black p-[1px]">
                                    <img src="${userStories.user.profileImage}" 
                                        alt="${userStories.user.username}" 
                                        class="w-full h-full rounded-full object-cover">
                                </div>
                            </div>
                            <p class="text-xs mt-1 text-gray-600 dark:text-gray-400 font-medium">
                                ${userStories.user.username === window.currentUsername ? 'Your story' : userStories.user.username}
                            </p>
                        </div>
                    `;
                    storiesList.appendChild(storyItem);
                });
            }
            
            // Update profile images in posts that have stories
            updatePostHeadersWithStoryRings(Object.keys(storiesByUser));
        })
        .catch(error => console.error('Error fetching stories:', error));
}

// Close story preview
function closeStoryPreview() {
    document.getElementById('storyPreviewModal').classList.add('hidden');
    document.getElementById('storyInput').value = '';
    storyFile = null;
}

// Function to show the story
function showStory(userIndex, storyIndex) {
    if (!currentStories || !currentStories[userIndex] || !currentStories[userIndex].stories) return;
    
    // Update indices
    currentUserIndex = userIndex;
    currentStoryIndex = storyIndex;
    
    // Get the story
    const userStories = currentStories[userIndex];
    const story = userStories.stories[storyIndex];
    
    // Update UI elements
    document.getElementById('storyUsername').textContent = userStories.user.username || userStories.user.name;
    document.getElementById('storyTime').textContent = getTimeAgo(new Date(story.createdAt));
    document.getElementById('storyUserImage').src = userStories.user.profileImage;
    
    // Check if it's the user's own story and show delete button if it is
    const isOwnStory = userStories.user._id === currentUserId;
    console.log('Story owner ID:', userStories.user._id);
    console.log('Current user ID:', currentUserId);
    console.log('Is own story:', isOwnStory);
    
    // Show/hide both delete buttons based on ownership
    const deleteButton = document.getElementById('storyDeleteButton');
    const deleteButtonTop = document.getElementById('storyDeleteButtonTop');
    const deleteButtonBottom = document.getElementById('storyDeleteButtonBottom');
    
    if (deleteButton) {
        if (isOwnStory) {
            deleteButton.classList.remove('hidden');
        } else {
            deleteButton.classList.add('hidden');
        }
    }
    
    if (deleteButtonTop) {
        if (isOwnStory) {
            deleteButtonTop.classList.remove('hidden');
        } else {
            deleteButtonTop.classList.add('hidden');
        }
    }
    
    if (deleteButtonBottom) {
        if (isOwnStory) {
            deleteButtonBottom.classList.remove('hidden');
        } else {
            deleteButtonBottom.classList.add('hidden');
        }
    }
    
    // Clear previous story content
    const storyContainer = document.getElementById('storyImage');
    storyContainer.innerHTML = '';
    
    // Create media element based on type
    if (story.media.type === 'image') {
        const img = document.createElement('img');
        img.src = story.media.url;
        img.className = 'w-full h-full object-contain';
        storyContainer.appendChild(img);
    } else if (story.media.type === 'video') {
        const video = document.createElement('video');
        video.src = story.media.url;
        video.className = 'w-full h-full object-contain';
        video.autoplay = true;
        video.controls = false;
        video.muted = false;
        storyContainer.appendChild(video);
    }
    
    // Update progress bars
    updateProgressBars();
    
    // Clear any existing timer
    if (storyTimer) clearTimeout(storyTimer);
    
    // Progress to next story after delay
    const storyDuration = story.media.type === 'video' ? 0 : 5000; // 0 for video, 5s for images
    if (storyDuration > 0) {
        storyTimer = setTimeout(() => {
            showNextStory();
        }, storyDuration);
    }
    
    // Mark story as viewed
    markStoryAsViewed(story._id);
}

// Function to delete the current story
async function deleteCurrentStory() {
    if (!currentStories || currentUserIndex < 0 || currentStoryIndex < 0) return;
    
    const userStories = currentStories[currentUserIndex];
    const story = userStories.stories[currentStoryIndex];
    
    if (!story || userStories.user._id !== currentUserId) {
        showToast('You can only delete your own stories', 'error');
        return;
    }
    
    if (!confirm('Are you sure you want to delete this story?')) {
        return;
    }
    
    try {
        const response = await fetch(`/story/${story._id}/delete`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            showToast('Story deleted successfully');
            
            // Remove story from the current stories array
            userStories.stories.splice(currentStoryIndex, 1);
            
            // If no more stories for this user, close modal or go to next user's stories
            if (userStories.stories.length === 0) {
                if (currentStories.length > 1) {
                    // Go to next user's stories
                    currentStories.splice(currentUserIndex, 1);
                    currentUserIndex = Math.min(currentUserIndex, currentStories.length - 1);
                    currentStoryIndex = 0;
                    showStory(currentUserIndex, currentStoryIndex);
                } else {
                    // Close modal if no more stories
                    closeStoryModal();
                }
            } else {
                // Go to next story or wrap around
                currentStoryIndex = currentStoryIndex % userStories.stories.length;
                showStory(currentUserIndex, currentStoryIndex);
            }
            
            // Update progress bars
            updateProgressBars();
        } else {
            const errorData = await response.json();
            showToast(errorData.error || 'Failed to delete story', 'error');
        }
    } catch (error) {
        console.error('Error deleting story:', error);
        showToast('An error occurred while deleting the story', 'error');
    }
}

// Function to open a user's stories
async function openUserStories(userId) {
    console.log('Opening stories for user ID:', userId);
    
    try {
        // Make sure currentUserId is set
        window.currentUserId = '<%= user._id %>'; 
        console.log('Current user ID set to:', window.currentUserId);
        
        // Fetch the user's stories
        const response = await fetch(`/api/stories/${userId}`);
        if (!response.ok) {
            throw new Error('Failed to fetch stories');
        }
        
        const stories = await response.json();
        console.log('Fetched stories:', stories);
        
        // Check if there are any stories
        if (!stories || !stories.length) {
            console.log('No stories found for user');
            return;
        }
        
        // Store the stories in the global variable
        currentStories = stories;
        currentUserIndex = 0;
        currentStoryIndex = 0;
        
        // Open the story modal
        document.getElementById('storyModal').classList.remove('hidden');
        document.body.style.overflow = 'hidden'; // Prevent scrolling
        
        // Initialize the progress bars
        initializeProgressBars(stories[0]);
        
        // Show the first story
        showStory(0, 0);
        
    } catch (error) {
        console.error('Error opening stories:', error);
        showToast('Failed to load stories');
    }
}

// Delete a comment
function deleteComment(commentId, button) {
    // Removed confirmation alert
    
    fetch(`/comment/${commentId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to delete comment');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // Find and remove the comment element from the DOM
            const commentItem = button.closest('.flex.space-x-3.mb-4');
            if (commentItem) {
                commentItem.remove();
            }
            // Removed toast message
        } else {
            console.error('Error deleting comment:', data.error);
            // Removed toast message
        }
    })
    .catch(error => {
        console.error('Error deleting comment:', error);
        // Removed toast message
    });
}

// Delete a reply
function deleteReply(commentId, replyIndex, button) {
    // Removed confirmation alert
    
    fetch(`/comment/${commentId}/reply/${replyIndex}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to delete reply');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // Find and remove the reply element from the DOM
            const replyItem = button.closest('.reply');
            if (replyItem) {
                replyItem.remove();
            }
            // Removed toast message
        } else {
            console.error('Error deleting reply:', data.error);
            // Removed toast message
        }
    })
    .catch(error => {
        console.error('Error deleting reply:', error);
        // Removed toast message
    });
}

// Toggle nested reply form
function toggleNestedReplyForm(commentId, replyIndex) {
    const replyForm = document.getElementById(`nested-reply-form-${commentId}-${replyIndex}`);
    if (replyForm) {
        replyForm.classList.toggle('hidden');
        if (!replyForm.classList.contains('hidden')) {
            replyForm.querySelector('input').focus();
        }
    }
}

// Add nested reply
function addNestedReply(event, commentId, parentReplyIndex) {
    event.preventDefault();
    const input = event.target.querySelector('input');
    const content = input.value.trim();
    
    if (!content) return;
    
    // Disable input while submitting
    input.disabled = true;
    
    fetch(`/comment/${commentId}/reply`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
            content,
            parentReplyIndex: parseInt(parentReplyIndex)
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to add reply');
        }
        return response.json();
    })
    .then(reply => {
        // In modal view, just refresh the comments
        if (currentPostIdForComments) {
            showComments(currentPostIdForComments);
        }
    })
    .catch(error => {
        console.error('Error adding nested reply:', error);
    })
    .finally(() => {
        // Re-enable input and hide the form
        input.disabled = false;
        toggleNestedReplyForm(commentId, parentReplyIndex);
    });
}

// Add reply from modal
function addReplyFromModal(commentId) {
    const input = document.getElementById('modalCommentInput');
    const content = input.value.trim();
    
    if (!content) return;
    
    // Disable input and show loading state
    input.disabled = true;
    
    fetch(`/comment/${commentId}/reply`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ content })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to add reply');
        }
        return response.json();
    })
    .then(data => {
        if (data.error) {
            showToast(data.error, 'error');
        } else {
            // Clear input
            input.value = '';
            
            // Refresh comments
            showComments(currentPostIdForComments);
            
            // Show success toast with comment type and showOnlyImportant set to true
            showToast('Reply added successfully', 'reply', true);
        }
    })
    .catch(error => {
        console.error('Error adding reply:', error);
        showToast('Failed to add reply', 'error');
    })
    .finally(() => {
        // Re-enable input
        input.disabled = false;
    });
}

// Add this code for hiding the story section on scroll
document.addEventListener('DOMContentLoaded', function() {
    // No longer hiding the story section - it will scroll with the page
    const storySection = document.querySelector('.story-section');
    if (storySection) {
        // Reset any previously applied styles
        storySection.style.transform = '';
        storySection.style.opacity = '1';
        storySection.style.transition = 'none';
    }
});
</script>

<!-- Story Preview Modal -->
<div id="storyPreviewModal" class="hidden fixed inset-0 bg-black bg-opacity-80 z-50 flex items-center justify-center backdrop-blur-sm">
    <div class="relative w-full max-w-md bg-white dark:bg-gray-900 rounded-lg shadow-xl overflow-hidden">
        <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
            <h2 class="font-semibold text-gray-800 dark:text-white">Preview Story</h2>
            <button onclick="closeStoryPreview()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div id="storyPreviewContainer" class="w-full aspect-square bg-gray-100 dark:bg-gray-800">
            <!-- Preview will be shown here -->
        </div>
        <div class="p-4 flex justify-between">
            <button onclick="closeStoryPreview()" class="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-800 rounded-lg">
                Cancel
            </button>
            <button onclick="uploadStory()" class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg">
                Share to Story
            </button>
        </div>
    </div>
</div>

<%- include('partials/footer') %>

<script>
    // Make sure we have the latest image in the preview
    previewContent.innerHTML = this.value.replace(/\n/g, '<br>');
});

    }
});
</script>

