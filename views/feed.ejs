<%- include('partials/header') %>

<!-- Add this near the top of the body -->
<div id="toast" class="fixed top-4 right-4 z-50 transform transition-transform duration-300 translate-x-full">
    <div class="bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg flex items-center">
        <span class="mr-2"><i class="fas fa-check-circle"></i></span>
        <span id="toast-message"></span>
    </div>
</div>

<!-- Search Bar -->
<div class="max-w-4xl mx-auto mt-6 px-4">
    <div class="bg-white dark:bg-black rounded-lg shadow-md overflow-hidden mb-6">
        <form action="/search" method="GET" class="flex items-center p-2">
            <div class="relative flex-grow">
                <input type="text" 
                       name="q" 
                       placeholder="Search users..." 
                       class="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-700 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-white">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400"></i>
                </div>
            </div>
            <button type="submit" class="ml-2 px-4 py-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 flex-shrink-0">
                Search
            </button>
        </form>
    </div>
</div>

<!-- Stories Section -->
<div class="max-w-4xl mx-auto mt-8 px-4">
    <!-- Stories Section -->
    <div class="bg-white rounded-lg shadow-md p-4 mb-8 overflow-x-auto">
        <div class="flex space-x-4">
            <!-- Add Story Button -->
            <div class="flex-shrink-0 text-center">
                <label class="cursor-pointer block">
                    <div class="w-16 h-16 rounded-full bg-gray-100 flex items-center justify-center border-2 border-dashed border-blue-500 hover:bg-gray-200 transition-colors">
                        <i class="fas fa-plus text-blue-500"></i>
                    </div>
                    <input type="file" 
                           id="storyInput" 
                           class="hidden" 
                           accept="image/*,video/*" 
                           onchange="uploadStory(event)">
                    <p class="text-xs mt-1 text-gray-600">Add Story</p>
                </label>
            </div>

            <!-- Stories List -->
            <div id="storiesList" class="flex space-x-4">
                <!-- Stories will be loaded dynamically -->
            </div>
        </div>
    </div>

    <!-- Create Post Card -->
    <div class="bg-white rounded-lg shadow-md p-4 mb-8">
        <div class="flex items-center space-x-4">
            <img src="<%= user.profileImage %>" 
                 alt="Profile" 
                 class="w-10 h-10 rounded-full object-cover">
            <button onclick="openCreatePostModal()" 
                    class="flex-1 px-4 py-2 bg-gray-100 rounded-full text-left text-gray-500 hover:bg-gray-200 transition-colors">
                What's on your mind, <%= user.name.split(' ')[0] %>?
            </button>
        </div>
        <div class="flex justify-around mt-4 pt-4 border-t">
            <button onclick="openCreatePostModal()" 
                    class="flex items-center space-x-2 text-gray-600 hover:text-gray-800">
                <i class="fas fa-image text-green-500"></i>
                <span>Photo/Video</span>
            </button>
            <button onclick="openCreatePostModal()" 
                    class="flex items-center space-x-2 text-gray-600 hover:text-gray-800">
                <i class="fas fa-smile text-yellow-500"></i>
                <span>Feeling/Activity</span>
            </button>
            <button onclick="openCreatePostModal()" 
                    class="flex items-center space-x-2 text-gray-600 hover:text-gray-800">
                <i class="fas fa-map-marker-alt text-red-500"></i>
                <span>Location</span>
            </button>
        </div>
    </div>

    <!-- Posts Feed -->
    <div class="space-y-8">
        <% posts.forEach(post => { 
            // Additional safety check to filter out posts with null users at template level
            if (!post || !post.user) {
                return; // Skip this post entirely
            }
        %>
            <div class="bg-white dark:bg-black rounded-lg shadow-md overflow-hidden transform hover:shadow-lg transition-shadow duration-200 post-container">
                <!-- Post Header -->
                <div class="p-4 flex items-center justify-between">
                    <a href="/user/<%= post.user.username %>" class="flex items-center group">
                        <div class="relative">
                            <img src="<%= post.user.profileImage %>" 
                                 alt="Profile" 
                                 class="w-10 h-10 rounded-full object-cover group-hover:opacity-90">
                            <div class="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white dark:border-gray-700"></div>
                        </div>
                        <div class="ml-3">
                            <h5 class="font-semibold text-gray-800 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400"><%= post.user.name %></h5>
                            <p class="text-xs text-gray-500 dark:text-gray-400">@<%= post.user.username %></p>
                        </div>
                    </a>
                    <div class="flex space-x-2">
                        <button onclick="showPostOptions('<%= post._id %>')" class="text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-400">
                            <i class="fas fa-ellipsis-h"></i>
                        </button>
                    </div>
                </div>

                <!-- Images -->
                <% if (post.images && post.images.length > 0) { %>
                    <div class="relative post-image" ondblclick="handleDoubleTap('<%= post._id %>')">
                        <div class="swiper-container">
                            <div class="swiper-wrapper">
                                <% post.images.forEach(image => { %>
                                    <div class="swiper-slide">
                                        <img src="<%= image.url %>" 
                                             alt="Post image"
                                             class="w-full object-cover post-img md:max-h-[600px] h-auto aspect-square md:aspect-auto">
                                    </div>
                                <% }) %>
                            </div>
                            <% if (post.images.length > 1) { %>
                                <div class="swiper-pagination"></div>
                                <div class="swiper-button-next"></div>
                                <div class="swiper-button-prev"></div>
                                <div class="absolute bottom-4 right-4 bg-black/50 text-white text-xs px-2 py-1 rounded-full z-10">
                                    <span class="current-slide">1</span>/<%= post.images.length %>
                                </div>
                            <% } %>
                        </div>
                        <div class="heart-animation hidden">
                            <i class="fas fa-heart"></i>
                        </div>
                    </div>
                <% } %>

                <!-- Post Content -->
                <div class="p-4">
                    <!-- Actions -->
                    <div class="flex items-center justify-between mb-4">
                        <div class="flex items-center space-x-4">
                            <button onclick="toggleLike('<%= post._id %>')" 
                                    id="like-btn-<%= post._id %>"
                                    class="like-btn <%= post.likes.some(id => id.toString() === user._id.toString()) ? 'text-red-500' : 'text-gray-500' %> hover:scale-110 transform transition-transform">
                                <i class="fas fa-heart text-2xl"></i>
                                <span class="like-count ml-1 text-sm"><%= post.likes.length %></span>
                            </button>
                            <button onclick="focusComment('<%= post._id %>')" 
                                    class="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:scale-110 transform transition-transform">
                                <i class="fas fa-comment text-2xl"></i>
                                <span class="ml-1 text-sm"><%= post.comments.length %></span>
                            </button>
                            <button onclick="sharePost('<%= post._id %>')" 
                                    class="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:scale-110 transform transition-transform">
                                <i class="fas fa-share text-2xl"></i>
                            </button>
                        </div>
                        <button onclick="toggleSavePost('<%= post._id %>')"
                                id="save-btn-<%= post._id %>"
                                class="save-btn <%= user.savedPosts && user.savedPosts.includes(post._id) ? 'text-blue-500' : 'text-gray-500' %> dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:scale-110 transform transition-transform">
                            <i class="fas fa-bookmark text-2xl"></i>
                        </button>
                    </div>

                    <h3 class="font-semibold text-lg mb-2 text-gray-800 dark:text-white"><%= post.title %></h3>
                    <p class="text-gray-700 dark:text-gray-300 mb-2"><%= post.content %></p>
                    
                    <!-- Post Metadata -->
                    <div class="text-xs text-gray-500 dark:text-gray-400 mb-4">
                        <span><%= new Date(post.createdAt).toLocaleDateString('en-US', { month: 'long', day: 'numeric' }) %></span>
                        • <span><%= post.likes.length %> likes</span>
                        • <span><%= post.comments.length %> comments</span>
                    </div>

                    <!-- Comments Section -->
                    <%- include('partials/comments', { post, user }) %>
                </div>
            </div>
        <% }) %>
    </div>

    <!-- Loading Spinner -->
    <div class="flex justify-center my-8">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
    </div>
</div>

<!-- Story Viewer Modal -->
<div id="storyModal" class="hidden fixed inset-0 bg-black z-50">
    <div class="relative h-full flex justify-center">
        <!-- Mobile-like container with fixed aspect ratio -->
        <div class="h-full aspect-[9/16] bg-black relative max-w-[500px] w-full">
            <!-- Touch areas for navigation -->
            <div class="absolute inset-0 z-10 flex">
                <div class="w-1/2 h-full" onclick="showPreviousStory()"></div>
                <div class="w-1/2 h-full" onclick="showNextStory()"></div>
            </div>
            
            <button onclick="closeStoryModal()" class="absolute top-4 right-4 text-white text-2xl z-20">
                <i class="fas fa-times"></i>
            </button>
            
            <div class="h-full flex items-center justify-center bg-black">
                <div id="storyImage" class="w-full h-full relative">
                    <!-- Media will be inserted here -->
                </div>
            </div>

            <!-- Story Progress Bar -->
            <div class="absolute top-0 left-0 right-0 h-1 bg-gray-700 z-20">
                <div id="storyProgress" class="h-full bg-white w-0 transition-all duration-100"></div>
            </div>

            <!-- Story User Info -->
            <div class="absolute top-4 left-4 flex items-center z-20">
                <img id="storyUserImage" src="" alt="Profile" class="w-8 h-8 rounded-full object-cover">
                <div class="ml-2 text-white">
                    <p id="storyUsername" class="font-semibold text-sm"></p>
                    <p id="storyTime" class="text-xs opacity-75"></p>
                </div>
            </div>

            <!-- Story Reply Section -->
            <div class="absolute bottom-4 left-4 right-4 z-20">
                <form onsubmit="replyToStory(event)" class="flex items-center gap-2">
                    <input type="text" 
                           id="storyReplyInput"
                           placeholder="Reply to story..." 
                           class="flex-1 px-4 py-2 rounded-full bg-white/10 text-white placeholder-white/70 backdrop-blur-sm border border-white/20 focus:outline-none focus:ring-2 focus:ring-white/50">
                    <button type="submit" 
                            class="px-4 py-2 rounded-full bg-white/10 text-white backdrop-blur-sm border border-white/20 hover:bg-white/20">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                    <!-- Delete Story Button (Only visible for story owner) -->
                    <button id="deleteStoryBtn" 
                            onclick="deleteCurrentStory()" 
                            class="hidden px-4 py-2 rounded-full bg-white/10 text-white backdrop-blur-sm border border-white/20 hover:bg-red-500/50">
                        <i class="fas fa-trash"></i>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Share Modal -->
<div id="shareModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
    <div class="bg-white dark:bg-gray-800 rounded-lg max-w-md w-full mx-4">
        <div class="p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Share Post</h3>
        </div>
        <div class="p-4">
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Share with (username)</label>
                <input type="text" 
                       id="shareUsername" 
                       class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                       placeholder="Enter username">
            </div>
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Message (optional)</label>
                <textarea id="shareMessage" 
                          class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                          rows="3" 
                          placeholder="Add a message..."></textarea>
            </div>
            <div class="flex justify-end space-x-3">
                <button onclick="closeShareModal()" 
                        class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
                    Cancel
                </button>
                <button onclick="confirmShare()" 
                        class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
                    Share
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Post Options Modal -->
<div id="postOptionsModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4 overflow-hidden">
        <div class="p-4">
            <button class="w-full text-left py-3 px-4 hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-800 dark:text-white rounded-md">
                <i class="fas fa-link mr-2 text-gray-600 dark:text-gray-400"></i> Copy link
            </button>
            <button class="w-full text-left py-3 px-4 hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-800 dark:text-white rounded-md">
                <i class="fas fa-flag mr-2 text-gray-600 dark:text-gray-400"></i> Report post
            </button>
            <button class="w-full text-left py-3 px-4 hover:bg-gray-100 dark:hover:bg-gray-800 text-red-600 rounded-md">
                <i class="fas fa-ban mr-2"></i> Unfollow user
            </button>
            <button onclick="closePostOptionsModal()" class="w-full text-center py-3 px-4 text-gray-800 dark:text-white font-medium border-t border-gray-200 dark:border-gray-700 mt-2">
                Cancel
            </button>
        </div>
    </div>
</div>

<!-- Add Swiper JS for image carousel -->
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>

<style>
/* Custom Scrollbar */
::-webkit-scrollbar {
    width: 8px;
    height: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: #555;
}

/* Swiper Customization */
.swiper-button-next,
.swiper-button-prev {
    color: white !important;
    background: rgba(0, 0, 0, 0.3);
    padding: 20px;
    border-radius: 50%;
    width: 40px !important;
    height: 40px !important;
}

.swiper-pagination-bullet {
    background: white !important;
    opacity: 0.8 !important;
}

.swiper-pagination-bullet-active {
    background: #3B82F6 !important;
}

/* Animations */
@keyframes like-animation {
    0% { transform: scale(0); opacity: 0; }
    15% { transform: scale(1.5); opacity: 1; }
    30% { transform: scale(0.8); opacity: 1; }
    45% { transform: scale(1.2); opacity: 1; }
    60% { transform: scale(0.9); opacity: 1; }
    75% { transform: scale(1.1); opacity: 1; }
    100% { transform: scale(1); opacity: 0; }
}

.heart-animation {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 120px;
    color: white;
    text-shadow: 0 0 30px rgba(0,0,0,0.4);
    pointer-events: none;
    z-index: 10;
    opacity: 0;
}

.heart-animation.active {
    animation: like-animation 1s ease-in-out forwards;
}

.like-btn {
    transition: transform 0.2s, color 0.2s;
}

.like-btn.liked {
    animation: like-button-animation 0.3s ease-in-out;
}

@keyframes like-button-animation {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1); }
}

/* Add this to your existing styles */
.ring-gradient-to-tr {
    background: linear-gradient(to right, #fbbf24, #d946ef);
}

.story-progress {
    transition: width 30ms linear;
}

/* Story viewer animations */
.story-enter {
    animation: slideIn 0.3s ease-out;
}

.story-exit {
    animation: slideOut 0.3s ease-in;
}

@keyframes slideIn {
    from { transform: translateX(100%); }
    to { transform: translateX(0); }
}

@keyframes slideOut {
    from { transform: translateX(0); }
    to { transform: translateX(-100%); }
}

/* Add these styles */
@keyframes rotate {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.story-ring {
    background: linear-gradient(45deg, #f09433 0%, #e6683c 25%, #dc2743 50%, #cc2366 75%, #bc1888 100%);
}

.story-ring-viewed {
    background: #ccc;
}

/* Add these styles */
.story-container {
    max-height: 100vh;
    height: 100%;
    aspect-ratio: 9/16;
    margin: 0 auto;
    position: relative;
    background: #000;
}

@media (min-width: 500px) {
    .story-container {
        max-width: 500px;
    }
}

.story-media {
    width: 100%;
    height: 100%;
    object-fit: contain;
    background: #000;
}

/* Story viewer overlay gradient */
.story-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 25%;
    background: linear-gradient(to bottom, 
        rgba(0,0,0,0.5) 0%,
        rgba(0,0,0,0) 100%);
    pointer-events: none;
}

/* Story progress bar animation */
.story-progress {
    transition: width 30ms linear;
}

/* Add smooth fade transitions */
.story-fade-enter {
    opacity: 0;
    transform: scale(0.95);
}

.story-fade-enter-active {
    opacity: 1;
    transform: scale(1);
    transition: opacity 300ms, transform 300ms;
}

.story-fade-exit {
    opacity: 1;
    transform: scale(1);
}

.story-fade-exit-active {
    opacity: 0;
    transform: scale(0.95);
    transition: opacity 300ms, transform 300ms;
}
</style>

<script>
const socket = io();

socket.on('connect', () => {
    console.log('Socket connected');
});

socket.on('newStory', (data) => {
    console.log('New story received:', data); // Debug log
    stories.unshift(data.story);
    renderStories();
});

// Listen for new posts
socket.on('newPost', (data) => {
    const postHTML = createPostHTML(data.post);
    const feedContainer = document.querySelector('.space-y-8');
    feedContainer.insertAdjacentHTML('beforeend', postHTML);
    
    // Initialize Swiper for the new post if it has images
    if (data.post.images && data.post.images.length > 0) {
        const newPostContainer = feedContainer.lastElementChild;
        const swiper = new Swiper(newPostContainer.querySelector('.swiper-container'), {
            pagination: {
                el: '.swiper-pagination',
            },
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },
        });
    }
});

function createPostHTML(post) {
    const imagesHTML = post.images && post.images.length > 0 ? `
        <div class="relative post-image" ondblclick="handleDoubleTap('${post._id}')">
            <div class="swiper-container">
                <div class="swiper-wrapper">
                    ${post.images.map(image => `
                        <div class="swiper-slide">
                            <img src="${image.url}" 
                                 alt="Post image"
                                 class="w-full object-cover post-img md:max-h-[600px] h-auto aspect-square md:aspect-auto">
                        </div>
                    `).join('')}
                </div>
                ${post.images.length > 1 ? `
                    <div class="swiper-pagination"></div>
                    <div class="swiper-button-next"></div>
                    <div class="swiper-button-prev"></div>
                    <div class="absolute bottom-4 right-4 bg-black/50 text-white text-xs px-2 py-1 rounded-full z-10">
                        <span class="current-slide">1</span>/${post.images.length}
                    </div>
                ` : ''}
            </div>
            <div class="heart-animation hidden">
                <i class="fas fa-heart"></i>
            </div>
        </div>
    ` : '';

    return `
        <div class="bg-white dark:bg-black rounded-lg shadow-md overflow-hidden transform hover:shadow-lg transition-shadow duration-200 post-container">
            <div class="p-4 flex items-center justify-between">
                <a href="/user/${post.user.username}" class="flex items-center group">
                    <div class="relative">
                        <img src="${post.user.profileImage}" 
                             alt="Profile" 
                             class="w-10 h-10 rounded-full object-cover group-hover:opacity-90">
                        <div class="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white dark:border-gray-700"></div>
                    </div>
                    <div class="ml-3">
                        <h5 class="font-semibold text-gray-800 dark:text-white group-hover:text-blue-600">${post.user.name}</h5>
                        <p class="text-xs text-gray-500 dark:text-gray-400">@${post.user.username}</p>
                    </div>
                </a>
                <div class="flex space-x-2">
                    <button onclick="showPostOptions('${post._id}')" class="text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-400">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>
                </div>
            </div>

            ${imagesHTML}

            <div class="p-4">
                <div class="flex items-center justify-between mb-4">
                    <div class="flex items-center space-x-4">
                        <button onclick="toggleLike('${post._id}')" 
                                id="like-btn-${post._id}"
                                class="like-btn text-gray-500 hover:scale-110 transform transition-transform">
                            <i class="fas fa-heart text-2xl"></i>
                            <span class="like-count ml-1 text-sm">0</span>
                        </button>
                        <button onclick="focusComment('${post._id}')" 
                                class="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:scale-110 transform transition-transform">
                            <i class="fas fa-comment text-2xl"></i>
                            <span class="ml-1 text-sm">0</span>
                        </button>
                        <button onclick="sharePost('${post._id}')" 
                                class="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:scale-110 transform transition-transform">
                            <i class="fas fa-share text-2xl"></i>
                        </button>
                    </div>
                    <button onclick="toggleSavePost('${post._id}')"
                            id="save-btn-${post._id}"
                            class="save-btn text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:scale-110 transform transition-transform">
                        <i class="fas fa-bookmark text-2xl"></i>
                    </button>
                </div>

                <h3 class="font-semibold text-lg mb-2 text-gray-800 dark:text-white">${post.title}</h3>
                <p class="text-gray-700 dark:text-gray-300 mb-2">${post.content}</p>
                
                <div class="text-xs text-gray-500 dark:text-gray-400 mb-4">
                    <span>${new Date(post.createdAt).toLocaleDateString('en-US', { month: 'long', day: 'numeric' })}</span>
                    • <span>0 likes</span>
                    • <span>0 comments</span>
                </div>

                <div class="mt-4 border-t pt-4">
                    <form class="mb-4 flex gap-2" onsubmit="addComment(event, '${post._id}')">
                        <input type="text" 
                               id="comment-input-${post._id}"
                               placeholder="Write a comment..." 
                               class="flex-1 px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-700 dark:text-white"
                               required>
                        <button type="submit" 
                                class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
                            Comment
                        </button>
                    </form>
                    <div class="space-y-4 comments-section" data-post-id="${post._id}"></div>
                </div>
            </div>
        </div>
    `;
}

document.addEventListener('DOMContentLoaded', () => {
    const swipers = document.querySelectorAll('.swiper-container');
    swipers.forEach((container, index) => {
        const swiper = new Swiper(container, {
            pagination: {
                el: '.swiper-pagination',
                dynamicBullets: true,
            },
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },
            grabCursor: true,
            slideToClickedSlide: true,
            keyboard: {
                enabled: true,
            },
            on: {
                slideChange: function() {
                    const currentSlideIndicator = container.querySelector('.current-slide');
                    if (currentSlideIndicator) {
                        currentSlideIndicator.textContent = this.activeIndex + 1;
                    }
                }
            }
        });
    });
    
    // Adjust image heights for better consistency
    const adjustPostImageHeights = () => {
        const postImages = document.querySelectorAll('.post-img');
        
        if (window.innerWidth >= 768) { // md breakpoint in Tailwind
            postImages.forEach(img => {
                const postWidth = img.offsetWidth;
                // Use a more reasonable height for desktop view (max 600px)
                img.style.maxHeight = '600px';
            });
        } else {
            // On mobile, use square aspect ratio
            postImages.forEach(img => {
                img.style.height = img.offsetWidth + 'px';
            });
        }
    };
    
    // Run once on load
    adjustPostImageHeights();
    
    // Update on window resize
    window.addEventListener('resize', adjustPostImageHeights);
});

// Add infinite scroll
let loading = false;
let page = 1;

window.addEventListener('scroll', () => {
    if (loading) return;
    
    if (window.innerHeight + window.scrollY >= document.documentElement.scrollHeight - 100) {
        loadMorePosts();
    }
});

async function loadMorePosts() {
    loading = true;
    page++;
    
    try {
        const response = await fetch(`/feed?page=${page}`);
        const data = await response.json();
        
        if (data.posts.length > 0) {
            // Append new posts
            const feedContainer = document.querySelector('.space-y-8');
            data.posts.forEach(post => {
                feedContainer.insertAdjacentHTML('beforeend', createPostHTML(post));
            });
            
            // Initialize Swiper for new posts
            initializeSwipers();
        }
    } catch (error) {
        console.error('Error loading more posts:', error);
    } finally {
        loading = false;
    }
}

// Add smooth animations for likes
function toggleLike(postId) {
    fetch(`/post/${postId}/like`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        const likeBtn = document.getElementById(`like-btn-${postId}`);
        const likeCount = likeBtn.querySelector('.like-count');
        
        if (data.isLiked) {
            likeBtn.classList.remove('text-gray-500');
            likeBtn.classList.add('text-red-500');
            likeBtn.classList.add('liked');
            setTimeout(() => likeBtn.classList.remove('liked'), 300);
        } else {
            likeBtn.classList.remove('text-red-500');
            likeBtn.classList.add('text-gray-500');
        }
        
        likeCount.textContent = data.likes;
    })
    .catch(error => console.error('Error:', error));
}

// Add these variables at the top of your script
let currentStory = null;
let storyInterval;
let isPaused = false;

// Update the viewStory function
function viewStory(index) {
    isPaused = false;
    currentStoryIndex = index;
    currentStory = stories[index];
    const modal = document.getElementById('storyModal');
    const mediaContainer = document.getElementById('storyImage');
    const userImage = document.getElementById('storyUserImage');
    const username = document.getElementById('storyUsername');
    const timeElement = document.getElementById('storyTime');
    const deleteButton = document.getElementById('deleteStoryBtn');

    // Show delete button only if the story belongs to current user
    if (currentStory.user._id === '<%= user._id %>') {
        deleteButton.classList.remove('hidden');
    } else {
        deleteButton.classList.add('hidden');
    }

    // Clear previous media
    mediaContainer.innerHTML = '';

    // Create appropriate media element
    const mediaElement = currentStory.media.type === 'video' 
        ? document.createElement('video')
        : document.createElement('img');

    mediaElement.src = currentStory.media.url;
    mediaElement.className = 'w-full h-full object-contain';
    
    if (mediaElement.tagName === 'VIDEO') {
        mediaElement.controls = false; // Hide default controls
        mediaElement.autoplay = true;
        mediaElement.muted = false;
        mediaElement.loop = false;
        mediaElement.playsInline = true;
    }

    mediaContainer.appendChild(mediaElement);
    userImage.src = currentStory.user.profileImage || '/images/default-profile.png';
    username.textContent = currentStory.user.username;
    timeElement.textContent = getTimeAgo(new Date(currentStory.createdAt));

    modal.classList.remove('hidden');
    startStoryProgress();
    markStoryAsViewed(currentStory._id);
}

// Add story reply function
async function replyToStory(event) {
    event.preventDefault();
    
    const replyInput = document.getElementById('storyReplyInput');
    const replyText = replyInput.value.trim();
    
    if (!replyText || !currentStory) return;

    try {
        const response = await fetch(`/story/${currentStory._id}/reply`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ content: replyText })
        });

        if (response.ok) {
            // Clear input
            replyInput.value = '';
            
            // Show success message
            const successMsg = document.createElement('div');
            successMsg.className = 'absolute bottom-20 left-1/2 transform -translate-x-1/2 bg-white/80 text-black px-4 py-2 rounded-full backdrop-blur-sm';
            successMsg.textContent = 'Reply sent!';
            document.getElementById('storyModal').appendChild(successMsg);
            setTimeout(() => successMsg.remove(), 2000);
        }
    } catch (error) {
        console.error('Error sending reply:', error);
        alert('Failed to send reply. Please try again.');
    }
}

// Add at the top of your script section
let stories = [];
let currentStoryIndex = 0;

// Function to load stories
async function loadStories() {
    try {
        const response = await fetch('/stories');
        stories = await response.json();
        console.log('Loaded stories:', stories); // Debug log
        renderStories();
    } catch (error) {
        console.error('Error loading stories:', error);
    }
}

// Function to render stories
function renderStories() {
    const storiesList = document.getElementById('storiesList');
    storiesList.innerHTML = '';

    stories.forEach((story, index) => {
        const hasViewed = story.viewers.some(viewer => viewer.user === '<%= user._id %>');
        const storyHTML = `
            <div class="flex-shrink-0 text-center">
                <div onclick="viewStory(${index})" 
                     class="relative w-16 h-16 cursor-pointer hover:scale-105 transition-transform">
                    <div class="absolute inset-0 rounded-full ${hasViewed ? 'bg-gray-300' : 'bg-gradient-to-tr from-yellow-400 to-fuchsia-600'} p-[2px]">
                        <div class="w-full h-full rounded-full bg-white p-[2px]">
                            <img src="${story.user.profileImage || '/images/default-profile.png'}" 
                                 alt="${story.user.username}'s story" 
                                 class="w-full h-full rounded-full object-cover">
                        </div>
                    </div>
                </div>
                <p class="text-xs mt-1 text-gray-600">${story.user.username}</p>
            </div>
        `;
        storiesList.insertAdjacentHTML('beforeend', storyHTML);
    });
}

// Function to upload story
async function uploadStory(event) {
    const file = event.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('story', file);

    try {
        const response = await fetch('/story', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (response.ok) {
            // Immediately add the new story to the list
            stories.unshift(data.story);
            renderStories();
            
            // Show success message
            const successMsg = document.createElement('div');
            successMsg.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50';
            successMsg.textContent = 'Story uploaded successfully!';
            document.body.appendChild(successMsg);
            setTimeout(() => successMsg.remove(), 3000);
        } else {
            throw new Error(data.error || 'Failed to upload story');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error uploading story: ' + error.message);
    }
}

// Listen for new stories
socket.on('newStory', (data) => {
    stories.unshift(data.story);
    renderStories();
});

// Function to mark story as viewed
async function markStoryAsViewed(storyId) {
    try {
        await fetch(`/story/${storyId}/view`, {
            method: 'POST'
        });
    } catch (error) {
        console.error('Error marking story as viewed:', error);
    }
}

// Function to get time ago
function getTimeAgo(date) {
    const seconds = Math.floor((new Date() - date) / 1000);
    if (seconds < 60) return 'just now';
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes}m ago`;
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours}h ago`;
    return 'yesterday';
}

// Load stories when page loads
loadStories();

// Update stories every minute to refresh timestamps
setInterval(loadStories, 60000);

function startStoryProgress() {
    const progressBar = document.getElementById('storyProgress');
    progressBar.style.width = '0%';
    
    let width = 0;
    clearInterval(storyInterval); // Clear any existing interval
    
    storyInterval = setInterval(() => {
        if (!isPaused) {
            width += 1;
            progressBar.style.width = width + '%';
            
            if (width >= 100) {
                clearInterval(storyInterval);
                showNextStory();
            }
        }
    }, 30); // 3 seconds total duration
}

function showNextStory() {
    if (currentStoryIndex < stories.length - 1) {
        viewStory(currentStoryIndex + 1);
    } else {
        closeStoryModal();
    }
}

function closeStoryModal() {
    document.getElementById('storyModal').classList.add('hidden');
    clearInterval(storyInterval);
    isPaused = false;
    const video = document.querySelector('#storyImage video');
    if (video) {
        video.pause();
    }
}

// Add touch/swipe support for stories
let touchStartX = 0;
document.getElementById('storyModal').addEventListener('touchstart', (e) => {
    touchStartX = e.touches[0].clientX;
    pauseStory();
});

document.getElementById('storyModal').addEventListener('touchend', (e) => {
    const touchEndX = e.changedTouches[0].clientX;
    const diff = touchStartX - touchEndX;

    if (Math.abs(diff) > 50) { // Minimum swipe distance
        if (diff > 0 && currentStoryIndex < stories.length - 1) {
            // Swipe left - next story
            viewStory(currentStoryIndex + 1);
        } else if (diff < 0 && currentStoryIndex > 0) {
            // Swipe right - previous story
            viewStory(currentStoryIndex - 1);
        }
    }
    resumeStory();
});

// Add mouse event listeners for desktop
document.getElementById('storyModal').addEventListener('mousedown', pauseStory);
document.getElementById('storyModal').addEventListener('mouseup', resumeStory);
document.getElementById('storyModal').addEventListener('mouseleave', resumeStory);

// Add keyboard controls
document.addEventListener('keydown', (e) => {
    if (!document.getElementById('storyModal').classList.contains('hidden')) {
        switch(e.key) {
            case 'ArrowLeft':
                showPreviousStory();
                break;
            case 'ArrowRight':
                showNextStory();
                break;
            case 'Escape':
                closeStoryModal();
                break;
            case ' ': // Spacebar
                e.preventDefault();
                if (isPaused) {
                    resumeStory();
                } else {
                    pauseStory();
                }
                break;
        }
    }
});

// Add previous story function
function showPreviousStory() {
    if (currentStoryIndex > 0) {
        viewStory(currentStoryIndex - 1);
    }
}

// Add pause and resume functions
function pauseStory() {
    isPaused = true;
    const mediaElement = document.querySelector('#storyImage video, #storyImage img');
    if (mediaElement && mediaElement.tagName === 'VIDEO') {
        mediaElement.pause();
    }
}

function resumeStory() {
    isPaused = false;
    const mediaElement = document.querySelector('#storyImage video, #storyImage img');
    if (mediaElement && mediaElement.tagName === 'VIDEO') {
        mediaElement.play();
    }
}

// Like functionality
function toggleLike(postId) {
    fetch(`/post/${postId}/like`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        const likeBtn = document.getElementById(`like-btn-${postId}`);
        const likeCount = likeBtn.querySelector('.like-count');
        
        if (data.isLiked) {
            likeBtn.classList.remove('text-gray-500');
            likeBtn.classList.add('text-red-500');
            likeBtn.classList.add('liked');
            setTimeout(() => likeBtn.classList.remove('liked'), 300);
        } else {
            likeBtn.classList.remove('text-red-500');
            likeBtn.classList.add('text-gray-500');
        }
        
        likeCount.textContent = data.likes;
    })
    .catch(error => console.error('Error:', error));
}

// Double tap to like
function handleDoubleTap(postId) {
    const likeBtn = document.getElementById(`like-btn-${postId}`);
    const imgContainer = event.currentTarget;
    const heartAnimation = imgContainer.querySelector('.heart-animation');
    
    // Only like if not already liked
    if (!likeBtn.classList.contains('text-red-500')) {
        toggleLike(postId);
        
        // Show heart animation
        heartAnimation.classList.remove('hidden');
        heartAnimation.classList.add('active');
        setTimeout(() => {
            heartAnimation.classList.add('hidden');
            heartAnimation.classList.remove('active');
        }, 1000);
    }
}

// Focus on comment input
function focusComment(postId) {
    const commentInput = document.querySelector(`#comment-input-${postId}`);
    if (commentInput) {
        commentInput.focus();
    }
}

// Save post functionality
function toggleSavePost(postId) {
    fetch(`/post/${postId}/save`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        const saveBtn = document.getElementById(`save-btn-${postId}`);
        
        if (data.saved) {
            saveBtn.classList.remove('text-gray-500');
            saveBtn.classList.add('text-blue-500');
        } else {
            saveBtn.classList.remove('text-blue-500');
            saveBtn.classList.add('text-gray-500');
        }
    })
    .catch(error => console.error('Error:', error));
}

// Share post functionality
let currentPostId = null;
let selectedUserId = null;

function showToast(message) {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    toastMessage.textContent = message;
    
    // Show toast
    toast.classList.remove('translate-x-full');
    
    // Hide after 3 seconds
    setTimeout(() => {
        toast.classList.add('translate-x-full');
    }, 3000);
}

function sharePost(postId) {
    currentPostId = postId;
    document.getElementById('shareModal').classList.remove('hidden');
    document.getElementById('shareUsername').value = '';
    document.getElementById('shareMessage').value = '';
}

function closeShareModal() {
    document.getElementById('shareModal').classList.add('hidden');
    currentPostId = null;
}

function confirmShare() {
    const username = document.getElementById('shareUsername').value.trim();
    const message = document.getElementById('shareMessage').value.trim();
    
    if (!username) {
        showToast('Please enter a username to share with');
        return;
    }
    
    fetch(`/post/${currentPostId}/share`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ username, message })
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            showToast(data.error);
        } else {
            showToast('Post shared successfully!');
            closeShareModal();
        }
    })
    .catch(error => {
        console.error('Error sharing post:', error);
        showToast('Failed to share post. Please try again.');
    });
}

// Post options modal
function showPostOptions(postId) {
    document.getElementById('postOptionsModal').classList.remove('hidden');
}

function closePostOptionsModal() {
    document.getElementById('postOptionsModal').classList.add('hidden');
}

// User search for share functionality
document.getElementById('shareRecipient').addEventListener('input', function(e) {
    const query = e.target.value.trim();
    const userResults = document.getElementById('userResults');
    
    if (query.length < 2) {
        userResults.classList.add('hidden');
        return;
    }
    
    fetch(`/search?q=${encodeURIComponent(query)}&format=json`)
        .then(response => response.json())
        .then(data => {
            userResults.innerHTML = '';
            
            if (data.users && data.users.length > 0) {
                data.users.forEach(user => {
                    const userItem = document.createElement('div');
                    userItem.className = 'flex items-center p-2 hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer';
                    userItem.innerHTML = `
                        <img src="${user.profileImage}" alt="${user.name}" class="w-8 h-8 rounded-full mr-2">
                        <div>
                            <div class="font-semibold text-gray-800 dark:text-white">${user.name}</div>
                            <div class="text-xs text-gray-500 dark:text-gray-400">@${user.username}</div>
                        </div>
                    `;
                    userItem.addEventListener('click', function() {
                        document.getElementById('share-username-${postId}').value = user.username;
                        selectedUserId = user._id;
                        userResults.classList.add('hidden');
                    });
                    userResults.appendChild(userItem);
                });
                userResults.classList.remove('hidden');
            } else {
                userResults.innerHTML = '<div class="p-2 text-gray-500 dark:text-gray-400">No users found</div>';
                userResults.classList.remove('hidden');
            }
        })
        .catch(error => console.error('Error:', error));
});

// Close modals when clicking outside
window.addEventListener('click', function(event) {
    const shareModal = document.getElementById('shareModal');
    const postOptionsModal = document.getElementById('postOptionsModal');
    
    if (event.target === shareModal) {
        closeShareModal();
    }
    
    if (event.target === postOptionsModal) {
        closePostOptionsModal();
    }
});

// Add these functions to your script section
async function deleteCurrentStory() {
    if (!currentStory) return;

    try {
        const response = await fetch(`/story/${currentStory._id}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            // Remove story from array
            stories = stories.filter(story => story._id !== currentStory._id);
            // Close modal and re-render stories
            closeStoryModal();
            renderStories();
        }
    } catch (error) {
        console.error('Error:', error);
    }
}

// Add double tap detection
document.addEventListener('DOMContentLoaded', () => {
    // Setup double tap detection on post images
    const postImages = document.querySelectorAll('.post-image');
    postImages.forEach(img => {
        let lastTap = 0;
        img.addEventListener('touchend', function(e) {
            const currentTime = new Date().getTime();
            const tapLength = currentTime - lastTap;
            if (tapLength < 500 && tapLength > 0) {
                // Double tap detected
                const postId = img.closest('.post-container').querySelector('.like-btn').id.replace('like-btn-', '');
                handleDoubleTap(postId);
                e.preventDefault();
            }
            lastTap = currentTime;
        });
        
        // Add click event for faster testing on desktop (two clicks within 500ms)
        img.addEventListener('click', function(e) {
            const currentTime = new Date().getTime();
            const clickLength = currentTime - lastTap;
            if (clickLength < 500 && clickLength > 0) {
                // Double click detected
                const postId = this.closest('.post-container').querySelector('.like-btn').id.replace('like-btn-', '');
                handleDoubleTap(postId);
            }
            lastTap = currentTime;
        });
    });
});

// Post creation functionality
let processedImages = [];

function openCreatePostModal() {
    document.getElementById('createPostModal').classList.remove('hidden');
    document.body.style.overflow = 'hidden'; // Prevent background scrolling
}

function closeCreatePostModal() {
    document.getElementById('createPostModal').classList.add('hidden');
    document.body.style.overflow = ''; // Re-enable scrolling
    
    // Reset form
    document.getElementById('createPostForm').reset();
    document.getElementById('imagePreviewContainer').classList.add('hidden');
    document.getElementById('imagePreviewContainer').querySelector('.swiper-wrapper').innerHTML = '';
    processedImages = [];
    updateImageCounter(0);
}

function handleImageSelect(event) {
    const files = Array.from(event.target.files);
    
    // Limit to 10 images
    if (files.length > 10) {
        alert('You can upload a maximum of 10 images per post');
        return;
    }
    
    const container = document.getElementById('imagePreviewContainer');
    const swiperWrapper = container.querySelector('.swiper-wrapper');
    swiperWrapper.innerHTML = ''; // Clear previous previews
    container.classList.remove('hidden');
    
    processedImages = [];
    
    files.forEach((file, index) => {
        if (index >= 10) return; // Max 10 images
        
        const reader = new FileReader();
        reader.onload = function(e) {
            // Create a slide for the image preview
            const slide = document.createElement('div');
            slide.className = 'swiper-slide';
            
            // Create the image preview
            const img = document.createElement('img');
            img.src = e.target.result;
            img.className = 'w-full h-64 md:h-96 object-contain';
            img.alt = `Preview ${index + 1}`;
            
            // Create a delete button
            const deleteBtn = document.createElement('button');
            deleteBtn.type = 'button';
            deleteBtn.className = 'absolute top-2 right-2 bg-red-500 text-white rounded-full p-2 shadow-md hover:bg-red-600';
            deleteBtn.innerHTML = '<i class="fas fa-trash"></i>';
            deleteBtn.onclick = function() {
                removeImage(index);
            };
            
            slide.appendChild(img);
            slide.appendChild(deleteBtn);
            swiperWrapper.appendChild(slide);
            
            // Store the image data
            processedImages[index] = e.target.result;
            
            // Initialize or update Swiper if this is the last image
            if (index === files.length - 1) {
                initializePreviewSwiper();
                updateImageCounter(files.length);
            }
        };
        reader.readAsDataURL(file);
    });
}

function removeImage(index) {
    processedImages[index] = null;
    
    // Count non-null images
    const count = processedImages.filter(img => img !== null).length;
    updateImageCounter(count);
    
    // Reinitialize the swiper with updated slides
    const swiperWrapper = document.querySelector('#imagePreviewContainer .swiper-wrapper');
    const slides = swiperWrapper.querySelectorAll('.swiper-slide');
    
    if (slides[index]) {
        slides[index].remove();
    }
    
    // If all images are removed, hide the container
    if (count === 0) {
        document.getElementById('imagePreviewContainer').classList.add('hidden');
    } else {
        // Reinitialize swiper to update it
        initializePreviewSwiper();
    }
}

function updateImageCounter(count) {
    document.getElementById('imageCounter').textContent = `${count}/10 images`;
}

function initializePreviewSwiper() {
    if (window.previewSwiper) {
        window.previewSwiper.destroy();
    }
    
    window.previewSwiper = new Swiper('#imagePreviewContainer .swiper-container', {
        pagination: {
            el: '.swiper-pagination',
            dynamicBullets: true,
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
        slidesPerView: 1,
        spaceBetween: 10,
        centeredSlides: true,
        grabCursor: true,
    });
}

document.getElementById('createPostForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const validImages = processedImages.filter(img => img !== null);
    
    if (validImages.length === 0) {
        alert('Please add at least one image to your post');
        return;
    }
    
    // Remove any existing processedImages from formData
    formData.delete('processedImages');
    
    validImages.forEach((dataUrl, index) => {
        // Convert base64 to blob
        const blob = dataURLtoBlob(dataUrl);
        formData.append('processedImages', blob, `image${index}.jpg`);
    });

    try {
        // Show loading state
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Posting...';
        submitBtn.disabled = true;
        
        const response = await fetch('/post', {
            method: 'POST',
            body: formData
        });
        
        if (response.ok) {
            closeCreatePostModal();
            showToast('Post created successfully!');
            
            // Reload the feed to show the new post
            setTimeout(() => {
                window.location.reload();
            }, 500);
        } else {
            const data = await response.json();
            alert('Error creating post: ' + (data.error || 'Unknown error'));
        }
    } catch (error) {
        console.error('Error creating post:', error);
        alert('Error creating post. Please try again.');
    } finally {
        // Reset button state
        const submitBtn = this.querySelector('button[type="submit"]');
        submitBtn.innerHTML = '<i class="fas fa-share mr-2"></i> Share Post';
        submitBtn.disabled = false;
    }
});

function dataURLtoBlob(dataurl) {
    let arr = dataurl.split(',');
    let mime = arr[0].match(/:(.*?);/)[1];
    let bstr = atob(arr[1]);
    let n = bstr.length;
    let u8arr = new Uint8Array(n);
    while(n--) {
        u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], {type:mime});
}
</script>

<!-- Share Modal Template -->
<template id="share-modal-template">
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6 w-96">
            <h3 class="text-lg font-semibold mb-4 text-gray-800 dark:text-white">Share Post</h3>
            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Share with (username)</label>
                    <input type="text" class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white" placeholder="Enter username">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Message (optional)</label>
                    <textarea class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white" rows="3" placeholder="Add a message..."></textarea>
                </div>
                <div class="flex justify-end space-x-3">
                    <button onclick="closeShareModal(this)" class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">Cancel</button>
                    <button onclick="confirmShare(this)" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Share</button>
                </div>
            </div>
        </div>
    </div>
</template>

<!-- Create Post Modal -->
<div id="createPostModal" class="hidden fixed inset-0 bg-black bg-opacity-70 z-50 overflow-y-auto">
    <div class="flex items-center justify-center min-h-screen px-4 py-6">
        <div class="bg-white dark:bg-gray-900 rounded-lg max-w-2xl w-full mx-auto">
            <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                <h2 class="text-xl font-semibold text-gray-800 dark:text-white">Create New Post</h2>
                <button onclick="closeCreatePostModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <form id="createPostForm" action="/post" method="post" enctype="multipart/form-data" class="p-4">
                <!-- Image Upload Section -->
                <div class="mb-4">
                    <div id="imagePreviewContainer" class="hidden mb-4">
                        <div class="swiper-container">
                            <div class="swiper-wrapper">
                                <!-- Image previews will be added here -->
                            </div>
                            <div class="swiper-pagination"></div>
                            <div class="swiper-button-next"></div>
                            <div class="swiper-button-prev"></div>
                        </div>
                        <div class="mt-2 text-center">
                            <span id="imageCounter" class="text-sm text-gray-500 dark:text-gray-400">0/10 images</span>
                        </div>
                    </div>
                    
                    <div class="flex items-center justify-center w-full">
                        <label class="w-full flex flex-col items-center px-4 py-6 bg-white dark:bg-gray-800 rounded-lg border-2 border-dashed border-gray-300 dark:border-gray-700 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                            <i class="fas fa-cloud-upload-alt text-3xl text-gray-400 dark:text-gray-500"></i>
                            <span class="mt-2 text-base text-gray-500 dark:text-gray-400">Click to upload images (max 10)</span>
                            <input type="file" id="imageInput" name="processedImages" multiple accept="image/*" class="hidden" onchange="handleImageSelect(event)">
                        </label>
                    </div>
                </div>

                <!-- Title Input -->
                <div class="mb-4">
                    <input type="text" 
                           name="title" 
                           placeholder="Add a title..." 
                           class="w-full px-3 py-2 border dark:border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-800 text-gray-800 dark:text-white"
                           required>
                </div>

                <!-- Caption Input -->
                <textarea name="content" 
                          placeholder="Write a caption..."
                          class="w-full p-4 border dark:border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4 bg-white dark:bg-gray-800 text-gray-800 dark:text-white"
                          rows="3"
                          required></textarea>

                <button type="submit" 
                        class="w-full px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-200 flex items-center justify-center">
                    <i class="fas fa-share mr-2"></i> Share Post
                </button>
            </form>
        </div>
    </div>
</div>

</body>
</html>