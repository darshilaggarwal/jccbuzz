<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/placeholder/JccBUZZ logo.svg">
    <link rel="shortcut icon" href="/placeholder/JccBUZZ logo.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/placeholder/JccBUZZ logo.svg">
    <!-- Font -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <title>Verify Login</title>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
        
        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .animate-fade-in {
            animation: fadeIn 0.6s ease-out forwards;
        }
        
        /* Logo styling */
        .logo-image {
            height: 38px;
            width: auto;
            object-fit: contain;
            filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
            transition: all 0.3s ease;
        }
        
        .logo-image:hover {
            transform: scale(1.05);
            filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
        }
        
        /* Decorative rings */
        .decor-ring {
            position: absolute;
            border-radius: 50%;
            opacity: 0.6;
            z-index: 0;
        }
        
        /* Button hover effects */
        .btn-primary {
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            z-index: 1;
        }
        
        .btn-primary:before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: all 0.6s ease;
            z-index: -1;
        }
        
        .btn-primary:hover:before {
            left: 100%;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Simple Navbar -->
    <header class="bg-white shadow py-2">
        <div class="max-w-7xl mx-auto px-6 sm:px-10 lg:px-16">
            <div class="flex justify-between items-center h-16">
                <!-- Left: Logo -->
                <div class="flex-shrink-0">
                    <a href="/" class="flex items-center">
                        <img class="h-40 mt-3 object-contain filter drop-shadow-md max-w-full transform transition hover:scale-105 duration-300" src="/placeholder/JccBUZZ_logo-removebg-preview.png" alt="JCCbuzz Logo">
                    </a>
                </div>
                
                <!-- Right: Auth Links -->
                <div class="flex items-center space-x-4">
                    <a href="/login" class="btn-primary px-4 py-2 border border-transparent text-base font-semibold rounded-lg text-indigo-600 bg-indigo-50 hover:bg-indigo-100 transition-all duration-300 shadow-sm">
                        Sign In
                    </a>
                    <a href="/register" class="btn-primary px-4 py-2 border border-transparent text-base font-semibold rounded-lg text-white bg-indigo-600 hover:bg-indigo-700 transition-all duration-300 shadow-sm">
                        Sign Up
                    </a>
                </div>
            </div>
        </div>
    </header>

    <div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 relative">
        <!-- Decorative rings -->
        <div class="decor-ring w-32 h-32 bg-purple-400 blur-xl -top-10 -left-10"></div>
        <div class="decor-ring w-40 h-40 bg-indigo-300 blur-xl bottom-40 -right-10"></div>
        <div class="decor-ring w-24 h-24 bg-blue-300 blur-xl top-40 right-1/4"></div>
        
        <div class="max-w-md w-full space-y-8 bg-white p-8 rounded-xl shadow-lg relative z-10 animate-fade-in">
            <div>
                <h2 class="mt-2 text-center text-3xl font-extrabold text-gray-900">
                    Verify Your Login
                </h2>
                <p class="mt-2 text-center text-sm text-gray-600">
                    We've sent a verification code to your email
                    <span class="font-medium text-indigo-600" id="userEmail">
                        <% if (typeof maskedEmail === 'string' && maskedEmail) { %>
                            <%= maskedEmail %>
                        <% } else { %>
                            <%= email %>
                        <% } %>
                    </span>
                </p>
                <% if (process.env.NODE_ENV !== 'production') { %>
                    <!-- Debug info - only visible in development mode -->
                    <p class="mt-2 text-center text-xs text-gray-400">
                        Debug - Raw email: <%= email %> | Masked email: <%= typeof maskedEmail === 'string' ? maskedEmail : 'undefined' %>
                    </p>
                <% } %>
            </div>
            
            <!-- Toast-style messages -->
            <div id="toast" class="fixed top-4 right-4 max-w-xs bg-red-500 text-white px-4 py-3 rounded shadow-lg transform transition-all duration-500 opacity-0 translate-y-8 pointer-events-none" role="alert">
                <div class="flex items-center">
                    <div class="py-1"><svg class="fill-current h-6 w-6 text-white mr-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z"/></svg></div>
                    <div id="toastMessage"></div>
                </div>
            </div>
            
            <div class="bg-indigo-50 border-l-4 border-indigo-400 p-4 mb-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-indigo-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-indigo-700">
                            This additional verification step helps protect your account. The OTP code expires in 2 minutes.
                        </p>
                    </div>
                </div>
            </div>
            
            <form class="mt-8 space-y-6" id="verifyOtpForm">
                <input type="hidden" name="loginToken" value="<%= loginToken %>">
                
                <div class="rounded-md shadow-sm">
                    <div>
                        <label for="otp" class="block text-sm font-medium text-gray-700 mb-2">Verification Code</label>
                        <input id="otp" name="otp" type="text" required 
                               class="appearance-none relative block w-full px-3 py-3 border
                                      border-gray-300 placeholder-gray-500 text-gray-900 rounded-md
                                      focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                               placeholder="Enter 6-digit code" maxlength="6" inputmode="numeric" pattern="[0-9]*">
                    </div>
                </div>

                <div>
                    <button type="submit" 
                            class="btn-primary group relative w-full flex justify-center py-3 px-4 border border-transparent
                                   text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700
                                   focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow-md">
                        Verify and Sign In
                    </button>
                </div>
                
                <div class="flex items-center justify-between mt-4">
                    <div class="text-sm">
                        <span id="countdown" class="text-gray-500">Code expires in: 2:00</span>
                    </div>
                    <div class="text-sm">
                        <button type="button" id="resendOtpButton" class="font-medium text-indigo-600 hover:text-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed">
                            Resend Code
                        </button>
                    </div>
                </div>
            </form>
            
            <div class="mt-4 text-center">
                <a href="/login" class="text-sm font-medium text-indigo-600 hover:text-indigo-500">
                    ‚Üê Back to Login
                </a>
            </div>
        </div>
    </div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // OTP Form submission
    const verifyOtpForm = document.getElementById('verifyOtpForm');
    const resendOtpButton = document.getElementById('resendOtpButton');
    const countdownElement = document.getElementById('countdown');
    
    // Set initial expiry time (2 minutes from now)
    let expiryTime = new Date();
    expiryTime.setMinutes(expiryTime.getMinutes() + 2);
    
    // Update countdown every second
    const countdownInterval = setInterval(updateCountdown, 1000);
    
    // Submit form handler
    verifyOtpForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const otp = document.getElementById('otp').value;
        const loginToken = document.querySelector('input[name="loginToken"]').value;
        
        if (!otp || otp.length !== 6 || !/^\d+$/.test(otp)) {
            showToast('Please enter a valid 6-digit code');
            return;
        }
        
        try {
            const response = await fetch('/verify-login-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ otp, loginToken }),
            });
            
            const data = await response.json();
            
            if (response.ok) {
                // Redirect to profile page on success
                window.location.href = '/profile';
            } else {
                showToast(data.error || 'Failed to verify code. Please try again.');
            }
        } catch (error) {
            showToast('Network error. Please try again.');
            console.error('Error:', error);
        }
    });
    
    // Resend OTP handler
    resendOtpButton.addEventListener('click', async function() {
        if (resendOtpButton.disabled) return;
        
        // Disable button to prevent spam
        resendOtpButton.disabled = true;
        
        try {
            const loginToken = document.querySelector('input[name="loginToken"]').value;
            
            const response = await fetch('/resend-login-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ loginToken }),
            });
            
            const data = await response.json();
            
            if (response.ok) {
                // Reset countdown timer
                expiryTime = new Date();
                expiryTime.setMinutes(expiryTime.getMinutes() + 2);
                
                showSuccessToast('New code sent! Please check your email.');
                
                // Enable button after 30 seconds
                setTimeout(() => {
                    resendOtpButton.disabled = false;
                }, 30000);
            } else {
                showToast(data.error || 'Failed to resend code. Please try again.');
                // Enable button after 5 seconds on error
                setTimeout(() => {
                    resendOtpButton.disabled = false;
                }, 5000);
            }
        } catch (error) {
            showToast('Network error. Please try again.');
            console.error('Error:', error);
            
            // Enable button after 5 seconds on error
            setTimeout(() => {
                resendOtpButton.disabled = false;
            }, 5000);
        }
    });
    
    // Update countdown timer
    function updateCountdown() {
        const now = new Date();
        const timeLeft = expiryTime - now;
        
        if (timeLeft <= 0) {
            clearInterval(countdownInterval);
            countdownElement.textContent = 'Code expired';
            countdownElement.classList.remove('text-gray-500');
            countdownElement.classList.add('text-red-500');
            return;
        }
        
        const minutes = Math.floor(timeLeft / 60000);
        const seconds = Math.floor((timeLeft % 60000) / 1000);
        
        countdownElement.textContent = `Code expires in: ${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
    
    // Function to show toast message
    function showToast(message) {
        const toast = document.getElementById('toast');
        const toastMessage = document.getElementById('toastMessage');
        
        toast.classList.remove('bg-green-500');
        toast.classList.add('bg-red-500');
        toastMessage.textContent = message;
        
        // Show the toast
        toast.classList.remove('opacity-0', 'translate-y-8');
        toast.classList.add('opacity-100', 'translate-y-0');
        
        // Hide the toast after 5 seconds
        setTimeout(() => {
            toast.classList.add('opacity-0', 'translate-y-8');
            toast.classList.remove('opacity-100', 'translate-y-0');
        }, 5000);
    }
    
    // Function to show success toast message
    function showSuccessToast(message) {
        const toast = document.getElementById('toast');
        const toastMessage = document.getElementById('toastMessage');
        
        toast.classList.remove('bg-red-500');
        toast.classList.add('bg-green-500');
        toastMessage.textContent = message;
        
        // Show the toast
        toast.classList.remove('opacity-0', 'translate-y-8');
        toast.classList.add('opacity-100', 'translate-y-0');
        
        // Hide the toast after 5 seconds
        setTimeout(() => {
            toast.classList.add('opacity-0', 'translate-y-8');
            toast.classList.remove('opacity-100', 'translate-y-0');
        }, 5000);
    }
    
    // Check URL parameters for error messages
    const urlParams = new URLSearchParams(window.location.search);
    const errorParam = urlParams.get('error');
    
    if (errorParam) {
        let errorMessage = '';
        
        switch(errorParam) {
            case 'invalid_otp':
                errorMessage = 'Invalid verification code. Please try again.';
                break;
            case 'expired_otp':
                errorMessage = 'Verification code has expired. Please request a new one.';
                break;
            case 'expired_token':
                errorMessage = 'Login session expired. Please log in again.';
                break;
            default:
                errorMessage = 'An error occurred. Please try again.';
        }
        
        showToast(errorMessage);
    }
});
</script>

</body>
</html> 