<%- include('partials/header2') %>

<!-- Toast notification for message status -->
<div id="toast" class="fixed bottom-5 left-1/2 transform -translate-x-1/2 translate-y-full transition-all duration-300 z-50 opacity-0">
    <div class="bg-black bg-opacity-75 text-white px-6 py-3 rounded-full shadow-lg backdrop-blur-sm">
        <span id="toast-message" class="font-medium text-sm"></span>
    </div>
</div>

<!-- Main Container with Mobile-First Design -->
<div class="max-w-xl mx-auto bg-white dark:bg-black min-h-screen">
    <!-- Header -->
    <div class="sticky top-0 bg-white dark:bg-black border-b border-gray-200 dark:border-gray-800 z-30 px-4 py-3">
        <div class="flex items-center justify-between">
            <div class="flex items-center">
                <h1 class="text-xl font-bold text-gray-800 dark:text-white">Messages</h1>
                <span class="ml-1 text-sm font-normal text-blue-500">
                    <% const unreadCount = chats.reduce((total, chat) => {
                        return total + (chat.unreadCount || 0);
                    }, 0); %>
                    <%= unreadCount > 0 ? `(${unreadCount})` : '' %>
                </span>
            </div>
            <button id="newMessageBtn" class="text-blue-500 hover:text-blue-600">
                <i class="fas fa-edit text-lg"></i>
            </button>
        </div>
        
        <!-- Search Bar -->
        <div class="mt-3 relative">
            <input type="text" 
                   id="searchChats" 
                   placeholder="Search messages" 
                   class="w-full py-2 pl-10 pr-4 border border-gray-300 dark:border-gray-700 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-white text-sm">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <i class="fas fa-search text-gray-400"></i>
            </div>
        </div>
        
        <!-- Filter Options (Primary/General) -->
        <div class="flex mt-3 border-b border-gray-200 dark:border-gray-800">
            <button class="flex-1 text-center py-2 border-b-2 border-blue-500 text-blue-500 font-medium">
                Primary
            </button>
            <button class="flex-1 text-center py-2 border-b-2 border-transparent text-gray-500 dark:text-gray-400">
                General
            </button>
        </div>
    </div>
    
    <!-- Chat List -->
    <div class="divide-y divide-gray-200 dark:divide-gray-800">
        <% if (chats.length === 0) { %>
            <div class="flex flex-col items-center justify-center py-16 px-4 text-center">
                <div class="w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mb-4">
                    <i class="fas fa-paper-plane text-gray-400 text-xl"></i>
                </div>
                <h3 class="text-gray-800 dark:text-white font-medium mb-2">No messages yet</h3>
                <p class="text-gray-500 dark:text-gray-400 text-sm max-w-xs">
                        When you send or receive messages, they'll appear here. Start a conversation by tapping the edit button above.
                </p>
            </div>
        <% } else { %>
            <% chats.forEach(chat => { %>
                <% const otherUser = chat.participants.find(p => p && p._id && p._id.toString() !== user._id.toString()); %>
                <% if (otherUser) { 
                    const lastMessage = chat.messages.length > 0 ? chat.messages[chat.messages.length - 1] : null;
                    const hasUnread = chat.unreadCount && chat.unreadCount > 0;
                    const lastMessageTime = lastMessage ? new Date(lastMessage.createdAt) : null;
                    
                    // Format time: today -> time, older -> date
                    let timeDisplay = '';
                    if (lastMessageTime) {
                        const now = new Date();
                        const isToday = lastMessageTime.getDate() === now.getDate() && 
                                     lastMessageTime.getMonth() === now.getMonth() && 
                                     lastMessageTime.getFullYear() === now.getFullYear();
                        
                        if (isToday) {
                            timeDisplay = lastMessageTime.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                        } else {
                            timeDisplay = lastMessageTime.toLocaleDateString([], {month: 'short', day: 'numeric'});
                        }
                    }
                %>
                <a href="/chat/<%= otherUser._id %>" 
                   class="flex items-center p-4 hover:bg-gray-50 dark:hover:bg-gray-900 transition-colors">
                    <div class="relative">
                        <!-- Story ring if user has active story -->
                        <div class="<%= otherUser.hasActiveStory ? 'story-ring p-[2px]' : '' %> rounded-full">
                            <div class="bg-white dark:bg-black <%= otherUser.hasActiveStory ? 'p-[1px]' : '' %> rounded-full">
                                <img src="<%= otherUser.profileImage %>" 
                                     alt="Profile" 
                                     class="w-14 h-14 rounded-full object-cover">
                            </div>
                        </div>
                        
                        <!-- Online indicator -->
                        <% if (otherUser.isOnline) { %>
                            <div class="absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-white dark:border-black"></div>
                        <% } %>
                    </div>
                    
                    <div class="ml-3 flex-1 min-w-0">
                        <div class="flex justify-between items-center">
                            <h2 class="font-semibold text-gray-800 dark:text-white truncate"><%= otherUser.name %></h2>
                            <span class="text-xs text-gray-500 dark:text-gray-400 whitespace-nowrap ml-2"><%= timeDisplay %></span>
                        </div>
                        
                        <div class="flex justify-between items-center mt-1">
                            <p class="text-sm <%= hasUnread ? 'font-semibold text-gray-800 dark:text-white' : 'text-gray-500 dark:text-gray-400' %> truncate">
                                <% if (lastMessage) { %>
                                    <% if (lastMessage.sender._id.toString() === user._id.toString()) { %>
                                        <span class="text-gray-400 dark:text-gray-500">You: </span>
                                    <% } %>
                                    <% if (lastMessage.mediaType !== 'none') { %>
                                        <i class="<%= lastMessage.mediaType === 'image' ? 'far fa-image' : lastMessage.mediaType === 'video' ? 'fas fa-video' : 'fas fa-microphone' %> mr-1"></i>
                                        <%= lastMessage.mediaType === 'image' ? 'Photo' : lastMessage.mediaType === 'video' ? 'Video' : 'Voice message' %>
                                    <% } else { %>
                                        <%= lastMessage.content %>
                                    <% } %>
                                <% } else { %>
                                    Start a conversation
                                <% } %>
                            </p>
                            
                            <% if (hasUnread) { %>
                                <span class="ml-2 w-5 h-5 bg-blue-500 rounded-full text-white text-xs flex items-center justify-center flex-shrink-0">
                                    <%= chat.unreadCount > 9 ? '9+' : chat.unreadCount %>
                                </span>
                            <% } %>
                        </div>
                    </div>
                </a>
                <% } else { %>
                <div class="flex items-center p-4 text-gray-500 dark:text-gray-400">
                    <div class="w-14 h-14 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center">
                        <i class="fas fa-user text-gray-400 dark:text-gray-500"></i>
                    </div>
                    <div class="ml-3">
                        <h2 class="font-semibold text-gray-800 dark:text-white">Deleted User</h2>
                        <p class="text-sm text-gray-500 dark:text-gray-400">This user is no longer available</p>
                    </div>
                </div>
                <% } %>
            <% }) %>
        <% } %>
    </div>
    
    <!-- New Message Modal -->
    <div id="newMessageModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
        <div class="bg-white dark:bg-gray-900 rounded-lg max-w-lg w-full mx-auto mt-20 overflow-hidden">
            <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                <button id="closeNewMessageModal" class="text-gray-500 dark:text-gray-400">
                    <i class="fas fa-arrow-left"></i>
                </button>
                <h3 class="text-lg font-semibold text-gray-800 dark:text-white">New Message</h3>
                <div class="w-6"></div> <!-- Empty div for flex alignment -->
            </div>
            
            <div class="p-4">
                <div class="relative mb-4">
                    <input type="text" 
                           id="searchUsers" 
                           placeholder="Search users..." 
                           class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-800 text-gray-800 dark:text-white">
                </div>
                
                <div id="userSearchResults" class="max-h-72 overflow-y-auto">
                    <!-- Results will appear here -->
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Story ring gradient */
.story-ring {
    background: linear-gradient(45deg, #f09433 0%, #e6683c 25%, #dc2743 50%, #cc2366 75%, #bc1888 100%);
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

.animate-fadeIn {
    animation: fadeIn 0.3s ease-out forwards;
}

/* Toast animation */
@keyframes slideUp {
    from { transform: translate(-50%, 100%); opacity: 0; }
    to { transform: translate(-50%, 0); opacity: 1; }
}

.toast-show {
    animation: slideUp 0.3s ease-out forwards;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Search functionality for chats
    const searchInput = document.getElementById('searchChats');
    const chatItems = document.querySelectorAll('.divide-y > a, .divide-y > div');
    
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        
        chatItems.forEach(item => {
            const userName = item.querySelector('h2').textContent.toLowerCase();
            const lastMessage = item.querySelector('p').textContent.toLowerCase();
            
            if (userName.includes(searchTerm) || lastMessage.includes(searchTerm)) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    });
    
    // New Message Modal
    const newMessageBtn = document.getElementById('newMessageBtn');
    const newMessageModal = document.getElementById('newMessageModal');
    const closeNewMessageModal = document.getElementById('closeNewMessageModal');
    const searchUsers = document.getElementById('searchUsers');
    const userSearchResults = document.getElementById('userSearchResults');
    
    newMessageBtn.addEventListener('click', function() {
        newMessageModal.classList.remove('hidden');
        searchUsers.focus();
    });
    
    closeNewMessageModal.addEventListener('click', function() {
        newMessageModal.classList.add('hidden');
    });
    
    // Close modal when clicking outside
    newMessageModal.addEventListener('click', function(e) {
        if (e.target === newMessageModal) {
            newMessageModal.classList.add('hidden');
        }
    });
    
    // Search users functionality
    searchUsers.addEventListener('input', function() {
        const searchTerm = this.value.trim();
        
        if (searchTerm.length < 2) {
            userSearchResults.innerHTML = '<div class="text-center text-gray-500 dark:text-gray-400 py-4">Type at least 2 characters to search</div>';
            return;
        }
        
        // Show loading state
        userSearchResults.innerHTML = '<div class="text-center py-4"><div class="spinner"></div></div>';
        
        // Fetch users
        fetch(`/api/search-users?q=${encodeURIComponent(searchTerm)}`)
            .then(response => response.json())
            .then(data => {
                if (!data.users || data.users.length === 0) {
                    userSearchResults.innerHTML = '<div class="text-center text-gray-500 dark:text-gray-400 py-4">No users found</div>';
                    return;
                }
                
                let resultsHTML = '';
                data.users.forEach(user => {
                    resultsHTML += `
                        <a href="/chat/${user._id}" class="flex items-center p-3 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg mb-1">
                            <img src="${user.profileImage}" alt="${user.name}" class="w-10 h-10 rounded-full object-cover">
                            <div class="ml-3">
                                <h4 class="font-medium text-gray-800 dark:text-white">${user.name}</h4>
                                <p class="text-sm text-gray-500 dark:text-gray-400">@${user.username}</p>
                            </div>
                        </a>
                    `;
                });
                
                userSearchResults.innerHTML = resultsHTML;
            })
            .catch(error => {
                console.error('Error searching users:', error);
                userSearchResults.innerHTML = '<div class="text-center text-red-500 py-4">Error searching users</div>';
            });
    });
    
    // Toast notification function
    window.showToast = function(message) {
        const toast = document.getElementById('toast');
        const toastMessage = document.getElementById('toast-message');
        
        toastMessage.innerHTML = message;
        toast.classList.remove('translate-y-full', 'opacity-0');
        toast.classList.add('translate-y-0', 'opacity-100');
        
        // Hide after 3 seconds
        setTimeout(() => {
            toast.classList.remove('translate-y-0', 'opacity-100');
            toast.classList.add('translate-y-full', 'opacity-0');
        }, 3000);
    };
    
    // Initialize socket connection for real-time updates
    initializeSocketConnection();
});

// Socket connection for real-time updates
function initializeSocketConnection() {
    // Check if socket.io is loaded
    if (typeof io === 'undefined') return;
    
    const socket = io();
    
    socket.on('connect', () => {
        console.log('Connected to socket.io server');
    });
    
    socket.on('newMessage', data => {
        // Refresh the page if new message received
        window.location.reload();
    });
    
    socket.on('messageRead', data => {
        // Update read status if needed
        console.log('Message read:', data);
    });
    
    socket.on('userOnline', data => {
        // Update online status indicators
        console.log('User online:', data);
    });
}
</script>

</body>
</html> 