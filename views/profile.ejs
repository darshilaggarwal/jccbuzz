<%- include('partials/header') %>

<script>
// Modal functions
function openCreatePostModal() {
    const modal = document.getElementById('createPostModal');
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
}

function closeCreatePostModal() {
    const modal = document.getElementById('createPostModal');
    modal.classList.add('hidden');
    document.body.style.overflow = '';
    
    // Reset form
    const form = document.getElementById('createPostForm');
    if (form) form.reset();
    
    // Clear image previews
    const previewContainer = document.getElementById('imagePreviewContainer');
    if (previewContainer) {
        previewContainer.querySelector('div').innerHTML = '';
        previewContainer.classList.add('hidden');
    }
    
    // Show upload placeholder
    document.getElementById('imageUploadPlaceholder').classList.remove('hidden');
    
    // Hide "add more" button
    document.getElementById('addMoreImagesBtn').classList.add('hidden');
    
    // Reset character counters
    document.getElementById('titleCharCount').textContent = '0/50';
    document.getElementById('captionCharCount').textContent = '0/2200';
}
</script>

<style>
/* Profile picture and story ring styles */
.profile-container {
    position: relative;
    width: 8rem;
    height: 8rem;
}

.story-ring {
    background: linear-gradient(45deg, #f09433 0%, #e6683c 25%, #dc2743 50%, #cc2366 75%, #bc1888 100%);
    padding: 2px;
    border-radius: 9999px;
}

.profile-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 9999px;
}

.add-story-button {
    position: absolute;
    bottom: 0;
    right: 0;
    background-color: #3B82F6;
    color: white;
    padding: 0.5rem;
    border-radius: 9999px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    transition: all 0.2s;
}

.add-story-button:hover {
    background-color: #2563EB;
    transform: scale(1.1);
}

/* Toast notification */
#toast {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #333;
    color: white;
    padding: 12px 24px;
    border-radius: 4px;
    z-index: 9999;
    opacity: 0;
    transition: opacity 0.3s ease;
}

#toast.show {
    opacity: 1;
}

/* Line clamp */
.line-clamp-6 {
    display: -webkit-box;
    -webkit-line-clamp: 6;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

/* Post menu backdrop */
.post-menu-backdrop {
    background: rgba(0, 0, 0, 0.5);
    position: fixed;
    inset: 0;
    z-index: 40;
}

@media (max-width: 640px) {
    .line-clamp-6 {
        -webkit-line-clamp: 4;
    }
}
</style>

<div class="max-w-4xl mx-auto mt-8 px-4">
    <!-- Profile Header - Instagram-like -->
    <div class="bg-white dark:bg-black rounded-lg shadow-md p-6 mb-8">
        <div class="flex flex-col md:flex-row md:items-center gap-6">
            <!-- Profile Image -->
            <div class="flex justify-center md:justify-start">
                <div class="relative">
                    <!-- Story Ring (if user has active story) -->
                    <div class="<%= user.hasActiveStory ? 'bg-gradient-to-tr from-yellow-400 to-fuchsia-600' : '' %> rounded-full p-[2px]">
                        <div class="bg-white dark:bg-black rounded-full p-[2px]">
                            <img src="<%= user.profileImage || '/images/default-profile.png' %>" 
                                 alt="Profile" 
                                 class="w-24 h-24 md:w-32 md:h-32 rounded-full object-cover border-2 border-gray-200 dark:border-gray-800">
                        </div>
                    </div>
                    
                    <!-- Add Story Button -->
                    <button onclick="document.getElementById('storyUpload').click()" 
                            class="absolute bottom-0 right-0 bg-blue-500 text-white rounded-full p-2 shadow-lg hover:bg-blue-600 transition">
                        <i class="fas fa-plus"></i>
                    </button>
                    <input type="file" 
                           id="storyUpload" 
                           class="hidden" 
                           accept="image/*,video/*" 
                           onchange="handleStoryUpload(event)">
                </div>
            </div>
            
            <!-- Profile Info -->
            <div class="flex-grow">
                <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                    <div>
                        <h1 class="text-xl md:text-2xl font-bold text-gray-800 dark:text-white"><%= user.name %></h1>
                        <p class="text-gray-500 dark:text-gray-400">@<%= user.username %></p>
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="openCreatePostModal()" 
                                class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-md hover:from-blue-600 hover:to-purple-700 transition-all">
                            <i class="fas fa-plus-circle mr-2"></i> Create
                        </button>
                    </div>
                </div>
                
                <p class="mt-2 text-gray-600 dark:text-gray-300"><%= user.bio %></p>
                
                <!-- Stats - Instagram Style -->
                <div class="flex justify-around md:justify-start md:space-x-8 mt-4 py-3 border-t border-b border-gray-200 dark:border-gray-800">
                    <div class="text-center md:text-left">
                        <span class="block text-base md:text-lg font-bold text-gray-800 dark:text-white"><%= user.posts.length %></span>
                        <span class="text-sm text-gray-500 dark:text-gray-400">posts</span>
                    </div>
                    <div class="text-center md:text-left">
                        <span class="block text-base md:text-lg font-bold text-gray-800 dark:text-white"><%= user.followers ? user.followers.length : 0 %></span>
                        <span class="text-sm text-gray-500 dark:text-gray-400">followers</span>
                    </div>
                    <div class="text-center md:text-left">
                        <span class="block text-base md:text-lg font-bold text-gray-800 dark:text-white"><%= user.following ? user.following.length : 0 %></span>
                        <span class="text-sm text-gray-500 dark:text-gray-400">following</span>
                    </div>
                </div>
                
                <% if (user.followRequests && user.followRequests.length > 0) { %>
                    <div class="mt-3 text-center md:text-left">
                        <a href="/follow-requests" class="inline-flex items-center px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white rounded-md hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                            <i class="fas fa-user-check mr-2"></i>
                            Follow Requests 
                            <span class="inline-flex items-center justify-center ml-2 w-5 h-5 text-xs font-medium rounded-full bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
                                <%= user.followRequests.length %>
                            </span>
                        </a>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Create Post Button for Mobile -->
    <div class="md:hidden fixed bottom-4 right-4 z-10">
        <button onclick="openCreatePostModal()" 
                class="p-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-full shadow-lg hover:shadow-xl transition transform hover:scale-105">
            <i class="fas fa-plus text-xl"></i>
        </button>
    </div>

    <!-- Posts Section - Instagram Grid Style -->
    <div class="bg-white dark:bg-black rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
            <i class="fas fa-th mr-2"></i> Posts
        </h2>
        
        <% if (user.posts.length === 0) { %>
            <div class="flex flex-col items-center justify-center py-12 text-center">
                <div class="text-5xl text-gray-300 dark:text-gray-600 mb-4">
                    <i class="fas fa-camera"></i>
                </div>
                <p class="text-gray-500 dark:text-gray-400 mb-2">No posts yet</p>
                <p class="text-sm text-gray-400 dark:text-gray-500">When you share photos, they'll appear here.</p>
            </div>
        <% } else { %>
            <div class="grid grid-cols-2 md:grid-cols-3 gap-2 md:gap-4">
                <% user.posts.forEach(post => { %>
                    <div class="group relative aspect-square overflow-hidden rounded-md block transform transition hover:scale-[0.98]" data-post-id="<%= post._id %>">
                        <a href="/post/<%= post._id %>" class="block w-full h-full">
                            <% if (post.images && post.images.length > 0) { %>
                                <img src="<%= post.images[0].url %>" 
                                    alt="Post thumbnail"
                                    class="w-full h-full object-cover">
                                    
                                <% if (post.images.length > 1) { %>
                                    <div class="absolute top-2 right-2 text-white">
                                        <i class="fas fa-clone"></i>
                                    </div>
                                <% } %>
                            <% } else { %>
                                <!-- Show text content for posts without images -->
                                <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600 p-4 text-white overflow-hidden">
                                    <p class="text-center text-sm md:text-base line-clamp-6 font-medium">
                                        <%= post.content || post.title || 'No content' %>
                                    </p>
                                </div>
                            <% } %>
                            
                            <!-- Post Overlay on Hover -->
                            <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center space-x-6 text-white">
                                <div class="flex items-center">
                                    <i class="fas fa-heart mr-2"></i>
                                    <span><%= post.likes ? post.likes.length : 0 %></span>
                                </div>
                                <div class="flex items-center">
                                    <i class="fas fa-comment mr-2"></i>
                                    <span><%= post.comments ? post.comments.length : 0 %></span>
                                </div>
                            </div>
                        </a>
                        
                        <!-- Three dots menu trigger -->
                        <div class="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                            <button class="w-8 h-8 rounded-full bg-black bg-opacity-50 text-white flex items-center justify-center hover:bg-opacity-70 transition" 
                                   onclick="event.preventDefault(); showPostMenu(event, '<%= post._id %>')">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                        </div>
                    </div>
                <% }) %>
            </div>
        <% } %>
    </div>
</div>

<!-- Create Post Modal -->
<div id="createPostModal" class="hidden fixed inset-0 bg-black bg-opacity-80 z-50 flex items-center justify-center backdrop-blur-sm">
    <div class="bg-white dark:bg-gray-900 rounded-xl max-w-2xl w-full mx-4 shadow-xl overflow-hidden transform transition-all">
        <!-- Header -->
        <div class="px-4 py-3 border-b border-gray-200 dark:border-gray-800 flex justify-between items-center">
            <button onclick="closeCreatePostModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 p-1">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <h2 class="text-sm font-semibold text-gray-800 dark:text-white">New Post</h2>
            <button type="submit" form="createPostForm" id="submitPostBtn" class="text-blue-500 font-semibold hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 text-sm">
                Share
            </button>
        </div>

        <form id="createPostForm" class="flex flex-col h-full">
            <!-- Image Upload and Preview Section -->
            <div class="flex-grow max-h-[60vh]">
                <!-- Image Preview Container -->
                <div id="imagePreviewContainer" class="hidden h-full">
                    <div class="aspect-square bg-gray-50 dark:bg-gray-800 relative flex items-center justify-center overflow-hidden">
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-1 h-full w-full">
                            <!-- Image previews will be added here -->
                        </div>
                        
                        <!-- Add more images button - shows when at least one image is selected -->
                        <button type="button" class="absolute bottom-3 right-3 bg-black bg-opacity-70 text-white rounded-full p-2 hidden hover:bg-opacity-80 transition-all" id="addMoreImagesBtn">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                            </svg>
                        </button>
                    </div>
                </div>
                
                <!-- Image Upload Placeholder - shows when no images are selected -->
                <div id="imageUploadPlaceholder" class="aspect-square flex flex-col items-center justify-center bg-gray-50 dark:bg-gray-800 border-0">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 dark:text-gray-600 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    <p class="text-gray-500 dark:text-gray-400 text-sm font-medium mb-2">Drag photos here</p>
                    <label class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition cursor-pointer text-sm font-medium">
                        Select from computer
                        <input type="file" id="imageInput" name="processedImages" multiple accept="image/*" class="hidden" onchange="handleImageSelect(event)">
                    </label>
                </div>
            </div>

            <!-- Post Details Section -->
            <div class="border-t border-gray-200 dark:border-gray-800 p-4 space-y-3">
                <!-- Title Input with character count -->
                <div class="relative">
                    <input type="text" 
                           name="title" 
                           placeholder="Write a title..." 
                           maxlength="50"
                           class="w-full px-3 py-2 bg-transparent border-0 border-b border-gray-200 dark:border-gray-700 focus:ring-0 focus:border-gray-300 dark:text-white text-sm"
                           required>
                    <div class="absolute right-2 bottom-2 text-xs text-gray-400 dark:text-gray-600" id="titleCharCount">0/50</div>
                </div>

                <!-- Caption Input with character count -->
                <div class="relative">
                    <textarea name="content" 
                              placeholder="Write a caption..."
                              maxlength="2200"
                              class="w-full px-3 py-2 bg-transparent border-0 border-b border-gray-200 dark:border-gray-700 focus:ring-0 focus:border-gray-300 dark:text-white resize-none text-sm"
                              rows="3"
                              required></textarea>
                    <div class="absolute right-2 bottom-2 text-xs text-gray-400 dark:text-gray-600" id="captionCharCount">0/2200</div>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Post Options Menu -->
<div id="postOptionsMenu" class="fixed hidden bg-white dark:bg-gray-900 rounded-lg shadow-xl z-50 overflow-hidden w-48">
    <ul class="divide-y divide-gray-100 dark:divide-gray-800">
        <li>
            <a href="#" id="editPostOption" class="px-4 py-3 flex items-center text-gray-800 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 transition">
                <i class="fas fa-edit mr-3 text-blue-500"></i> Edit
            </a>
        </li>
        <li>
            <button id="deletePostOption" onclick="deletePostClicked()" class="w-full px-4 py-3 flex items-center text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-800 transition">
                <i class="fas fa-trash mr-3"></i> Delete
            </button>
        </li>
    </ul>
</div>

<!-- Other modals remain the same -->
<!-- Image Cropper Modal -->
<div id="cropperModal" class="hidden fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-2xl w-full mx-4 p-4">
        <div class="mb-4 flex justify-between items-center">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Crop Image</h3>
            <button onclick="closeCropperModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="relative">
            <img id="cropperImage" src="" alt="Image to crop">
        </div>
        <div class="mt-4 flex justify-end space-x-2">
            <button onclick="closeCropperModal()" class="px-4 py-2 border rounded-lg text-gray-800 dark:text-white dark:border-gray-700">
                Cancel
            </button>
            <button onclick="cropImage()" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
                Crop
            </button>
        </div>
    </div>
</div>

<!-- Story Upload Preview Modal -->
<div id="storyPreviewModal" class="hidden fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-lg w-full mx-4">
        <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Preview Story</h3>
            <button onclick="closeStoryPreview()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="p-4">
            <div class="relative aspect-[9/16] bg-black rounded-lg overflow-hidden">
                <!-- Preview container -->
                <div id="storyPreviewContainer" class="w-full h-full"></div>
            </div>
            <div class="mt-4 flex justify-end space-x-2">
                <button onclick="closeStoryPreview()" 
                class="px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100">
                    Cancel
                </button>
                <button onclick="uploadStory()" 
                class="px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg hover:from-blue-600 hover:to-purple-700">
                    Share Story
                </button>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteConfirmModal" class="hidden fixed inset-0 bg-black bg-opacity-75 z-[9999] flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg w-full max-w-md mx-4 p-6">
        <h3 class="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Delete Post</h3>
        <p class="mb-6 text-gray-600 dark:text-gray-300">Are you sure you want to delete this post? This action cannot be undone.</p>
        <div class="flex justify-end space-x-3">
            <button onclick="closeDeleteConfirmModal()" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors text-gray-800 dark:text-white">
                Cancel
            </button>
            <button onclick="confirmDeletePost()" id="confirmDeleteBtn" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors">
                Delete
            </button>
        </div>
    </div>
</div>

<!-- Add Swiper JS for image carousel (if needed) -->
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>

<!-- Add these scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

<script>
// Track the currently selected post
let currentPostId = null;
let cropper = null;
let storyFile = null;
let processedImages = [];

document.addEventListener('DOMContentLoaded', function() {
    // Set up event listeners for post creation
    if (document.getElementById('createPostForm')) {
        document.getElementById('createPostForm').addEventListener('submit', handlePostSubmit);
    }
    
    // Set up event listeners for post deletion
    // Note: We're now using direct onclick handlers instead of this event listener approach
    // if (document.getElementById('confirmDeleteBtn')) {
    //     document.getElementById('confirmDeleteBtn').addEventListener('click', confirmDeletePost);
    // }

    // Add drag and drop functionality for images
    const dropZone = document.getElementById('imageUploadPlaceholder');
    
    if (dropZone) {
        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });
        
        // Highlight drop zone when item is dragged over it
        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, highlight, false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, unhighlight, false);
        });
        
        // Handle dropped files
        dropZone.addEventListener('drop', handleDrop, false);
    }
});

// Function to show post options menu
function showPostMenu(event, postId) {
    event.preventDefault();
    event.stopPropagation();
    
    // Get elements
    const menu = document.getElementById('postOptionsMenu');
    const editOption = document.getElementById('editPostOption');
    const deleteOption = document.getElementById('deletePostOption');
    
    // Set current post ID and update edit link
    currentPostId = postId;
    if (editOption) {
        editOption.href = '/edit/' + postId;
    }
    
    // Position the menu near the button that was clicked
    const buttonRect = event.currentTarget.getBoundingClientRect();
    const menuWidth = 192; // w-48 = 12rem = 192px
    
    // Calculate position (try to keep it within viewport)
    const leftPosition = Math.min(
        buttonRect.left,
        window.innerWidth - menuWidth - 10
    );
    
    menu.style.left = `${leftPosition}px`;
    menu.style.top = `${buttonRect.bottom + 5}px`;
    
    // Add a backdrop that will close the menu when clicked
    const backdrop = document.createElement('div');
    backdrop.className = 'post-menu-backdrop';
    backdrop.id = 'menuBackdrop';
    backdrop.addEventListener('click', closePostMenu);
    document.body.appendChild(backdrop);
    
    // Show the menu with animation
    menu.style.opacity = '0';
    menu.style.transform = 'translateY(-10px)';
    menu.style.transition = 'opacity 0.2s ease, transform 0.2s ease';
    menu.classList.remove('hidden');
    
    // Trigger animation
    setTimeout(() => {
        menu.style.opacity = '1';
        menu.style.transform = 'translateY(0)';
    }, 10);
    
    // Set up event handlers for menu options
    if (deleteOption) {
        deleteOption.onclick = function(e) {
            e.preventDefault();
            closePostMenu();
            showDeleteConfirmation(postId);
        };
    }
}

// Function to close post menu
function closePostMenu() {
    const menu = document.getElementById('postOptionsMenu');
    const backdrop = document.getElementById('menuBackdrop');
    
    // Hide with animation
    menu.style.opacity = '0';
    menu.style.transform = 'translateY(-10px)';
    
    // Remove after animation completes
    setTimeout(() => {
        menu.classList.add('hidden');
        if (backdrop) {
            document.body.removeChild(backdrop);
        }
    }, 200);
}

// Handle post form submission
async function handlePostSubmit(e) {
    console.log('Form submission started');
    e.preventDefault();
    e.stopPropagation();
    
    // Get form data
    const form = e.target;
    console.log('Form element:', form.id);
    
    // Prevent multiple submissions
    const submitBtn = document.getElementById('submitPostBtn');
    if (submitBtn.disabled) {
        console.log('Preventing duplicate submission - button already disabled');
        return;
    }
    
    // Check if there are images selected
    const imageInput = document.getElementById('imageInput');
    const files = imageInput.files;
    
    console.log('Selected files:', files ? files.length : 0);
    
    if (!files || files.length === 0) {
        console.log('No files selected');
        showToast('Please add at least one image to your post');
        return;
    }
    
    // Update submit button state
    const originalText = submitBtn.innerHTML;
    submitBtn.innerHTML = '<span class="inline-block animate-pulse">Sharing...</span>';
    submitBtn.disabled = true;
    submitBtn.classList.add('opacity-70');
    console.log('Submit button disabled to prevent duplicate submission');
    
    // Create a new FormData instance
    const formData = new FormData();
    
    // Add the caption content
    const contentField = form.querySelector('textarea[name="content"]');
    const titleField = form.querySelector('input[name="title"]');
    
    if (contentField) {
        formData.append('content', contentField.value);
        console.log('Added content to form data:', contentField.value.substring(0, 30) + '...');
    }
    
    if (titleField) {
        formData.append('title', titleField.value);
        console.log('Added title to form data:', titleField.value);
    }
    
    // Append image files to form data
    Array.from(files).forEach((file, index) => {
        // Rename files for better organization on server
        const newFile = new File([file], `image-${index}.${file.name.split('.').pop()}`, {
            type: file.type
        });
        formData.append('processedImages', newFile);
        console.log(`Added image ${index+1} (${file.name}) to form data`);
    });
    
    // Clone the form and replace it to prevent duplicate submissions
    console.log('Cloning form to prevent duplicate submissions');
    const oldForm = form;
    const newForm = oldForm.cloneNode(true);
    oldForm.parentNode.replaceChild(newForm, oldForm);
    
    // Reattach the event listener to the new form
    newForm.addEventListener('submit', handlePostSubmit);
    console.log('Reattached event listener to new form');

    try {
        console.log('Sending POST request to /post endpoint');
        const response = await fetch('/post', {
            method: 'POST',
            body: formData
        });
        
        console.log('Response received:', response.status);
        
        if (response.ok) {
            // Parse the JSON response
            const data = await response.json();
            console.log('Success response:', data);
            showToast(data.message || 'Post shared successfully!');
            closeCreatePostModal();
            
            // Reload the page after a short delay
            console.log('Will reload page in 1.5 seconds');
            setTimeout(() => {
                window.location.reload();
            }, 1500);
        } else {
            console.error('Error response:', response.status);
            let errorData;
            try {
                errorData = await response.json();
                console.error('Error data:', errorData);
            } catch (e) {
                console.error('Could not parse error response as JSON:', e);
            }
            showToast('Error: ' + (errorData?.message || 'Could not create post'));
        }
    } catch (error) {
        console.error('Network error creating post:', error);
        showToast('Network error. Please try again.');
    } finally {
        console.log('Resetting button state');
        // Reset button state
        submitBtn.innerHTML = originalText;
        submitBtn.disabled = false;
        submitBtn.classList.remove('opacity-70');
    }
}

// Function to remove image from previews (if needed)
function removeImage(index) {
    // This function could be implemented if needed for image removal
    // For now the upload refreshes all images
}

// Handle image selection
function handleImageSelect(event) {
    const files = event.target.files;
    if (!files || files.length === 0) return;
    
    const previewContainer = document.getElementById('imagePreviewContainer');
    const previewGrid = previewContainer.querySelector('div');
    const uploadPlaceholder = document.getElementById('imageUploadPlaceholder');
    const addMoreBtn = document.getElementById('addMoreImagesBtn');
    
    // Clear previous previews
    previewGrid.innerHTML = '';
    
    // Show preview container and hide placeholder
    previewContainer.classList.remove('hidden');
    uploadPlaceholder.classList.add('hidden');
    
    // Show add more button after at least one image is selected
    if (files.length > 0) {
        addMoreBtn.classList.remove('hidden');
    }
    
    // Create preview for each file
    Array.from(files).forEach((file, index) => {
        const reader = new FileReader();
        
        reader.onload = function(e) {
            const previewItem = document.createElement('div');
            previewItem.className = 'relative aspect-square';
            
            const img = document.createElement('img');
            img.src = e.target.result;
            img.className = 'w-full h-full object-cover';
            
            previewItem.appendChild(img);
            previewGrid.appendChild(previewItem);
        }
        
        reader.readAsDataURL(file);
    });
    
    // Update the form's submit button state
    updateSubmitButtonState();
}

// Add event listeners for character counts
document.addEventListener('DOMContentLoaded', function() {
    const titleInput = document.querySelector('input[name="title"]');
    const captionInput = document.querySelector('textarea[name="content"]');
    const titleCharCount = document.getElementById('titleCharCount');
    const captionCharCount = document.getElementById('captionCharCount');
    
    titleInput.addEventListener('input', function() {
        titleCharCount.textContent = `${this.value.length}/50`;
        updateSubmitButtonState();
    });
    
    captionInput.addEventListener('input', function() {
        captionCharCount.textContent = `${this.value.length}/2200`;
        updateSubmitButtonState();
    });
    
    // Handle click on add more images button
    document.getElementById('addMoreImagesBtn').addEventListener('click', function() {
        document.getElementById('imageInput').click();
    });
});

// Function to update submit button state
function updateSubmitButtonState() {
    const titleInput = document.querySelector('input[name="title"]');
    const captionInput = document.querySelector('textarea[name="content"]');
    const imageInput = document.getElementById('imageInput');
    const submitBtn = document.getElementById('submitPostBtn');
    
    const hasTitle = titleInput.value.trim().length > 0;
    const hasCaption = captionInput.value.trim().length > 0;
    const hasImages = imageInput.files && imageInput.files.length > 0;
    
    submitBtn.disabled = !(hasTitle && hasCaption && hasImages);
    submitBtn.classList.toggle('opacity-50', !(hasTitle && hasCaption && hasImages));
}

// Handle story upload
function handleStoryUpload(event) {
    const file = event.target.files[0];
    
    if (!file) return;
    
    if (!file.type.startsWith('image/') && !file.type.startsWith('video/')) {
        showToast('Please select an image or video file');
        return;
    }

    storyFile = file;
    
    // Show preview
    const previewContainer = document.getElementById('storyPreviewContainer');

    if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = function(e) {
            previewContainer.innerHTML = `<img src="${e.target.result}" class="w-full h-full object-cover">`;
            document.getElementById('storyPreviewModal').classList.remove('hidden');
        };
        reader.readAsDataURL(file);
    } else if (file.type.startsWith('video/')) {
        const reader = new FileReader();
        reader.onload = function(e) {
            previewContainer.innerHTML = `
                <video src="${e.target.result}" class="w-full h-full object-cover" autoplay muted loop></video>
            `;
            document.getElementById('storyPreviewModal').classList.remove('hidden');
        };
        reader.readAsDataURL(file);
    }
}

// Upload story
async function uploadStory() {
    if (!storyFile) {
        showToast('Please select a file first');
        return;
    }

    const formData = new FormData();
    formData.append('story', storyFile);

    try {
        const response = await fetch('/story', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (data.success) {
            closeStoryPreview();
            showToast('Story uploaded successfully!');
            // Update UI to show active story if needed
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            const errorMsg = data.error || 'Error uploading story';
            const details = data.details ? `: ${data.details}` : '';
            showToast(`${errorMsg}${details}`);
        }
    } catch (error) {
        console.error('Error:', error);
        showToast('Error uploading story. Please try again.');
    }
}

// Close story preview
function closeStoryPreview() {
    document.getElementById('storyPreviewModal').classList.add('hidden');
    document.getElementById('storyUpload').value = '';
    storyFile = null;
}

// Delete confirmation functionality
function showDeleteConfirmation(postId) {
    console.log('Showing delete confirmation for post:', postId);
    currentPostId = postId;
    
    // Get the modal and ensure it has the correct display properties
    const modal = document.getElementById('deleteConfirmModal');
    modal.style.display = 'flex';
    modal.classList.remove('hidden');
    
    // Prevent body scrolling when modal is open
    document.body.style.overflow = 'hidden';
}

function closeDeleteConfirmModal() {
    console.log('Closing delete confirmation modal');
    const modal = document.getElementById('deleteConfirmModal');
    modal.classList.add('hidden');
    modal.style.display = 'none';
    
    // Re-enable body scrolling
    document.body.style.overflow = '';
    currentPostId = null;
}

// Confirm delete post action
async function confirmDeletePost() {
    console.log('Confirming delete for post ID:', currentPostId);
    
    if (!currentPostId) {
        console.error('No post ID found for deletion');
        return;
    }
    
    try {
        console.log(`Sending DELETE request to /post/${currentPostId}/delete`);
        const response = await fetch(`/post/${currentPostId}/delete`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        console.log('Delete response status:', response.status);
        
        if (response.ok) {
            // Remove from DOM with animation
            const postElement = document.querySelector(`[data-post-id="${currentPostId}"]`);
            if (postElement) {
                console.log('Found post element, removing from DOM');
                postElement.classList.add('scale-0', 'opacity-0');
                setTimeout(() => {
                    postElement.remove();
                    
                    // Update post count
                    const postsCount = document.querySelector('span.block.text-base.md\\:text-lg.font-bold');
                    if (postsCount) {
                        const currentCount = parseInt(postsCount.textContent) - 1;
                        postsCount.textContent = currentCount;
                    }
                    
                    // Show empty state if no posts left
                    const postGrid = document.querySelector('.grid');
                    if (postGrid && postGrid.children.length === 0) {
                        postGrid.parentElement.innerHTML = `
                            <div class="flex flex-col items-center justify-center py-12 text-center">
                                <div class="text-5xl text-gray-300 dark:text-gray-600 mb-4">
                                    <i class="fas fa-camera"></i>
                                </div>
                                <p class="text-gray-500 dark:text-gray-400 mb-2">No posts yet</p>
                                <p class="text-sm text-gray-400 dark:text-gray-500">When you share photos, they'll appear here.</p>
                            </div>
                        `;
                    }
                }, 300);
            } else {
                console.error('Post element not found in DOM');
            }
            
            showToast('Post deleted successfully');
        } else {
            console.error('Error in delete response:', response.status);
            let errorData;
            try {
                errorData = await response.json();
                console.error('Error data:', errorData);
            } catch (e) {
                console.error('Could not parse error response as JSON');
            }
            showToast(errorData?.error || 'Failed to delete post');
        }
        closeDeleteConfirmModal();
    } catch (error) {
        console.error('Exception in delete post:', error);
        showToast('An error occurred while deleting the post');
        closeDeleteConfirmModal();
    }
}

// Event listeners for clicks outside menu
document.addEventListener('click', function(e) {
    if (e.target.closest('#postOptionsMenu')) {
        // Clicks inside the menu should be handled by their own handlers
        return;
    }
    
    // Close menu when clicking outside
    if (document.getElementById('postOptionsMenu') && !document.getElementById('postOptionsMenu').classList.contains('hidden')) {
        closePostMenu();
    }
});

// Close modals when clicking outside
window.addEventListener('click', function(event) {
    const deleteConfirmModal = document.getElementById('deleteConfirmModal');
    const storyPreviewModal = document.getElementById('storyPreviewModal');
    const createPostModal = document.getElementById('createPostModal');
    
    if (event.target === deleteConfirmModal) closeDeleteConfirmModal();
    if (event.target === storyPreviewModal) closeStoryPreview();
    if (event.target === createPostModal) closeCreatePostModal();
});

// Toast notification function
function showToast(message) {
    // If toast exists, remove it
    let toast = document.getElementById('toast');
    if (toast) {
        document.body.removeChild(toast);
    }
    
    // Create new toast
    toast = document.createElement('div');
    toast.id = 'toast';
    toast.className = 'fixed bottom-5 left-1/2 transform -translate-x-1/2 bg-gray-800 dark:bg-gray-700 text-white px-6 py-3 rounded-lg shadow-lg z-50 opacity-0 transition-opacity duration-300';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    // Show toast
    setTimeout(() => {
        toast.classList.add('opacity-100');
    }, 100);
    
    // Hide toast after 3 seconds
    setTimeout(() => {
        toast.classList.remove('opacity-100');
        
        // Remove after fade out
        setTimeout(() => {
            if (toast.parentNode) {
                document.body.removeChild(toast);
            }
        }, 300);
    }, 3000);
}

function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
}

function highlight() {
    dropZone.classList.add('bg-blue-50', 'dark:bg-blue-900', 'border-2', 'border-dashed', 'border-blue-300', 'dark:border-blue-700');
}

function unhighlight() {
    dropZone.classList.remove('bg-blue-50', 'dark:bg-blue-900', 'border-2', 'border-dashed', 'border-blue-300', 'dark:border-blue-700');
}

function handleDrop(e) {
    const dt = e.dataTransfer;
    const files = dt.files;
    
    // Update file input with dropped files
    if (files && files.length > 0) {
        // Unfortunately, we can't directly set FileList to an input
        // So we'll trigger the change event handler manually
        document.getElementById('imageInput').files = files;
        handleImageSelect({target: {files: files}});
    }
}

// Function to handle direct delete button click
function deletePostClicked() {
    console.log('Delete button clicked directly, current post ID:', currentPostId);
    closePostMenu();
    showDeleteConfirmation(currentPostId);
}
</script>

</body>
</html>
