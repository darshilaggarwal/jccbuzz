<%- include('partials/header') %>

<div class="max-w-4xl mx-auto mt-8 px-4">
    <!-- Profile Header - Instagram-like -->
    <div class="bg-white dark:bg-black rounded-lg shadow-md p-6 mb-8">
        <div class="flex flex-col md:flex-row md:items-center gap-6">
            <!-- Profile Image -->
            <div class="flex justify-center md:justify-start">
                <img src="<%= profileUser.profileImage %>" 
                     alt="Profile" 
                     class="w-24 h-24 md:w-32 md:h-32 rounded-full object-cover border-2 border-gray-200 dark:border-gray-800">
            </div>
            
            <!-- Profile Info -->
            <div class="flex-grow">
                <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                    <div>
                        <h1 class="text-xl md:text-2xl font-bold text-gray-800 dark:text-white"><%= profileUser.name %></h1>
                        <div class="flex items-center">
                            <p class="text-gray-500 dark:text-gray-400">@<%= profileUser.username %></p>
                            <% if (profileUser.isPrivate) { %>
                                <span class="ml-2 text-xs bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-2 py-0.5 rounded-full flex items-center">
                                    <i class="fas fa-lock text-xs mr-1"></i> Private
                                </span>
                            <% } %>
                        </div>
                    </div>
                    <div class="flex space-x-2">
                        <% if (!isOwnProfile) { %>
                            <% 
                                let followBtnText = 'Follow';
                                let followBtnClass = 'bg-blue-600 text-white hover:bg-blue-700';
                                
                                // Current following status check
                                const isFollowing = user.following && user.following.some(id => id.toString() === profileUser._id.toString());
                                
                                // Check if there's a pending follow request
                                const hasRequestedFollow = profileUser.followRequests && 
                                    profileUser.followRequests.some(req => req.user && req.user.toString() === user._id.toString());
                                
                                if (isFollowing) {
                                    followBtnText = 'Following';
                                    followBtnClass = 'bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600';
                                } else if (hasRequestedFollow) {
                                    followBtnText = 'Requested';
                                    followBtnClass = 'bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600';
                                }
                            %>
                            <button id="followButton"
                                    onclick="toggleFollow('<%= profileUser._id %>')"
                                    class="px-4 py-2 rounded-md transition-colors <%= followBtnClass %>">
                                <%= followBtnText %>
                            </button>
                            <a href="/chat/<%= profileUser._id %>" 
                               class="inline-flex items-center justify-center px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white rounded-md hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                                <i class="fas fa-paper-plane mr-2"></i>
                                Message
                            </a>
                        <% } %>
                    </div>
                </div>
                
                <p class="mt-2 text-gray-600 dark:text-gray-300"><%= profileUser.bio %></p>
                
                <!-- Stats - Instagram Style -->
                <div class="flex justify-around md:justify-start md:space-x-8 mt-4 py-3 border-t border-b border-gray-200 dark:border-gray-800">
                    <div class="text-center md:text-left">
                        <span class="block text-base md:text-lg font-bold text-gray-800 dark:text-white"><%= profileUser.posts.length %></span>
                        <span class="text-sm text-gray-500 dark:text-gray-400">posts</span>
                    </div>
                    <button onclick="showFollowers('<%= profileUser._id %>')" class="text-center md:text-left hover:opacity-80 transition">
                        <span id="followersCount" class="block text-base md:text-lg font-bold text-gray-800 dark:text-white"><%= profileUser.followers ? profileUser.followers.length : 0 %></span>
                        <span class="text-sm text-gray-500 dark:text-gray-400">followers</span>
                    </button>
                    <button onclick="showFollowing('<%= profileUser._id %>')" class="text-center md:text-left hover:opacity-80 transition">
                        <span id="followingCount" class="block text-base md:text-lg font-bold text-gray-800 dark:text-white"><%= profileUser.following ? profileUser.following.length : 0 %></span>
                        <span class="text-sm text-gray-500 dark:text-gray-400">following</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Posts Section - Instagram Grid Style -->
    <div class="bg-white dark:bg-black rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
            <i class="fas fa-th mr-2"></i> Posts
        </h2>
        
        <% 
        // Check if user should be allowed to see posts
        const canViewPosts = isOwnProfile || 
                           !profileUser.isPrivate || 
                           (user.following && user.following.some(id => id.toString() === profileUser._id.toString()));
        %>
        
        <% if (profileUser.isPrivate && !canViewPosts) { %>
            <!-- Private account notice -->
            <div class="flex flex-col items-center justify-center py-12 text-center">
                <div class="text-5xl text-gray-300 dark:text-gray-600 mb-4">
                    <i class="fas fa-lock"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">This account is private</h3>
                <p class="text-sm text-gray-500 dark:text-gray-400">Follow this account to see their photos and videos.</p>
            </div>
        <% } else if (profileUser.posts.length === 0) { %>
            <div class="flex flex-col items-center justify-center py-12 text-center">
                <div class="text-5xl text-gray-300 dark:text-gray-600 mb-4">
                    <i class="fas fa-camera"></i>
                </div>
                <p class="text-gray-500 dark:text-gray-400 mb-2">No posts yet</p>
                <p class="text-sm text-gray-400 dark:text-gray-500">When <%= isOwnProfile ? 'you share' : profileUser.name + ' shares' %> photos, they'll appear here.</p>
            </div>
        <% } else { %>
            <div class="grid grid-cols-2 md:grid-cols-3 gap-2 md:gap-4">
                <% profileUser.posts.forEach(post => { %>
                    <a href="/post/<%= post._id %>" class="group relative aspect-square overflow-hidden rounded-md block transform transition hover:scale-[0.98]" data-post-id="<%= post._id %>">
                        <% if (post.images && post.images.length > 0) { %>
                            <img src="<%= post.images[0].url %>" 
                                alt="Post thumbnail"
                                class="w-full h-full object-cover">
                                
                            <% if (post.images.length > 1) { %>
                                <div class="absolute top-2 right-2 text-white">
                                    <i class="fas fa-clone"></i>
                                </div>
                            <% } %>
                        <% } else { %>
                            <!-- Show text content for posts without images -->
                            <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600 p-4 text-white overflow-hidden">
                                <p class="text-center text-sm md:text-base line-clamp-6 font-medium">
                                    <%= post.content || post.title || 'No content' %>
                                </p>
                            </div>
                        <% } %>
                        
                        <!-- Post Overlay on Hover -->
                        <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center space-x-6 text-white">
                            <div class="flex items-center">
                                <i class="fas fa-heart mr-2"></i>
                                <span><%= post.likes.length %></span>
                            </div>
                            <div class="flex items-center">
                                <i class="fas fa-comment mr-2"></i>
                                <span><%= post.comments.length %></span>
                            </div>
                        </div>
                        
                        <% if (isOwnProfile) { %>
                        <!-- Three dots menu trigger -->
                        <div class="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                            <button class="w-8 h-8 rounded-full bg-black bg-opacity-50 text-white flex items-center justify-center hover:bg-opacity-70 transition" 
                                   onclick="event.preventDefault(); showPostMenu(event, '<%= post._id %>')">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                        </div>
                        <% } %>
                    </a>
                <% }) %>
            </div>
        <% } %>
    </div>
</div>

<!-- Followers Modal - Instagram Style -->
<div id="followersModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4">
        <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Followers</h3>
            <button onclick="closeFollowersModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div id="followersList" class="max-h-96 overflow-y-auto p-2">
            <!-- Followers will be loaded here -->
            <div class="flex justify-center py-8">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-800 dark:border-white"></div>
            </div>
        </div>
    </div>
</div>

<!-- Following Modal - Instagram Style -->
<div id="followingModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4">
        <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Following</h3>
            <button onclick="closeFollowingModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div id="followingList" class="max-h-96 overflow-y-auto p-2">
            <!-- Following users will be loaded here -->
            <div class="flex justify-center py-8">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-800 dark:border-white"></div>
            </div>
        </div>
    </div>
</div>

<!-- Unfollow Confirmation Modal -->
<div id="unfollowModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4 p-4 flex flex-col items-center">
        <img id="unfollowUserImage" src="" alt="Profile" class="w-16 h-16 rounded-full object-cover mb-4">
        <p class="text-center mb-6 text-gray-800 dark:text-white">Unfollow <span id="unfollowUsername" class="font-semibold"></span>?</p>
        <div class="w-full border-t border-gray-200 dark:border-gray-700"></div>
        <button id="confirmUnfollow" class="w-full py-3 text-red-500 font-medium">
            Unfollow
        </button>
        <div class="w-full border-t border-gray-200 dark:border-gray-700"></div>
        <button onclick="closeUnfollowModal()" class="w-full py-3 text-gray-800 dark:text-white">
            Cancel
        </button>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteConfirmModal" class="hidden fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg w-full max-w-md mx-4 p-6">
        <h3 class="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Delete Post</h3>
        <p class="mb-6 text-gray-600 dark:text-gray-300">Are you sure you want to delete this post? This action cannot be undone.</p>
        <div class="flex justify-end space-x-3">
            <button onclick="closeDeleteConfirmModal()" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors text-gray-800 dark:text-white">
                Cancel
            </button>
            <button id="confirmDeleteBtn" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors">
                Delete
            </button>
        </div>
    </div>
</div>

<!-- Post Options Menu -->
<div id="postOptionsMenu" class="fixed hidden bg-white dark:bg-gray-900 rounded-lg shadow-xl z-50 overflow-hidden w-48">
    <ul class="divide-y divide-gray-100 dark:divide-gray-800">
        <li>
            <a href="#" id="editPostOption" class="px-4 py-3 flex items-center text-gray-800 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 transition">
                <i class="fas fa-edit mr-3 text-blue-500"></i> Edit
            </a>
        </li>
        <li>
            <button id="deletePostOption" class="w-full px-4 py-3 flex items-center text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-800 transition">
                <i class="fas fa-trash mr-3"></i> Delete
            </button>
        </li>
    </ul>
</div>

<!-- Style tweaks for the profile page -->
<style>
.line-clamp-6 {
    display: -webkit-box;
    -webkit-line-clamp: 6;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.post-menu-backdrop {
    background: rgba(0, 0, 0, 0.5);
    position: fixed;
    inset: 0;
    z-index: 40;
}

@media (max-width: 640px) {
    .line-clamp-6 {
        -webkit-line-clamp: 4;
    }
}
</style>

<!-- Add Swiper JS for image carousel -->
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>

<script>
// Track the currently selected post
let currentPostId = null;

async function toggleFollow(userId) {
    try {
        // Check if currently following before making the request
        const followButton = document.getElementById('followButton');
        const isCurrentlyFollowing = followButton.textContent.trim() === 'Following';
        
        // Show custom unfollow confirmation modal if trying to unfollow
        if (isCurrentlyFollowing) {
            // Get user info
            const username = document.querySelector('p.text-gray-500').textContent.trim();
            const profileImage = document.querySelector('.rounded-full').src;
            const name = document.querySelector('h1.text-xl').textContent.trim();
            
            // Set modal content
            document.getElementById('unfollowUserImage').src = profileImage;
            document.getElementById('unfollowUsername').textContent = username;
            
            // Show the modal
            document.getElementById('unfollowModal').classList.remove('hidden');
            
            // Set up confirmation button handler (using a promise to wait for user decision)
            return new Promise((resolve) => {
                document.getElementById('confirmUnfollow').onclick = async () => {
                    // Close modal
                    closeUnfollowModal();
                    // Continue with unfollow logic
                    await performFollowToggle(userId);
                    resolve();
                };
            });
        } else {
            // Not unfollowing, proceed directly
            await performFollowToggle(userId);
        }
    } catch (error) {
        console.error('Error:', error);
    }
}

// Function to actually perform the follow/unfollow action
async function performFollowToggle(userId) {
    try {
        const followButton = document.getElementById('followButton');
        const isCurrentlyFollowing = followButton.textContent.trim() === 'Following';
        
        const response = await fetch(`/user/${userId}/follow`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin' // Ensure cookies are sent with the request
        });
        
        const data = await response.json();
        
        if (data.success) {
            const followersCount = document.getElementById('followersCount');
            
            // Update button text and style
            if (data.following) {
                followButton.textContent = 'Following';
                followButton.classList.remove('bg-blue-600', 'hover:bg-blue-700');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white', 'hover:bg-gray-300', 'dark:hover:bg-gray-600');
                
                // Save state to localStorage
                localStorage.setItem(`following_${userId}`, 'true');
                
                // Show toast
                showToast('You are now following ' + document.querySelector('h1').textContent.trim());
            } else if (data.followRequested) {
                followButton.textContent = 'Requested';
                followButton.classList.remove('bg-blue-600', 'hover:bg-blue-700');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white', 'hover:bg-gray-300', 'dark:hover:bg-gray-600');
                
                // Save state to localStorage
                localStorage.setItem(`requested_${userId}`, 'true');
                
                // Show toast
                showToast('Follow request sent to ' + document.querySelector('h1').textContent.trim());
            } else {
                followButton.textContent = 'Follow';
                followButton.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white', 'hover:bg-gray-300', 'dark:hover:bg-gray-600');
                followButton.classList.add('bg-blue-600', 'text-white', 'hover:bg-blue-700');
                
                // Update localStorage
                localStorage.removeItem(`following_${userId}`);
                localStorage.removeItem(`requested_${userId}`);
                
                // Show toast
                showToast('You unfollowed ' + document.querySelector('h1').textContent.trim());
            }
            
            // Update followers count with animation
            const oldCount = parseInt(followersCount.textContent);
            const newCount = data.followers;
            
            if (oldCount !== newCount) {
                followersCount.classList.add('scale-125', 'text-blue-500');
                setTimeout(() => {
                    followersCount.textContent = newCount;
                    setTimeout(() => {
                        followersCount.classList.remove('scale-125', 'text-blue-500');
                    }, 300);
                }, 300);
            }
        }
    } catch (error) {
        console.error('Error:', error);
        showToast('Something went wrong. Please try again.');
    }
}

function closeUnfollowModal() {
    document.getElementById('unfollowModal').classList.add('hidden');
}

async function showFollowers(userId) {
    try {
        document.getElementById('followersModal').classList.remove('hidden');
        
        const response = await fetch(`/user/${userId}/followers`);
        const data = await response.json();
        
        const followersList = document.getElementById('followersList');
        
        if (data.followers.length === 0) {
            followersList.innerHTML = `
                <div class="py-8 text-center">
                    <p class="text-gray-500 dark:text-gray-400">No followers yet</p>
                </div>
            `;
            return;
        }
        
        followersList.innerHTML = data.followers.map(follower => `
            <div class="flex items-center justify-between p-3 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg transition">
                <a href="/user/${follower.username}" class="flex items-center space-x-3">
                    <img src="${follower.profileImage}" alt="${follower.name}" class="w-10 h-10 rounded-full object-cover">
                    <div>
                        <p class="font-semibold text-gray-800 dark:text-white">${follower.name}</p>
                        <p class="text-sm text-gray-500 dark:text-gray-400">@${follower.username}</p>
                    </div>
                </a>
                <button 
                    class="px-3 py-1 text-sm rounded border border-gray-300 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-800 dark:text-white"
                    onclick="window.location.href='/user/${follower.username}'">
                    View
                </button>
            </div>
        `).join('');
        
    } catch (error) {
        console.error('Error:', error);
        showToast('Failed to load followers');
    }
}

async function showFollowing(userId) {
    try {
        document.getElementById('followingModal').classList.remove('hidden');
        
        const response = await fetch(`/user/${userId}/following`);
        const data = await response.json();
        
        const followingList = document.getElementById('followingList');
        
        if (data.following.length === 0) {
            followingList.innerHTML = `
                <div class="py-8 text-center">
                    <p class="text-gray-500 dark:text-gray-400">Not following anyone yet</p>
                </div>
            `;
            return;
        }
        
        followingList.innerHTML = data.following.map(user => `
            <div class="flex items-center justify-between p-3 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg transition">
                <a href="/user/${user.username}" class="flex items-center space-x-3">
                    <img src="${user.profileImage}" alt="${user.name}" class="w-10 h-10 rounded-full object-cover">
                    <div>
                        <p class="font-semibold text-gray-800 dark:text-white">${user.name}</p>
                        <p class="text-sm text-gray-500 dark:text-gray-400">@${user.username}</p>
                    </div>
                </a>
                <button 
                    class="px-3 py-1 text-sm rounded border border-gray-300 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-800 dark:text-white"
                    onclick="window.location.href='/user/${user.username}'">
                    View
                </button>
            </div>
        `).join('');
        
    } catch (error) {
        console.error('Error:', error);
        showToast('Failed to load following list');
    }
}

function closeFollowersModal() {
    document.getElementById('followersModal').classList.add('hidden');
}

function closeFollowingModal() {
    document.getElementById('followingModal').classList.add('hidden');
}

// Function to show post options menu
function showPostMenu(event, postId) {
    event.preventDefault();
    event.stopPropagation();
    
    // Get elements
    const menu = document.getElementById('postOptionsMenu');
    const editOption = document.getElementById('editPostOption');
    const deleteOption = document.getElementById('deletePostOption');
    
    // Set current post ID and update edit link
    currentPostId = postId;
    if (editOption) {
        editOption.href = '/edit/' + postId;
    }
    
    // Position the menu near the button that was clicked
    const buttonRect = event.currentTarget.getBoundingClientRect();
    const menuWidth = 192; // w-48 = 12rem = 192px
    
    // Calculate position (try to keep it within viewport)
    const leftPosition = Math.min(
        buttonRect.left,
        window.innerWidth - menuWidth - 10
    );
    
    menu.style.left = `${leftPosition}px`;
    menu.style.top = `${buttonRect.bottom + 5}px`;
    
    // Add a backdrop that will close the menu when clicked
    const backdrop = document.createElement('div');
    backdrop.className = 'post-menu-backdrop';
    backdrop.id = 'menuBackdrop';
    backdrop.addEventListener('click', closePostMenu);
    document.body.appendChild(backdrop);
    
    // Show the menu with animation
    menu.style.opacity = '0';
    menu.style.transform = 'translateY(-10px)';
    menu.style.transition = 'opacity 0.2s ease, transform 0.2s ease';
    menu.classList.remove('hidden');
    
    // Trigger animation
    setTimeout(() => {
        menu.style.opacity = '1';
        menu.style.transform = 'translateY(0)';
    }, 10);
    
    // Set up event handlers for menu options
    if (deleteOption) {
        deleteOption.onclick = function(e) {
            e.preventDefault();
            closePostMenu();
            showDeleteConfirmation(postId);
        };
    }
}

// Function to close post menu
function closePostMenu() {
    const menu = document.getElementById('postOptionsMenu');
    const backdrop = document.getElementById('menuBackdrop');
    
    // Hide with animation
    menu.style.opacity = '0';
    menu.style.transform = 'translateY(-10px)';
    
    // Remove after animation completes
    setTimeout(() => {
        menu.classList.add('hidden');
        if (backdrop) {
            document.body.removeChild(backdrop);
        }
    }, 200);
}

// Context menu for posts (Edit/Delete)
document.addEventListener('DOMContentLoaded', function() {
    // Set up event delegation for the three-dots menu
    document.addEventListener('click', function(e) {
        if (e.target.closest('#postOptionsMenu')) {
            // Clicks inside the menu should be handled by their own handlers
            return;
        }
        
        // Close menu when clicking outside
        if (document.getElementById('postOptionsMenu') && !document.getElementById('postOptionsMenu').classList.contains('hidden')) {
            closePostMenu();
        }
    });
    
    // Set up event handlers for new posts that might be added dynamically
    document.addEventListener('mouseover', function(e) {
        const postItem = e.target.closest('[data-post-id]');
        if (postItem) {
            // Add hover class if needed
        }
    });
});

// Close modals when clicking outside
window.addEventListener('click', function(event) {
    const followersModal = document.getElementById('followersModal');
    const followingModal = document.getElementById('followingModal');
    const unfollowModal = document.getElementById('unfollowModal');
    const deleteConfirmModal = document.getElementById('deleteConfirmModal');
    
    if (event.target === followersModal) {
        closeFollowersModal();
    }
    if (event.target === followingModal) {
        closeFollowingModal();
    }
    if (event.target === unfollowModal) {
        closeUnfollowModal();
    }
    if (event.target === deleteConfirmModal) {
        closeDeleteConfirmModal();
    }
});

document.addEventListener('DOMContentLoaded', function() {
    // Add transitions for hover effects
    document.querySelectorAll('[data-post-id]').forEach(post => {
        post.classList.add('transition', 'duration-200');
    });
    
    // Check server-side rendered state
    const followButton = document.getElementById('followButton');
    const profileUserId = '<%= profileUser._id %>';
    
    // Store current state in localStorage on page load to ensure consistency
    if (followButton && followButton.textContent.trim() === 'Following') {
        localStorage.setItem(`following_${profileUserId}`, 'true');
    } else if (followButton) {
        localStorage.removeItem(`following_${profileUserId}`);
    }
});

// Add CSS transitions for followers/following counts
document.head.insertAdjacentHTML('beforeend', `
<style>
/* Transitions and animations */
#followersCount, 
#followingCount {
    transition: all 0.3s ease;
}

.grid-item {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.grid-item:hover {
    transform: scale(0.98);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

/* Mobile optimizations */
@media (max-width: 640px) {
    .grid {
        grid-template-columns: repeat(2, minmax(0, 1fr));
    }
}

/* Dark mode enhancements */
.dark .grid-item {
    border-color: #333;
}

</style>
`);

// Delete confirmation functionality
let postIdToDelete = null;

function showDeleteConfirmation(postId) {
    postIdToDelete = postId;
    document.getElementById('deleteConfirmModal').classList.remove('hidden');
}

function closeDeleteConfirmModal() {
    document.getElementById('deleteConfirmModal').classList.add('hidden');
    postIdToDelete = null;
}

// Set up the confirm delete button
document.addEventListener('DOMContentLoaded', function() {
    const confirmBtn = document.getElementById('confirmDeleteBtn');
    if (confirmBtn) {
        confirmBtn.addEventListener('click', function() {
            if (!postIdToDelete) return;
            
            fetch(`/delete/${postIdToDelete}`, {
                method: 'GET'
            })
            .then(response => {
                if (response.ok) {
                    // Remove the post from the UI
                    const postElement = document.querySelector(`[data-post-id="${postIdToDelete}"]`);
                    if (postElement) {
                        postElement.classList.add('scale-0', 'opacity-0');
                        setTimeout(() => {
                            postElement.remove();
                            
                            // Update post count
                            const postsCount = document.querySelector('span.block.text-base.md\\:text-lg.font-bold');
                            if (postsCount) {
                                const currentCount = parseInt(postsCount.textContent) - 1;
                                postsCount.textContent = currentCount;
                            }
                            
                            // Show empty state if no posts left
                            const postGrid = document.querySelector('.grid');
                            if (postGrid && postGrid.children.length === 0) {
                                postGrid.parentElement.innerHTML = `
                                    <div class="flex flex-col items-center justify-center py-12 text-center">
                                        <div class="text-5xl text-gray-300 dark:text-gray-600 mb-4">
                                            <i class="fas fa-camera"></i>
                                        </div>
                                        <p class="text-gray-500 dark:text-gray-400 mb-2">No posts yet</p>
                                        <p class="text-sm text-gray-400 dark:text-gray-500">When you share photos, they'll appear here.</p>
                                    </div>
                                `;
                            }
                        }, 300);
                    }
                    
                    showToast('Post deleted successfully');
                } else {
                    showToast('Failed to delete post');
                }
                closeDeleteConfirmModal();
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred');
                closeDeleteConfirmModal();
            });
        });
    }
});

// Toast notification function
function showToast(message) {
    // If toast exists, remove it
    let toast = document.getElementById('toast');
    if (toast) {
        document.body.removeChild(toast);
    }
    
    // Create new toast
    toast = document.createElement('div');
    toast.id = 'toast';
    toast.className = 'fixed bottom-5 left-1/2 transform -translate-x-1/2 bg-gray-800 dark:bg-gray-700 text-white px-6 py-3 rounded-lg shadow-lg z-50 opacity-0 transition-opacity duration-300';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    // Show toast
    setTimeout(() => {
        toast.classList.add('opacity-100');
    }, 100);
    
    // Hide toast after 3 seconds
    setTimeout(() => {
        toast.classList.remove('opacity-100');
        
        // Remove after fade out
        setTimeout(() => {
            if (toast.parentNode) {
                document.body.removeChild(toast);
            }
        }, 300);
    }, 3000);
}
</script>

</body>
</html> 