<%- include('partials/header') %>

<div class="max-w-4xl mx-auto mt-8 px-4">
    <!-- Profile Header -->
    <div class="bg-white dark:bg-black border-b border-gray-200 dark:border-gray-800 pb-6">
        <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex flex-col sm:flex-row items-center sm:items-start pt-6 sm:space-x-6">
                <!-- Profile Image -->
                <div class="relative mb-4 sm:mb-0">
                    <div class="<%= profileUser.hasActiveStory ? 'story-ring rounded-full p-[2px]' : '' %>" id="profileImageContainer">
                        <div class="bg-white dark:bg-black p-[1px] rounded-full">
                            <img src="<%= profileUser.profileImage %>" 
                                 alt="<%= profileUser.name %>" 
                                 class="w-24 h-24 sm:w-36 sm:h-36 rounded-full object-cover cursor-pointer" 
                                 id="profileImage">
                        </div>
                    </div>
                </div>
                
                <!-- Profile Info -->
                <div class="flex-1 text-center sm:text-left">
                    <div class="flex flex-col sm:flex-row sm:items-center mb-2">
                        <h1 class="text-xl sm:text-2xl font-semibold text-gray-900 dark:text-white"><%= profileUser.name %></h1>
                        
                        <% if (profileUser.isPrivate) { %>
                            <span class="ml-2 px-2 py-1 text-xs bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full font-medium">Private</span>
                        <% } %>
                        
                        <% if (profileUser.isVerified) { %>
                            <span class="ml-2 text-blue-500"><i class="fas fa-badge-check"></i></span>
                        <% } %>
                    </div>
                    
                    <p class="text-gray-500 dark:text-gray-400 mb-4">@<%= profileUser.username %></p>
                    
                    <!-- Stats & Follow Button Row -->
                    <div class="flex flex-col sm:flex-row items-center">
                        <div class="flex space-x-6 mb-4 sm:mb-0">
                            <div>
                                <span class="text-gray-900 dark:text-white font-semibold"><%= profileUser.posts ? profileUser.posts.length : 0 %></span>
                                <span class="text-gray-500 dark:text-gray-400 text-sm"> posts</span>
                            </div>
                            <button class="focus:outline-none" onclick="showFollowers('<%= profileUser._id %>')">
                                <span class="text-gray-900 dark:text-white font-semibold" id="followersCount"><%= typeof profileUser.followers === 'number' ? profileUser.followers : (profileUser.followers ? profileUser.followers.length : 0) %></span>
                                <span class="text-gray-500 dark:text-gray-400 text-sm"> followers</span>
                            </button>
                            <button class="focus:outline-none" onclick="showFollowing('<%= profileUser._id %>')">
                                <span class="text-gray-900 dark:text-white font-semibold"><%= typeof profileUser.following === 'number' ? profileUser.following : (profileUser.following ? profileUser.following.length : 0) %></span>
                                <span class="text-gray-500 dark:text-gray-400 text-sm"> following</span>
                            </button>
                        </div>
                        
                        <% if (!isOwnProfile) { %>
                            <div class="ml-0 sm:ml-auto">
                                <button id="followButton" 
                                        onclick="performFollowToggle('<%= profileUser._id %>')"
                                        class="px-4 py-2 text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 bg-blue-500 hover:bg-blue-600 text-white">
                                    Follow
                                </button>
                                
                                <button onclick="showMessageModal()"
                                        class="px-4 py-2 text-sm font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 text-gray-800 dark:text-white rounded-md ml-2 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                                    Message
                                </button>
                            </div>
                        <% } else { %>
                            <div class="ml-0 sm:ml-auto">
                                <a href="/edit-profile" 
                                   class="px-4 py-2 text-sm font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 text-gray-800 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                                    Edit Profile
                                </a>
                            </div>
                        <% } %>
                    </div>
                    
                    <!-- Bio -->
                    <% if (profileUser.bio) { %>
                        <div class="mt-4 text-gray-700 dark:text-gray-300">
                            <%= profileUser.bio %>
                        </div>
                    <% } %>
                    
                    <!-- Website -->
                    <% if (profileUser.website) { %>
                        <div class="mt-1">
                            <a href="<%= profileUser.website %>" 
                               target="_blank" 
                               class="text-blue-500 hover:underline">
                                <%= profileUser.website.replace(/(^\w+:|^)\/\//, '') %>
                            </a>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Posts Section - Instagram Grid Style -->
    <div class="bg-white dark:bg-black rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
            <i class="fas fa-th mr-2"></i> Posts
        </h2>
        
        <% 
        // Helper function to check if arrays contain a value
        function idArrayIncludes(array, targetId) {
            if (!array || !Array.isArray(array) || array.length === 0) return false;
            return array.some(id => id && id.toString() === targetId.toString());
        }
        
        // Check if user should be allowed to see posts
        const canViewPosts = isOwnProfile || 
                           !profileUser.isPrivate || 
                           (user && user.following && idArrayIncludes(user.following, profileUser._id));
        %>
        
        <!-- Hidden field to store profile data for JS -->
        <input type="hidden" id="profileUserId" value="<%= profileUser._id %>">
        <input type="hidden" id="isProfilePrivate" value="<%= profileUser.isPrivate %>">
        <input type="hidden" id="canViewPosts" value="<%= canViewPosts %>">
        
        <div id="postsContainer">
        <% if (profileUser.isPrivate && !canViewPosts) { %>
            <!-- Private account notice -->
            <div class="flex flex-col items-center justify-center py-12 text-center">
                <div class="text-5xl text-gray-300 dark:text-gray-600 mb-4">
                    <i class="fas fa-lock"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">This account is private</h3>
                <p class="text-sm text-gray-500 dark:text-gray-400">Follow this account to see their photos and videos.</p>
            </div>
        <% } else if (profileUser.posts.length === 0) { %>
            <div class="flex flex-col items-center justify-center py-12 text-center">
                <div class="text-5xl text-gray-300 dark:text-gray-600 mb-4">
                    <i class="fas fa-camera"></i>
                </div>
                <p class="text-gray-500 dark:text-gray-400 mb-2">No posts yet</p>
                <p class="text-sm text-gray-400 dark:text-gray-500">When <%= isOwnProfile ? 'you share' : profileUser.name + ' shares' %> photos, they'll appear here.</p>
            </div>
        <% } else { %>
            <div class="grid grid-cols-2 md:grid-cols-3 gap-2 md:gap-4">
                <% profileUser.posts.forEach(post => { %>
                    <a href="/post/<%= post._id %>" class="group relative aspect-square overflow-hidden rounded-md block transform transition hover:scale-[0.98]" data-post-id="<%= post._id %>">
                        <% if (post.images && post.images.length > 0) { %>
                            <img src="<%= post.images[0].url %>" 
                                alt="Post thumbnail"
                                class="w-full h-full object-cover">
                                
                            <% if (post.images.length > 1) { %>
                                <div class="absolute top-2 right-2 text-white">
                                    <i class="fas fa-clone"></i>
                                </div>
                            <% } %>
                        <% } else { %>
                            <!-- Show text content for posts without images -->
                            <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600 p-4 text-white overflow-hidden">
                                <p class="text-center text-sm md:text-base line-clamp-6 font-medium">
                                    <%= post.content || post.title || 'No content' %>
                                </p>
                            </div>
                        <% } %>
                        
                        <!-- Post Overlay on Hover -->
                        <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center space-x-6 text-white">
                            <div class="flex items-center">
                                <i class="fas fa-heart mr-2"></i>
                                <span><%= post.likes.length %></span>
                            </div>
                            <div class="flex items-center">
                                <i class="fas fa-comment mr-2"></i>
                                <span><%= post.comments.length %></span>
                            </div>
                        </div>
                        
                        <% if (isOwnProfile) { %>
                        <!-- Three dots menu trigger -->
                        <div class="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                            <button class="w-8 h-8 rounded-full bg-black bg-opacity-50 text-white flex items-center justify-center hover:bg-opacity-70 transition" 
                                   onclick="event.preventDefault(); showPostMenu(event, '<%= post._id %>')">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                        </div>
                        <% } %>
                    </a>
                <% }) %>
            </div>
        <% } %>
        </div>
    </div>
</div>

<!-- Story Viewer Modal -->
<div id="storyModal" class="hidden fixed inset-0 bg-black z-50">
    <div class="relative h-full flex justify-center">
        <!-- Mobile-like container with fixed aspect ratio -->
        <div class="h-full aspect-[9/16] bg-black relative max-w-[500px] w-full">
            <!-- Touch areas for navigation -->
            <div class="absolute inset-0 z-10 flex">
                <div class="w-1/2 h-full" onclick="showPreviousStory()"></div>
                <div class="w-1/2 h-full" onclick="showNextStory()"></div>
            </div>
            
            <button onclick="closeStoryModal()" class="absolute top-4 right-4 text-white text-2xl z-20">
                <i class="fas fa-times"></i>
            </button>
            
            <div class="h-full flex items-center justify-center bg-black">
                <div id="storyImage" class="w-full h-full relative">
                    <!-- Media will be inserted here -->
                </div>
            </div>

            <!-- Story Progress Bars -->
            <div class="absolute top-0 left-0 right-0 flex space-x-1 p-2 z-20">
                <div id="storyProgressBars" class="flex-1 flex space-x-1">
                    <!-- Progress bars will be added here dynamically -->
                </div>
            </div>

            <!-- Story User Info -->
            <div class="absolute top-4 left-4 flex items-center z-20">
                <div class="story-ring p-[2px] rounded-full">
                    <div class="bg-black p-[1px] rounded-full">
                        <img id="storyUserImage" src="" alt="Profile" class="w-8 h-8 rounded-full object-cover">
                    </div>
                </div>
                <div class="ml-2 text-white">
                    <p id="storyUsername" class="font-semibold text-sm"></p>
                    <p id="storyTime" class="text-xs opacity-75"></p>
                </div>
            </div>

            <!-- Story Reply Section -->
            <div class="absolute bottom-4 left-4 right-4 z-20">
                <form onsubmit="replyToStory(event)" class="flex items-center gap-2">
                    <input type="text" 
                           id="storyReplyInput"
                           placeholder="Reply to story..." 
                           class="flex-1 px-4 py-3 rounded-full bg-white/10 text-white placeholder-white/70 backdrop-blur-sm border border-white/20 focus:outline-none focus:ring-2 focus:ring-white/50">
                    <button type="submit" 
                            class="p-3 rounded-full bg-white/10 text-white backdrop-blur-sm border border-white/20 hover:bg-white/20 flex items-center justify-center">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Followers Modal - Instagram Style -->
<div id="followersModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4">
        <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Followers</h3>
            <button onclick="closeFollowersModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div id="followersList" class="max-h-96 overflow-y-auto p-2">
            <!-- Followers will be loaded here -->
            <div class="flex justify-center py-8">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-800 dark:border-white"></div>
            </div>
        </div>
    </div>
</div>

<!-- Following Modal - Instagram Style -->
<div id="followingModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4">
        <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Following</h3>
            <button onclick="closeFollowingModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div id="followingList" class="max-h-96 overflow-y-auto p-2">
            <!-- Following users will be loaded here -->
            <div class="flex justify-center py-8">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-800 dark:border-white"></div>
            </div>
        </div>
    </div>
</div>

<!-- Unfollow Confirmation Modal -->
<div id="unfollowModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4 p-4 flex flex-col items-center">
        <img id="unfollowUserImage" src="" alt="Profile" class="w-16 h-16 rounded-full object-cover mb-4">
        <p class="text-center mb-6 text-gray-800 dark:text-white">Unfollow <span id="unfollowUsername" class="font-semibold"></span>?</p>
        <div class="w-full border-t border-gray-200 dark:border-gray-700"></div>
        <button id="confirmUnfollow" class="w-full py-3 text-red-500 font-medium">
            Unfollow
        </button>
        <div class="w-full border-t border-gray-200 dark:border-gray-700"></div>
        <button onclick="closeUnfollowModal()" class="w-full py-3 text-gray-800 dark:text-white">
            Cancel
        </button>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteConfirmModal" class="hidden fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg w-full max-w-md mx-4 p-6">
        <h3 class="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Delete Post</h3>
        <p class="mb-6 text-gray-600 dark:text-gray-300">Are you sure you want to delete this post? This action cannot be undone.</p>
        <div class="flex justify-end space-x-3">
            <button onclick="closeDeleteConfirmModal()" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors text-gray-800 dark:text-white">
                Cancel
            </button>
            <button id="confirmDeleteBtn" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors">
                Delete
            </button>
        </div>
    </div>
</div>

<!-- Post Options Menu -->
<div id="postOptionsMenu" class="fixed hidden bg-white dark:bg-gray-900 rounded-lg shadow-xl z-50 overflow-hidden w-48">
    <ul class="divide-y divide-gray-100 dark:divide-gray-800">
        <li>
            <a href="#" id="editPostOption" class="px-4 py-3 flex items-center text-gray-800 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 transition">
                <i class="fas fa-edit mr-3 text-blue-500"></i> Edit
            </a>
        </li>
        <li>
            <button id="deletePostOption" class="w-full px-4 py-3 flex items-center text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-800 transition">
                <i class="fas fa-trash mr-3"></i> Delete
            </button>
        </li>
    </ul>
</div>

<!-- Style tweaks for the profile page -->
<style>
.line-clamp-6 {
    display: -webkit-box;
    -webkit-line-clamp: 6;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.post-menu-backdrop {
    background: rgba(0, 0, 0, 0.5);
    position: fixed;
    inset: 0;
    z-index: 40;
}

@media (max-width: 640px) {
    .line-clamp-6 {
        -webkit-line-clamp: 4;
    }
}

.story-ring {
    background: linear-gradient(45deg, #f09433 0%, #e6683c 25%, #dc2743 50%, #cc2366 75%, #bc1888 100%);
}

.story-ring-viewed {
    background: #ccc;
}

/* Remove pulse animation */
@keyframes pulse-ring {
    0% {
        transform: scale(0.98);
        opacity: 0.8;
    }
    50% {
        transform: scale(1);
        opacity: 1;
    }
    100% {
        transform: scale(0.98);
        opacity: 0.8;
    }
}

/* No longer used */
.pulse-ring {
    /* animation: pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite; */
}

.story-progress-bar {
    height: 3px;
    border-radius: 3px;
    transition: width 0.1s linear;
}
</style>

<!-- Add Swiper JS for image carousel -->
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>

<script>
// Track the currently selected post
let currentPostId = null;

// Variables for story handling
let currentStories = [];
let currentStoryIndex = 0;
let currentUserIndex = 0;
let storyTimer = null;

// Document ready handler
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded - initializing profile page');
    
    // Initialize user ID
    window.currentUserId = '<%= user._id %>';
    window.profileUserId = '<%= profileUser._id %>';
    
    // Check if user has active stories and make profile image clickable
    const profileImageContainer = document.getElementById('profileImageContainer');
    const profileImage = document.getElementById('profileImage');
    
    if (profileImageContainer && profileImageContainer.classList.contains('story-ring')) {
        console.log('User has active stories, adding click handler');
        profileImage.addEventListener('click', function() {
            openUserStories(window.profileUserId);
        });
    }
    
    // Update the follow button on page load
    const followButton = document.getElementById('followButton');
    if (!followButton) return;
    
    const profileId = '<%= profileUser._id %>';
    
    // Check if follow status is in localStorage first (faster response)
    const isFollowing = localStorage.getItem(`following_${profileId}`) === 'true';
    const hasRequested = localStorage.getItem(`followRequested_${profileId}`) === 'true';
    
    if (isFollowing) {
        followButton.textContent = 'Following';
        followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
        followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
    } else if (hasRequested) {
        followButton.textContent = 'Requested';
        followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
        followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
    }
    
    // Then check with the server for accurate status
    fetch(`/api/follow-status/${profileId}`)
        .then(response => response.json())
        .then(data => {
            if (data.following) {
                followButton.textContent = 'Following';
                followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                localStorage.setItem(`following_${profileId}`, 'true');
                localStorage.removeItem(`followRequested_${profileId}`);
            } else if (data.followRequested) {
                followButton.textContent = 'Requested';
                followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                localStorage.setItem(`followRequested_${profileId}`, 'true');
                localStorage.removeItem(`following_${profileId}`);
            } else {
                followButton.textContent = 'Follow';
                followButton.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                followButton.classList.add('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                localStorage.removeItem(`following_${profileId}`);
                localStorage.removeItem(`followRequested_${profileId}`);
            }
        })
        .catch(error => {
            console.error('Error checking follow status:', error);
        });
    
    // Set up delete button handler
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener('click', function() {
            deletePost(postIdToDelete);
        });
    }
    
    // Add transitions for hover effects
    document.querySelectorAll('[data-post-id]').forEach(post => {
        post.classList.add('transition', 'duration-200');
    });
    
    // Check follow status once
    checkFollowStatus();
});

// Function to actually perform the follow/unfollow action
async function performFollowToggle(userId) {
    try {
        const followButton = document.getElementById('followButton');
        if (!followButton) return;
        
        const isCurrentlyFollowing = followButton.textContent.trim() === 'Following';
        const hasRequestedFollow = followButton.textContent.trim() === 'Requested';
        
        // Disable button during request
        followButton.disabled = true;
        
        // Show loading state
        const originalText = followButton.textContent;
        followButton.innerHTML = '<span class="inline-block animate-spin mr-1">⟳</span> ' + originalText;
        
        console.log(`Toggling follow for user ID: ${userId}`);
        
        const response = await fetch(`/user/${userId}/follow`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin' // Ensure cookies are sent with the request
        });
        
        const data = await response.json();
        console.log('Follow toggle response:', data);
        
        if (data.error) {
            showToast(data.error);
            followButton.disabled = false;
            followButton.textContent = originalText;
            return;
        }
        
        const followersCountElement = document.getElementById('followersCount');
        
        if (isCurrentlyFollowing) {
            // User was following, now unfollowing
            followButton.textContent = 'Follow';
            followButton.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
            followButton.classList.add('bg-blue-500', 'hover:bg-blue-600', 'text-white');
            
            // Update followers count with animation
            if (followersCountElement) {
                const currentCount = parseInt(followersCountElement.textContent);
                followersCountElement.textContent = Math.max(0, currentCount - 1);
            }
            
            // Update local storage
            localStorage.removeItem(`following_${userId}`);
            localStorage.removeItem(`followRequested_${userId}`);
            
            showToast('Unfollowed successfully');
            
        } else if (hasRequestedFollow) {
            // User had requested to follow, now cancelling request
            followButton.textContent = 'Follow';
            followButton.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
            followButton.classList.add('bg-blue-500', 'hover:bg-blue-600', 'text-white');
            
            // Update local storage
            localStorage.removeItem(`followRequested_${userId}`);
            
            showToast('Follow request cancelled');
            
        } else {
            // User was not following, now following or requesting
            if (data.followRequested) {
                // Private account - show requested state
                followButton.textContent = 'Requested';
                followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                
                // Update local storage
                localStorage.setItem(`followRequested_${userId}`, 'true');
                
                showToast('Follow request sent');
                
            } else {
                // Public account - show following state
                followButton.textContent = 'Following';
                followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                
                // Update followers count with animation
                if (followersCountElement) {
                    const currentCount = parseInt(followersCountElement.textContent) || 0;
                    followersCountElement.textContent = currentCount + 1;
                }
                
                // Update local storage
                localStorage.setItem(`following_${userId}`, 'true');
                
                showToast('Following successfully');
            }
        }
        
        // Check if we need to refresh the page to show posts for a private account
        if (data.following && document.getElementById('isProfilePrivate').value === 'true') {
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }
    } catch (error) {
        console.error('Error:', error);
        showToast('An error occurred while processing your request.');
    } finally {
        // Re-enable button
        const followButton = document.getElementById('followButton');
        if (followButton) followButton.disabled = false;
    }
}

// Toast notification for feedback
function showToast(message) {
    console.log('Showing toast:', message);
    
    // Check if toast container exists, if not create it
    let toast = document.getElementById('toast');
    if (!toast) {
        toast = document.createElement('div');
        toast.id = 'toast';
        toast.className = 'fixed bottom-5 left-1/2 transform -translate-x-1/2 translate-y-full transition-all duration-300 z-50 opacity-0';
        toast.innerHTML = `
            <div class="bg-black bg-opacity-75 text-white px-6 py-3 rounded-full shadow-lg backdrop-blur-sm">
                <span id="toast-message" class="font-medium text-sm"></span>
            </div>
        `;
        document.body.appendChild(toast);
    }
    
    const toastMessage = document.getElementById('toast-message');
    
    toastMessage.textContent = message;
    toast.classList.remove('translate-y-full', 'opacity-0');
    toast.classList.add('translate-y-0', 'opacity-100');
    
    // Hide after 3 seconds
    setTimeout(() => {
        toast.classList.remove('translate-y-0', 'opacity-100');
        toast.classList.add('translate-y-full', 'opacity-0');
    }, 3000);
}

// Show followers modal
function showFollowers(userId) {
    if (!userId) {
        console.error('No user ID provided to showFollowers function');
        return;
    }
    
    console.log('Showing followers for user:', userId);
    
    try {
        document.getElementById('followersModal').classList.remove('hidden');
        
        fetch(`/user/${userId}/followers`)
            .then(response => {
                if (!response.ok) throw new Error('Network response was not ok');
                return response.json();
            })
            .then(data => {
                console.log('Followers data:', data);
                const followersList = document.getElementById('followersList');
                
                if (!data.followers || data.followers.length === 0) {
                    followersList.innerHTML = `
                        <div class="py-8 text-center">
                            <p class="text-gray-500 dark:text-gray-400">No followers yet</p>
                        </div>
                    `;
                    return;
                }
                
                followersList.innerHTML = data.followers.map(follower => `
                    <div class="flex items-center justify-between p-3 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg transition">
                        <a href="/user/${follower.username}" class="flex items-center space-x-3">
                            <img src="${follower.profileImage}" alt="${follower.name}" class="w-10 h-10 rounded-full object-cover">
                            <div>
                                <p class="font-semibold text-gray-800 dark:text-white">${follower.name}</p>
                                <p class="text-sm text-gray-500 dark:text-gray-400">@${follower.username}</p>
                            </div>
                        </a>
                        <button 
                            class="px-3 py-1 text-sm rounded border border-gray-300 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-800 dark:text-white"
                            onclick="window.location.href='/user/${follower.username}'">
                            View
                        </button>
                    </div>
                `).join('');
            })
            .catch(error => {
                console.error('Error loading followers:', error);
                showToast('Failed to load followers');
                
                const followersList = document.getElementById('followersList');
                followersList.innerHTML = `
                    <div class="py-8 text-center">
                        <p class="text-red-500">Error loading followers</p>
                    </div>
                `;
            });
        
    } catch (error) {
        console.error('Error showing followers modal:', error);
        showToast('Failed to load followers');
    }
}

// Show following modal
function showFollowing(userId) {
    if (!userId) {
        console.error('No user ID provided to showFollowing function');
        return;
    }
    
    console.log('Showing following for user:', userId);
    
    try {
        document.getElementById('followingModal').classList.remove('hidden');
        
        fetch(`/user/${userId}/following`)
            .then(response => {
                if (!response.ok) throw new Error('Network response was not ok');
                return response.json();
            })
            .then(data => {
                console.log('Following data:', data);
                const followingList = document.getElementById('followingList');
                
                if (!data.following || data.following.length === 0) {
                    followingList.innerHTML = `
                        <div class="py-8 text-center">
                            <p class="text-gray-500 dark:text-gray-400">Not following anyone yet</p>
                        </div>
                    `;
                    return;
                }
                
                followingList.innerHTML = data.following.map(user => `
                    <div class="flex items-center justify-between p-3 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg transition">
                        <a href="/user/${user.username}" class="flex items-center space-x-3">
                            <img src="${user.profileImage}" alt="${user.name}" class="w-10 h-10 rounded-full object-cover">
                            <div>
                                <p class="font-semibold text-gray-800 dark:text-white">${user.name}</p>
                                <p class="text-sm text-gray-500 dark:text-gray-400">@${user.username}</p>
                            </div>
                        </a>
                        <button 
                            class="px-3 py-1 text-sm rounded border border-gray-300 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-800 dark:text-white"
                            onclick="window.location.href='/user/${user.username}'">
                            View
                        </button>
                    </div>
                `).join('');
            })
            .catch(error => {
                console.error('Error loading following:', error);
                showToast('Failed to load following list');
                
                const followingList = document.getElementById('followingList');
                followingList.innerHTML = `
                    <div class="py-8 text-center">
                        <p class="text-red-500">Error loading following list</p>
                    </div>
                `;
            });
        
    } catch (error) {
        console.error('Error showing following modal:', error);
        showToast('Failed to load following list');
    }
}

// Close modals
function closeFollowersModal() {
    document.getElementById('followersModal').classList.add('hidden');
}

function closeFollowingModal() {
    document.getElementById('followingModal').classList.add('hidden');
}

function closeUnfollowModal() {
    document.getElementById('unfollowModal').classList.add('hidden');
}

function showMessageModal() {
    // Implement message functionality
    showToast('Messaging feature coming soon!');
}

// Function to check if user has been accepted as a follower
async function checkFollowStatus() {
    const profileUserId = document.getElementById('profileUserId').value;
    const isProfilePrivate = document.getElementById('isProfilePrivate').value === 'true';
    const canViewPosts = document.getElementById('canViewPosts').value === 'true';
    
    // Check if we've already performed this check in the current session
    if (sessionStorage.getItem(`checked_${profileUserId}`) === 'true') {
        console.log('Already checked follow status this session, skipping');
        return;
    }
    
    // Set the flag immediately to prevent multiple calls
    sessionStorage.setItem(`checked_${profileUserId}`, 'true');
    
    if (!isProfilePrivate || canViewPosts) {
        return; // Only check for private profiles that we can't view yet
    }
    
    console.log('Checking follow status for private profile:', profileUserId);
    
    try {
        // First check localStorage for accepted follow requests
        const acceptedFollowRequests = JSON.parse(localStorage.getItem('acceptedFollowRequests') || '[]');
        const thisProfileAccepted = acceptedFollowRequests.find(req => req.profileId === profileUserId);
        
        if (thisProfileAccepted) {
            console.log('This profile has accepted your follow request, reloading page...');
            
            // Remove this profile from the accepted list before reloading
            const updatedRequests = acceptedFollowRequests.filter(req => req.profileId !== profileUserId);
            localStorage.setItem('acceptedFollowRequests', JSON.stringify(updatedRequests));
            
            // Reload the page only once
            window.location.reload();
            return;
        }
        
        // If no localStorage indicator, make a direct API call to check follow status
        const response = await fetch(`/api/follow-status/${profileUserId}`);
        if (response.ok) {
            const data = await response.json();
            if (data.following) {
                console.log('Server confirmed following status is now true, reloading page...');
                window.location.reload();
            }
        }
    } catch (error) {
        console.error('Error checking follow status:', error);
    }
}

// Function to show post options menu
function showPostMenu(event, postId) {
    event.preventDefault();
    event.stopPropagation();
    
    console.log('Showing post menu for post:', postId);
    
    // Get elements
    const menu = document.getElementById('postOptionsMenu');
    const editOption = document.getElementById('editPostOption');
    const deleteOption = document.getElementById('deletePostOption');
    
    // Set current post ID and update edit link
    currentPostId = postId;
    if (editOption) {
        editOption.href = '/edit/' + postId;
    }
    
    // Position the menu near the button that was clicked
    const buttonRect = event.currentTarget.getBoundingClientRect();
    const menuWidth = 192; // w-48 = 12rem = 192px
    
    // Calculate position (try to keep it within viewport)
    const leftPosition = Math.min(
        buttonRect.left,
        window.innerWidth - menuWidth - 10
    );
    
    menu.style.left = `${leftPosition}px`;
    menu.style.top = `${buttonRect.bottom + 5}px`;
    
    // Add a backdrop that will close the menu when clicked
    const backdrop = document.createElement('div');
    backdrop.className = 'post-menu-backdrop';
    backdrop.id = 'menuBackdrop';
    backdrop.addEventListener('click', closePostMenu);
    document.body.appendChild(backdrop);
    
    // Show the menu with animation
    menu.style.opacity = '0';
    menu.style.transform = 'translateY(-10px)';
    menu.style.transition = 'opacity 0.2s ease, transform 0.2s ease';
    menu.classList.remove('hidden');
    
    // Trigger animation
    setTimeout(() => {
        menu.style.opacity = '1';
        menu.style.transform = 'translateY(0)';
    }, 10);
    
    // Set up event handlers for menu options
    if (deleteOption) {
        deleteOption.onclick = function(e) {
            e.preventDefault();
            closePostMenu();
            showDeleteConfirmation(postId);
        };
    }
}

// Function to close post menu
function closePostMenu() {
    const menu = document.getElementById('postOptionsMenu');
    const backdrop = document.getElementById('menuBackdrop');
    
    // Hide with animation
    menu.style.opacity = '0';
    menu.style.transform = 'translateY(-10px)';
    
    // Remove after animation completes
    setTimeout(() => {
        menu.classList.add('hidden');
        if (backdrop) {
            document.body.removeChild(backdrop);
        }
    }, 200);
}

// Delete confirmation functionality
let postIdToDelete = null;

function showDeleteConfirmation(postId) {
    postIdToDelete = postId;
    document.getElementById('deleteConfirmModal').classList.remove('hidden');
}

function closeDeleteConfirmModal() {
    document.getElementById('deleteConfirmModal').classList.add('hidden');
    postIdToDelete = null;
}

function deletePost(postId) {
    if (!postId) return;
    
    console.log('Deleting post:', postId);
    
    fetch(`/delete/${postId}`, {
        method: 'GET'
    })
    .then(response => {
        if (response.ok) {
            // Remove the post from the UI
            const postElement = document.querySelector(`[data-post-id="${postId}"]`);
            if (postElement) {
                postElement.classList.add('scale-0', 'opacity-0');
                setTimeout(() => {
                    postElement.remove();
                    
                    // Update post count
                    const postsCountElement = document.querySelector('.text-gray-900.dark\\:text-white.font-semibold');
                    if (postsCountElement) {
                        const currentCount = parseInt(postsCountElement.textContent) - 1;
                        postsCountElement.textContent = Math.max(0, currentCount);
                    }
                    
                    // Show empty state if no posts left
                    const postGrid = document.querySelector('.grid');
                    if (postGrid && postGrid.children.length === 0) {
                        const postsContainer = document.getElementById('postsContainer');
                        if (postsContainer) {
                            postsContainer.innerHTML = `
                                <div class="flex flex-col items-center justify-center py-12 text-center">
                                    <div class="text-5xl text-gray-300 dark:text-gray-600 mb-4">
                                        <i class="fas fa-camera"></i>
                                    </div>
                                    <p class="text-gray-500 dark:text-gray-400 mb-2">No posts yet</p>
                                    <p class="text-sm text-gray-400 dark:text-gray-500">When you share photos, they'll appear here.</p>
                                </div>
                            `;
                        }
                    }
                }, 300);
            }
            
            showToast('Post deleted successfully');
        } else {
            showToast('Failed to delete post');
        }
        closeDeleteConfirmModal();
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('An error occurred');
        closeDeleteConfirmModal();
    });
}

// Open stories for a specific user
function openUserStories(userId) {
    console.log('Opening stories for user:', userId);
    
    fetch('/stories')
        .then(response => {
            if (!response.ok) throw new Error('Network response was not ok');
            return response.json();
        })
        .then(data => {
            console.log('Stories data:', data);
            
            // Handle both response formats for backward compatibility
            const stories = data.stories || data;
            
            if (!stories || stories.length === 0) {
                console.log('No stories available');
                showToast('No stories available');
                return;
            }
            
            // Group stories by user
            const storiesByUser = {};
            stories.forEach(story => {
                if (!storiesByUser[story.user._id]) {
                    storiesByUser[story.user._id] = {
                        user: story.user,
                        stories: []
                    };
                }
                storiesByUser[story.user._id].stories.push(story);
            });
            
            // Find stories for the selected user
            const userStories = storiesByUser[userId];
            if (!userStories || userStories.stories.length === 0) {
                console.log('No stories for this user');
                showToast('No stories for this user');
                return;
            }
            
            // Set up the stories viewer
            currentStories = [userStories]; // Array with just this user's stories
            currentUserIndex = 0;
            currentStoryIndex = 0;
            
            // Display the first story
            displayCurrentStory();
            
            // Show modal
            document.getElementById('storyModal').classList.remove('hidden');
            document.body.style.overflow = 'hidden'; // Prevent background scrolling
            
            // Update story ring to viewed after seeing the story
            const profileImageContainer = document.getElementById('profileImageContainer');
            if (profileImageContainer && profileImageContainer.classList.contains('story-ring')) {
                // After viewing, we'll replace the story-ring with story-ring-viewed
                // This will happen when the stories are marked as viewed
            }
        })
        .catch(error => {
            console.error('Error opening stories:', error);
            showToast('Error loading stories');
        });
}

// Display the current story
function displayCurrentStory() {
    if (!currentStories || currentStories.length === 0 || currentUserIndex < 0 || currentUserIndex >= currentStories.length) {
        closeStoryModal();
        return;
    }
    
    const userStories = currentStories[currentUserIndex];
    if (!userStories.stories || userStories.stories.length === 0 || currentStoryIndex < 0 || currentStoryIndex >= userStories.stories.length) {
        // Move to next user's stories
        currentUserIndex++;
        currentStoryIndex = 0;
        
        // If we've reached the end of all stories, close modal
        if (currentUserIndex >= currentStories.length) {
            closeStoryModal();
            return;
        }
    }
    
    const story = userStories.stories[currentStoryIndex];
    const user = userStories.user;
    
    console.log('Displaying story:', story);
    
    // Set user info
    document.getElementById('storyUserImage').src = user.profileImage;
    document.getElementById('storyUsername').textContent = user.username;
    
    // Calculate time difference
    const storyTime = new Date(story.createdAt);
    const now = new Date();
    const diffInHours = Math.floor((now - storyTime) / (1000 * 60 * 60));
    
    document.getElementById('storyTime').textContent = diffInHours === 0 
        ? 'Just now' 
        : `${diffInHours}h ago`;
    
    // Update progress bars
    const progressBarsContainer = document.getElementById('storyProgressBars');
    progressBarsContainer.innerHTML = '';
    
    userStories.stories.forEach((_, index) => {
        const progressBar = document.createElement('div');
        progressBar.className = 'flex-1 h-1 bg-gray-600 rounded-full overflow-hidden';
        
        // If this story has already been viewed
        const isViewed = index < currentStoryIndex || 
                         (index === currentStoryIndex && story.viewers && 
                          story.viewers.includes(window.currentUserId));
        
        // If this is the current story or a previous story, fill the progress bar
        const fillWidth = index < currentStoryIndex ? '100%' : 
                          index === currentStoryIndex ? '0%' : '0%';
        
        progressBar.innerHTML = `
            <div class="story-progress-bar h-full bg-white" 
                 style="width: ${fillWidth}; transition-duration: ${story.media && story.media.type === 'image' ? '5s' : '10s'}"></div>
        `;
        progressBarsContainer.appendChild(progressBar);
    });
    
    // Start progress for current story
    const currentProgressBar = progressBarsContainer.children[currentStoryIndex];
    if (currentProgressBar) {
        const progressBar = currentProgressBar.querySelector('.story-progress-bar');
        // Set to 0 first to trigger animation
        progressBar.style.width = '0%';
        
        // Force reflow to ensure transition is applied
        void progressBar.offsetWidth;
        
        // Then animate to 100%
        setTimeout(() => {
            progressBar.style.width = '100%';
        }, 50);
    }
    
    // Update story image container
    const storyImageContainer = document.getElementById('storyImage');
    storyImageContainer.innerHTML = '<div class="w-full h-full flex items-center justify-center"><div class="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-white"></div></div>';
    
    if (story.media && story.media.type === 'image') {
        const img = new Image();
        img.onload = function() {
            storyImageContainer.innerHTML = `<img src="${story.media.url}" class="w-full h-full object-contain">`;
        };
        img.onerror = function() {
            storyImageContainer.innerHTML = `<div class="flex flex-col items-center justify-center h-full">
                <i class="fas fa-exclamation-triangle text-red-500 text-4xl mb-2"></i>
                <p class="text-white text-center">Error loading image</p>
            </div>`;
        };
        img.src = story.media.url;
    } else if (story.media && story.media.type === 'video') {
        storyImageContainer.innerHTML = `
            <video src="${story.media.url}" class="w-full h-full object-contain" autoplay muted
                   onloadeddata="this.play()" 
                   onplay="this.classList.remove('opacity-0')"
                   onerror="this.parentNode.innerHTML = '<div class=\\'flex flex-col items-center justify-center h-full\\'><i class=\\'fas fa-exclamation-triangle text-red-500 text-4xl mb-2\\'></i><p class=\\'text-white text-center\\'>Error loading video</p></div>';"
                   class="opacity-0 transition-opacity duration-300"></video>
        `;
    } else {
        storyImageContainer.innerHTML = `<div class="flex flex-col items-center justify-center h-full">
            <i class="fas fa-exclamation-triangle text-yellow-500 text-4xl mb-2"></i>
            <p class="text-white text-center">Story format not supported</p>
        </div>`;
    }
    
    // Mark story as viewed
    markStoryAsViewed(story._id);
    
    // Clear existing timer
    if (storyTimer) clearTimeout(storyTimer);
    
    // Start progress timer (5 seconds for images, video duration for videos)
    const duration = story.media && story.media.type === 'image' ? 5000 : 10000; // Default 10s for videos
    
    storyTimer = setTimeout(() => {
        nextStory();
    }, duration);
}

// Mark story as viewed
function markStoryAsViewed(storyId) {
    console.log('Marking story as viewed:', storyId);
    
    fetch(`/story/${storyId}/view`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        console.log('Story marked as viewed:', data);
    })
    .catch(error => console.error('Error marking story as viewed:', error));
}

// Go to next story
function nextStory() {
    currentStoryIndex++;
    
    // If we're at the end of this user's stories, move to next user
    if (currentStoryIndex >= currentStories[currentUserIndex].stories.length) {
        currentUserIndex++;
        currentStoryIndex = 0;
        
        // If we're at the end of all stories, close modal
        if (currentUserIndex >= currentStories.length) {
            closeStoryModal();
            return;
        }
    }
    
    displayCurrentStory();
}

// Go to previous story
function previousStory() {
    currentStoryIndex--;
    
    // If we're at the beginning of this user's stories, move to previous user
    if (currentStoryIndex < 0) {
        currentUserIndex--;
        
        // If we're at the beginning of all stories, loop to the end
        if (currentUserIndex < 0) {
            closeStoryModal();
            return;
        }
        
        // Set to last story of previous user
        currentStoryIndex = currentStories[currentUserIndex].stories.length - 1;
    }
    
    displayCurrentStory();
}

// Navigation functions
function showNextStory() {
    if (storyTimer) clearTimeout(storyTimer);
    nextStory();
}

function showPreviousStory() {
    if (storyTimer) clearTimeout(storyTimer);
    previousStory();
}

// Close story modal
function closeStoryModal() {
    if (storyTimer) clearTimeout(storyTimer);
    document.getElementById('storyModal').classList.add('hidden');
    document.body.style.overflow = ''; // Re-enable scrolling
}

// Reply to story
function replyToStory(event) {
    event.preventDefault();
    
    const replyInput = document.getElementById('storyReplyInput');
    const message = replyInput.value.trim();
    
    if (!message) return;
    
    console.log('Sending story reply');
    
    const userStories = currentStories[currentUserIndex];
    const story = userStories.stories[currentStoryIndex];
    
    fetch(`/story/${story._id}/reply`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ message })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Reply response:', data);
        if (data.message) {
            // Show toast notification
            showToast('Reply sent');
            replyInput.value = '';
        }
    })
    .catch(error => {
        console.error('Error sending reply:', error);
        showToast('Failed to send reply');
    });
}

// Close modals when clicking outside
window.addEventListener('click', function(event) {
    const followersModal = document.getElementById('followersModal');
    const followingModal = document.getElementById('followingModal');
    const unfollowModal = document.getElementById('unfollowModal');
    const deleteConfirmModal = document.getElementById('deleteConfirmModal');
    
    if (event.target === followersModal) {
        closeFollowersModal();
    }
    if (event.target === followingModal) {
        closeFollowingModal();
    }
    if (event.target === unfollowModal) {
        closeUnfollowModal();
    }
    if (event.target === deleteConfirmModal) {
        closeDeleteConfirmModal();
    }
});
</script>

</body>
</html> 