<%- include('partials/header2') %>

<style>
/* Custom styling for the page */
body {
    background-color: #fafafa;
}

.dark body {
    background-color: #121212;
}

/* Extra small screen breakpoint */
@media (max-width: 475px) {
    .xs\:grid-cols-3 {
        grid-template-columns: repeat(3, minmax(0, 1fr));
    }
}

/* Clamp lines for text content */
.line-clamp-6 {
    display: -webkit-box;
    -webkit-line-clamp: 6;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

/* Post menu backdrop */
.post-menu-backdrop {
    background: rgba(0, 0, 0, 0.5);
    position: fixed;
    inset: 0;
    z-index: 40;
}

/* Profile card shadow and hover effect */
.profile-card {
    transition: all 0.3s ease;
}

.profile-card:hover {
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

/* Add smooth transitions */
.transition-all {
    transition: all 0.3s ease;
}

/* Reduce line clamp on small screens */
@media (max-width: 640px) {
    .line-clamp-6 {
        -webkit-line-clamp: 4;
    }
}

/* Story ring */
.bg-gradient-to-tr.from-yellow-400.to-fuchsia-600 {
    background: linear-gradient(45deg, #3b82f6 0%, #4f46e5 50%, #8b5cf6 100%);
    padding: 1px;
}
</style>

<script>
// Set currentUserId globally right away
window.currentUserId = '<%= user._id %>';
console.log('Current user ID set at page load:', window.currentUserId);
</script>

<div class="max-w-4xl mx-auto mt-8 px-4">
    <!-- Profile Header - Instagram-like -->
    <div class="bg-white dark:bg-black rounded-lg shadow-md p-3 sm:p-4 mb-4 profile-card">
        <div class="flex flex-col md:flex-row md:items-start gap-3 md:gap-5">
            <!-- Profile Image -->
            <div class="flex justify-center md:justify-start md:shrink-0">
                <div class="relative">
                    <!-- Story Ring (if user has active story) -->
                    <div class="<%= profileUser.hasActiveStory ? 'bg-gradient-to-tr from-yellow-400 to-fuchsia-600' : '' %> rounded-full p-[1px]" id="profileImageContainer">
                        <img src="<%= profileUser.profileImage || '/images/placeholder.webp' %>" 
                             alt="<%= profileUser.name %>" 
                             onerror="this.src='/images/placeholder.webp'" 
                             class="w-24 h-24 rounded-full object-cover border-2 <%= profileUser.isOnline ? 'border-green-500' : 'border-white dark:border-gray-800' %>"
                             id="profileImage">
                    </div>
                </div>
            </div>
            
            <!-- Profile Info -->
            <div class="flex-grow">
                <!-- Username and Create Button -->
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 mb-3">
                    <div>
                        <h1 class="text-xl md:text-2xl font-bold text-gray-800 dark:text-white"><%= profileUser.name %></h1>
                        <p class="text-gray-500 dark:text-gray-400">@<%= profileUser.username %></p>
                        
                        <% if (profileUser.isPrivate) { %>
                            <span class="inline-block mt-1 px-2 py-0.5 text-xs bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full font-medium">Private</span>
                        <% } %>
                        
                        <% if (profileUser.isVerified) { %>
                            <span class="ml-1 text-blue-500"><i class="fas fa-badge-check"></i></span>
                        <% } %>
                    </div>
                    
                    <div>
                        <% if (!isOwnProfile) { %>
                            <button id="followButton" 
                                    onclick="performFollowToggle('<%= profileUser._id %>')"
                                    class="w-full sm:w-auto inline-flex items-center justify-center px-3 py-1.5 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-md hover:from-blue-600 hover:to-purple-700 transition-all text-sm">
                                Follow
                            </button>
                            
                            <a href="/chat/<%= profileUser._id %>" 
                              class="w-full mt-2 sm:mt-0 sm:w-auto inline-flex items-center justify-center px-3 py-1.5 bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 text-gray-800 dark:text-white rounded-md ml-0 sm:ml-2 text-sm">
                                <i class="fas fa-comment mr-2"></i> Message
                            </a>
                        <% } else { %>
                            
                        <% } %>
                    </div>
                </div>
                
                <!-- Stats Row - Compact -->
                <div class="grid grid-cols-3 gap-1 max-w-xs mb-3">
                    <div class="text-center px-1 py-1.5 bg-gray-50 dark:bg-gray-900 rounded-lg">
                        <span class="block text-xl font-bold text-gray-900 dark:text-white"><%= profileUser.posts ? profileUser.posts.length : 0 %></span>
                        <span class="text-xs font-medium text-gray-500 dark:text-gray-400">posts</span>
                    </div>
                    <div class="text-center px-1 py-1.5 bg-gray-50 dark:bg-gray-900 rounded-lg">
                        <button class="w-full h-full focus:outline-none" onclick="showFollowers('<%= profileUser._id %>')">
                            <span class="block text-xl font-bold text-gray-900 dark:text-white" id="followersCount"><%= typeof profileUser.followers === 'number' ? profileUser.followers : (profileUser.followers ? profileUser.followers.length : 0) %></span>
                            <span class="text-xs font-medium text-gray-500 dark:text-gray-400">followers</span>
                        </button>
                    </div>
                    <div class="text-center px-1 py-1.5 bg-gray-50 dark:bg-gray-900 rounded-lg">
                        <button class="w-full h-full focus:outline-none" onclick="showFollowing('<%= profileUser._id %>')">
                            <span class="block text-xl font-bold text-gray-900 dark:text-white"><%= typeof profileUser.following === 'number' ? profileUser.following : (profileUser.following ? profileUser.following.length : 0) %></span>
                            <span class="text-xs font-medium text-gray-500 dark:text-gray-400">following</span>
                        </button>
                    </div>
                </div>
                
                <!-- Bio and Website -->
                <% if (profileUser.bio) { %>
                    <p class="text-gray-700 dark:text-gray-300 text-sm mb-2"><%= profileUser.bio %></p>
                <% } %>
                
                <% if (profileUser.website) { %>
                    <div class="mb-2">
                        <a href="<%= profileUser.website %>" 
                           target="_blank" 
                           class="text-blue-500 hover:underline text-sm flex items-center">
                            <i class="fas fa-link mr-1"></i>
                            <%= profileUser.website.replace(/(^\w+:|^)\/\//, '') %>
                        </a>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Posts Section - Instagram Grid Style -->
    <div class="bg-white dark:bg-black rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
            <i class="fas fa-th mr-2"></i> Posts
        </h2>
        
        <% 
        // Helper function to check if arrays contain a value
        function idArrayIncludes(array, targetId) {
            if (!array || !Array.isArray(array) || array.length === 0) return false;
            return array.some(id => id && id.toString() === targetId.toString());
        }
        
        // Check if user should be allowed to see posts
        const canViewPosts = true; // Always allow viewing posts, privacy mode disabled
        %>
        
        <!-- Hidden field to store profile data for JS -->
        <input type="hidden" id="profileUserId" value="<%= profileUser._id %>">
        <input type="hidden" id="canViewPosts" value="<%= canViewPosts %>">
        
        <div id="postsContainer">
        <% if (profileUser.posts.length === 0) { %>
            <div class="flex flex-col items-center justify-center py-12 text-center">
                <div class="text-5xl text-gray-300 dark:text-gray-600 mb-4">
                    <i class="fas fa-camera"></i>
                </div>
                <p class="text-gray-500 dark:text-gray-400 mb-2">No posts yet</p>
                <p class="text-sm text-gray-400 dark:text-gray-500">When <%= isOwnProfile ? 'you share' : profileUser.name + ' shares' %> photos, they'll appear here.</p>
            </div>
        <% } else { %>
            <div class="grid grid-cols-2 md:grid-cols-3 gap-2 md:gap-4">
                <% profileUser.posts.forEach(post => { %>
                    <a href="/post/<%= post._id %>" class="group relative aspect-square overflow-hidden rounded-md block transform transition hover:scale-[0.98]" data-post-id="<%= post._id %>">
                        <% if (post.images && post.images.length > 0) { %>
                            <img src="<%= post.images[0].url %>" 
                                alt="Post thumbnail"
                                class="w-full h-full object-cover">
                                
                            <% if (post.images.length > 1) { %>
                                <div class="absolute top-2 right-2 text-white">
                                    <i class="fas fa-clone"></i>
                                </div>
                            <% } %>
                        <% } else { %>
                            <!-- Show text content for posts without images -->
                            <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600 p-4 text-white overflow-hidden">
                                <p class="text-center text-sm md:text-base line-clamp-6 font-medium">
                                    <%= post.content || post.title || 'No content' %>
                                </p>
                            </div>
                        <% } %>
                        
                        <!-- Post Overlay on Hover -->
                        <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center space-x-6 text-white">
                            <div class="flex items-center">
                                <i class="fas fa-heart mr-2"></i>
                                <span><%= post.likes.length %></span>
                            </div>
                            <div class="flex items-center">
                                <i class="fas fa-comment mr-2"></i>
                                <span><%= post.comments.length %></span>
                            </div>
                        </div>
                        
                        <% if (isOwnProfile) { %>
                        <!-- Three dots menu trigger -->
                        <div class="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                            <button class="w-8 h-8 rounded-full bg-black bg-opacity-50 text-white flex items-center justify-center hover:bg-opacity-70 transition" 
                                   onclick="event.preventDefault(); showPostMenu(event, '<%= post._id %>')">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                        </div>
                        <% } %>
                    </a>
                <% }) %>
            </div>
        <% } %>
        </div>
    </div>
</div>

<!-- Story Viewer Modal -->
<div id="storyModal" class="hidden fixed inset-0 bg-black z-50">
    <div class="relative h-full flex justify-center">
        <!-- Mobile-like container with fixed aspect ratio -->
        <div class="h-full aspect-[9/16] bg-black relative max-w-[500px] w-full">
            <!-- Touch areas for navigation -->
            <div class="absolute inset-0 z-10 flex">
                <div class="w-1/2 h-full" onclick="showPreviousStory()"></div>
                <div class="w-1/2 h-full" onclick="showNextStory()"></div>
            </div>
            
            <!-- Close button - made larger and more prominent -->
            <button onclick="closeStoryModal()" class="absolute top-4 right-4 text-white text-3xl z-30 bg-black/70 p-3 rounded-full hover:bg-red-600 transition-colors focus:outline-none">
                <i class="fas fa-times"></i>
            </button>
            
            <!-- Separate delete button at the top left for improved visibility -->
            <button id="storyDeleteButtonTop" onclick="deleteCurrentStory()" class="absolute top-4 left-36 text-white text-xl z-30 bg-red-500 p-3 rounded-full hover:bg-red-600 transition-colors focus:outline-none hidden">
                <i class="fas fa-trash"></i>
            </button>
            
            <div class="h-full flex items-center justify-center bg-black">
                <div id="storyImage" class="w-full h-full relative">
                    <!-- Media will be inserted here -->
                </div>
            </div>

            <!-- Story Progress Bars -->
            <div class="absolute top-0 left-0 right-0 flex space-x-1 p-2 z-20">
                <div id="storyProgressBars" class="flex-1 flex space-x-1">
                    <!-- Progress bars will be added here dynamically -->
                </div>
            </div>

            <!-- Story User Info -->
            <div class="absolute top-4 left-4 flex items-center z-20">
                <div class="story-ring p-[2px] rounded-full">
                    <div class="bg-black p-[1px] rounded-full">
                        <img id="storyUserImage" src="" alt="Profile" class="w-8 h-8 rounded-full object-cover">
                    </div>
                </div>
                <div class="ml-2 text-white">
                    <p id="storyUsername" class="font-semibold text-sm"></p>
                    <p id="storyTime" class="text-xs opacity-75"></p>
                </div>
                <!-- Delete Story Button (only visible for own stories) -->
                <div id="storyDeleteButton" class="hidden ml-auto">
                    <button onclick="deleteCurrentStory()" class="bg-red-500 hover:bg-red-600 text-white p-2 rounded-full flex items-center justify-center transition-colors">
                        <i class="fas fa-trash text-sm"></i>
                    </button>
                </div>
            </div>

            <!-- Story Reply Section -->
            <div class="absolute bottom-4 left-4 right-4 z-20">
                <div class="flex items-center gap-2">
                    <form onsubmit="replyToStory(event)" class="flex-1 flex items-center gap-2">
                        <input type="text" 
                               id="storyReplyInput"
                               placeholder="Reply to story..." 
                               class="flex-1 px-4 py-3 rounded-full bg-white/10 text-white placeholder-white/70 backdrop-blur-sm border border-white/20 focus:outline-none focus:ring-2 focus:ring-white/50">
                        <button type="submit" 
                                class="p-3 rounded-full bg-white/10 text-white backdrop-blur-sm border border-white/20 hover:bg-white/20 flex items-center justify-center">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </form>
                    <!-- Delete button at the bottom -->
                    <button id="storyDeleteButtonBottom" onclick="deleteCurrentStory()" class="p-4 rounded-full bg-red-500 text-white text-xl hidden hover:bg-red-600 transition-colors shadow-lg">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Followers Modal - Instagram Style -->
<div id="followersModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4">
        <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Followers</h3>
            <button onclick="closeFollowersModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div id="followersList" class="max-h-96 overflow-y-auto p-2">
            <!-- Followers will be loaded here -->
            <div class="flex justify-center py-8">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-800 dark:border-white"></div>
            </div>
        </div>
    </div>
</div>

<!-- Following Modal - Instagram Style -->
<div id="followingModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4">
        <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Following</h3>
            <button onclick="closeFollowingModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div id="followingList" class="max-h-96 overflow-y-auto p-2">
            <!-- Following users will be loaded here -->
            <div class="flex justify-center py-8">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-800 dark:border-white"></div>
            </div>
        </div>
    </div>
</div>

<!-- Unfollow Confirmation Modal -->
<div id="unfollowModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4 p-4 flex flex-col items-center">
        <img id="unfollowUserImage" src="" alt="Profile" class="w-16 h-16 rounded-full object-cover mb-4">
        <p class="text-center mb-6 text-gray-800 dark:text-white">Unfollow <span id="unfollowUsername" class="font-semibold"></span>?</p>
        <div class="w-full border-t border-gray-200 dark:border-gray-700"></div>
        <button id="confirmUnfollow" class="w-full py-3 text-red-500 font-medium">
            Unfollow
        </button>
        <div class="w-full border-t border-gray-200 dark:border-gray-700"></div>
        <button onclick="closeUnfollowModal()" class="w-full py-3 text-gray-800 dark:text-white">
            Cancel
        </button>
    </div>
</div>

<!-- Post Options Menu -->
<div id="postOptionsMenu" class="fixed hidden bg-white dark:bg-gray-900 rounded-lg shadow-xl z-50 overflow-hidden w-48">
    <ul class="divide-y divide-gray-100 dark:divide-gray-800">
        <li>
            <a href="#" id="editPostOption" class="px-4 py-3 flex items-center text-gray-800 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 transition">
                <i class="fas fa-edit mr-3 text-blue-500"></i> Edit
            </a>
        </li>
        <li>
            <button id="deletePostOption" class="w-full px-4 py-3 flex items-center text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-800 transition">
                <i class="fas fa-trash mr-3"></i> Delete
            </button>
        </li>
    </ul>
</div>

<!-- Delete Confirm Modal -->
<div id="deleteConfirmModal" class="hidden fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg w-full max-w-md mx-4 p-6">
        <h3 class="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Delete Post</h3>
        <p class="mb-6 text-gray-600 dark:text-gray-300">Are you sure you want to delete this post? This action cannot be undone.</p>
        <div class="flex justify-end space-x-3">
            <button onclick="closeDeleteConfirmModal()" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors text-gray-800 dark:text-white">
                Cancel
            </button>
            <button onclick="deletePost(postIdToDelete)" id="confirmDeleteBtn" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors">
                Delete
            </button>
        </div>
    </div>
</div>

<!-- Add Swiper JS for image carousel -->
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>

<script>
// Add cache busting timestamp
console.log('Loading userProfile.js - version <%= Date.now() %>');

// Track the currently selected post
let currentPostId = null;
let postIdToDelete = null;

// Variables for story handling
let currentStories = [];
let currentStoryIndex = 0;
let currentUserIndex = 0;
let storyTimer = null;

// Document ready handler
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded - initializing profile page');
    
    // Initialize user ID
    window.currentUserId = '<%= user._id %>';
    window.profileUserId = '<%= profileUser._id %>';
    
    // Check if user has active stories and make profile image clickable
    const profileImageContainer = document.getElementById('profileImageContainer');
    const profileImage = document.getElementById('profileImage');
    
    if (profileImageContainer && profileImageContainer.classList.contains('story-ring')) {
        console.log('User has active stories, adding click handler');
        profileImage.addEventListener('click', function() {
            openUserStories(window.profileUserId);
        });
    }
    
    // Update the follow button on page load
    const followButton = document.getElementById('followButton');
    if (!followButton) return;
    
    const profileId = '<%= profileUser._id %>';
    
    // Check if follow status is in localStorage first (faster response)
    const isFollowing = localStorage.getItem(`following_${profileId}`) === 'true';
    const hasRequested = localStorage.getItem(`followRequested_${profileId}`) === 'true';
    
    if (isFollowing) {
        followButton.textContent = 'Following';
        followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
        followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
    } else if (hasRequested) {
        followButton.textContent = 'Requested';
        followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
        followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
    }
    
    // Then check with the server for accurate status
    fetch(`/api/follow-status/${profileId}`)
        .then(response => response.json())
        .then(data => {
            if (data.following) {
                followButton.textContent = 'Following';
                followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                localStorage.setItem(`following_${profileId}`, 'true');
                localStorage.removeItem(`followRequested_${profileId}`);
            } else if (data.followRequested) {
                followButton.textContent = 'Requested';
                followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                localStorage.setItem(`followRequested_${profileId}`, 'true');
                localStorage.removeItem(`following_${profileId}`);
            } else {
                followButton.textContent = 'Follow';
                followButton.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                followButton.classList.add('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                localStorage.removeItem(`following_${profileId}`);
                localStorage.removeItem(`followRequested_${profileId}`);
            }
        })
        .catch(error => {
            console.error('Error checking follow status:', error);
        });
    
    // Set up delete button handler
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener('click', function() {
            deletePost(postIdToDelete);
        });
    }
    
    // Add transitions for hover effects
    document.querySelectorAll('[data-post-id]').forEach(post => {
        post.classList.add('transition', 'duration-200');
    });
    
    // Check follow status once
    checkFollowStatus();
});

// Function to actually perform the follow/unfollow action
async function performFollowToggle(userId) {
    try {
        const followButton = document.getElementById('followButton');
        if (!followButton) return;
        
        const isCurrentlyFollowing = followButton.textContent.trim() === 'Following';
        const hasRequestedFollow = followButton.textContent.trim() === 'Requested';
        
        // Disable button during request
        followButton.disabled = true;
        
        // Show loading state
        const originalText = followButton.textContent;
        followButton.innerHTML = '<span class="inline-block animate-spin mr-1">⟳</span> ' + originalText;
        
        console.log(`Toggling follow for user ID: ${userId}`);
        
        const response = await fetch(`/user/${userId}/follow`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin' // Ensure cookies are sent with the request
        });
        
        const data = await response.json();
        console.log('Follow toggle response:', data);
        
        if (data.error) {
            showToast(data.error);
            followButton.disabled = false;
            followButton.textContent = originalText;
            return;
        }
        
        const followersCountElement = document.getElementById('followersCount');
        
        if (isCurrentlyFollowing) {
            // User was following, now unfollowing
            followButton.textContent = 'Follow';
            followButton.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
            followButton.classList.add('bg-blue-500', 'hover:bg-blue-600', 'text-white');
            
            // Update followers count with animation
            if (followersCountElement) {
                const currentCount = parseInt(followersCountElement.textContent);
                followersCountElement.textContent = Math.max(0, currentCount - 1);
            }
            
            // Update local storage
            localStorage.removeItem(`following_${userId}`);
            localStorage.removeItem(`followRequested_${userId}`);
            
            showToast('Unfollowed successfully');
            
        } else if (hasRequestedFollow) {
            // User had requested to follow, now cancelling request
            followButton.textContent = 'Follow';
            followButton.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
            followButton.classList.add('bg-blue-500', 'hover:bg-blue-600', 'text-white');
            
            // Update local storage
            localStorage.removeItem(`followRequested_${userId}`);
            
            showToast('Follow request cancelled');
            
        } else {
            // User was not following, now following or requesting
            if (data.followRequested) {
                // Private account - show requested state
                followButton.textContent = 'Requested';
                followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                
                // Update local storage
                localStorage.setItem(`followRequested_${userId}`, 'true');
                
                showToast('Follow request sent');
                
            } else {
                // Public account - show following state
                followButton.textContent = 'Following';
                followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                
                // Update followers count with animation
                if (followersCountElement) {
                    const currentCount = parseInt(followersCountElement.textContent) || 0;
                    followersCountElement.textContent = currentCount + 1;
                }
                
                // Update local storage
                localStorage.setItem(`following_${userId}`, 'true');
                
                showToast('Following successfully');
            }
        }
        
        // Check if we need to refresh the page to show posts for a private account
        if (data.following && document.getElementById('isProfilePrivate').value === 'true') {
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }
    } catch (error) {
        console.error('Error:', error);
        showToast('An error occurred while processing your request.');
    } finally {
        // Re-enable button
        const followButton = document.getElementById('followButton');
        if (followButton) followButton.disabled = false;
    }
}

// Reply to story function
function replyToStory(event) {
    event.preventDefault();
    
    const replyInput = document.getElementById('storyReplyInput');
    const message = replyInput.value.trim();
    
    if (!message) return;
    
    const userStories = currentStories[currentUserIndex];
    const story = userStories.stories[currentStoryIndex];
    
    // Show loading state in button
    const submitBtn = event.target.querySelector('button');
    const originalBtnHTML = submitBtn.innerHTML;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    submitBtn.disabled = true;
    
    console.log('Sending story reply to:', story._id);
    
    fetch(`/story/${story._id}/reply`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ message })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Reply response:', data);
        if (data.message) {
            showToast('Reply sent');
            replyInput.value = '';
            
            // Redirect to the chat with the story owner
            if (data.chatId) {
                // Close story modal
                closeStoryModal();
                
                // Wait for toast to be visible before redirecting
                setTimeout(() => {
                    window.location.href = `/chat/${data.chatId}`;
                }, 1000);
            }
        }
    })
    .catch(error => {
        console.error('Error sending reply:', error);
        showToast('Failed to send reply');
    })
    .finally(() => {
        // Reset button state
        submitBtn.innerHTML = originalBtnHTML;
        submitBtn.disabled = false;
    });
}

// Function to show post menu
function showPostMenu(event, postId) {
    event.preventDefault();
    event.stopPropagation();
    
    // Get elements
    const menu = document.getElementById('postOptionsMenu');
    const editOption = document.getElementById('editPostOption');
    const deleteOption = document.getElementById('deletePostOption');
    
    // Set current post ID and update edit link
    currentPostId = postId;
    if (editOption) {
        editOption.href = '/edit/' + postId;
    }
    
    // Position the menu near the button that was clicked
    const buttonRect = event.currentTarget.getBoundingClientRect();
    const menuWidth = 192; // w-48 = 12rem = 192px
    
    // Calculate position (try to keep it within viewport)
    const leftPosition = Math.min(
        buttonRect.left,
        window.innerWidth - menuWidth - 10
    );
    
    menu.style.left = `${leftPosition}px`;
    menu.style.top = `${buttonRect.bottom + 5}px`;
    
    // Show the menu with animation
    menu.style.opacity = '0';
    menu.style.transform = 'translateY(-10px)';
    menu.style.transition = 'opacity 0.2s ease, transform 0.2s ease';
    menu.classList.remove('hidden');
    
    // Trigger animation
    setTimeout(() => {
        menu.style.opacity = '1';
        menu.style.transform = 'translateY(0)';
    }, 10);
    
    // Set up event handlers for menu options
    if (deleteOption) {
        deleteOption.onclick = function(e) {
            e.preventDefault();
            closePostMenu();
            showDeleteConfirmation(postId);
        };
    }

    // Add a backdrop that will close the menu when clicked
    const backdrop = document.createElement('div');
    backdrop.className = 'fixed inset-0 z-40';
    backdrop.id = 'menuBackdrop';
    backdrop.addEventListener('click', closePostMenu);
    document.body.appendChild(backdrop);
}

// Function to close post menu
function closePostMenu() {
    const menu = document.getElementById('postOptionsMenu');
    const backdrop = document.getElementById('menuBackdrop');
    
    if (menu) {
        menu.style.opacity = '0';
        menu.style.transform = 'translateY(-10px)';
        
        setTimeout(() => {
            menu.classList.add('hidden');
        }, 200);
    }
    
    if (backdrop) {
        document.body.removeChild(backdrop);
    }
}

// Function to show delete confirmation
function showDeleteConfirmation(postId) {
    postIdToDelete = postId;
    const modal = document.getElementById('deleteConfirmModal');
    if (modal) {
        modal.classList.remove('hidden');
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }
}

// Function to close delete confirmation
function closeDeleteConfirmModal() {
    const modal = document.getElementById('deleteConfirmModal');
    if (modal) {
        modal.classList.add('hidden');
        postIdToDelete = null;
        document.body.style.overflow = '';
    }
}

// Function to delete post
async function deletePost(postId) {
    if (!postId) {
        showToast('Post ID not found', 'error');
        return;
    }
    
    try {
        console.log(`Sending delete request for post: ${postId}`);
        
        // Show loading state
        const deleteBtn = document.getElementById('confirmDeleteBtn');
        if (deleteBtn) {
            deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Deleting...';
            deleteBtn.disabled = true;
        }
        
        // Use the new API endpoint
        const response = await fetch(`/api/post/${postId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const data = await response.json();
        
        if (response.ok && data.success) {
            console.log('Post deleted successfully');
            
            // Find and remove the post element
            const postElement = document.querySelector(`[data-post-id="${postId}"]`);
            if (postElement) {
                postElement.classList.add('scale-0', 'opacity-0');
                setTimeout(() => {
                    postElement.remove();
                    
                    // Check if no posts left
                    const postsGrid = document.querySelector('.grid');
                    if (postsGrid && postsGrid.children.length === 0) {
                        const postsContainer = document.getElementById('postsContainer');
                        if (postsContainer) {
                            postsContainer.innerHTML = `
                                <div class="flex flex-col items-center justify-center py-12 text-center">
                                    <div class="text-5xl text-gray-300 dark:text-gray-600 mb-4">
                                        <i class="fas fa-camera"></i>
                                    </div>
                                    <p class="text-gray-500 dark:text-gray-400 mb-2">No posts yet</p>
                                    <p class="text-sm text-gray-400 dark:text-gray-500">When you share photos, they'll appear here.</p>
                                </div>
                            `;
                        }
                    }
                }, 300);
            }
            
            // Update the post count
            const postsCount = document.querySelector('div:not(.flex) > span.text-gray-900.dark:text-white.font-semibold');
            if (postsCount) {
                const currentCount = parseInt(postsCount.textContent) || 0;
                if (currentCount > 0) {
                    postsCount.textContent = (currentCount - 1).toString();
                }
            }
            
            showToast('Post deleted successfully', 'success');
        } else {
            console.error('Failed to delete post:', data);
            showToast(data.message || 'Failed to delete post', 'error');
        }
    } catch (error) {
        console.error('Error deleting post:', error);
        showToast('An error occurred while deleting the post', 'error');
    } finally {
        closeDeleteConfirmModal();
        
        // Reset button state
        const deleteBtn = document.getElementById('confirmDeleteBtn');
        if (deleteBtn) {
            deleteBtn.innerHTML = 'Delete';
            deleteBtn.disabled = false;
        }
    }
}

// Toast notification function 
function showToast(message, type = 'info') {
    // Remove existing toast if present
    const existingToast = document.getElementById('toast');
    if (existingToast) {
        existingToast.remove();
    }
    
    // Create new toast
    const toast = document.createElement('div');
    toast.id = 'toast';
    
    // Set appropriate background color based on type
    let bgColor = 'bg-blue-500';
    if (type === 'success') bgColor = 'bg-green-500';
    if (type === 'error') bgColor = 'bg-red-500';
    if (type === 'warning') bgColor = 'bg-yellow-500';
    
    toast.className = `fixed bottom-4 right-4 ${bgColor} text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-y-2 opacity-0`;
    toast.textContent = message;
    
    // Add to DOM
    document.body.appendChild(toast);
    
    // Trigger animation
    setTimeout(() => {
        toast.classList.remove('translate-y-2', 'opacity-0');
    }, 10);
    
    // Auto-remove after 3 seconds
    setTimeout(() => {
        toast.classList.add('translate-y-2', 'opacity-0');
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 300);
    }, 3000);
}

// Function to show followers
function showFollowers(userId) {
    console.log('Showing followers for user:', userId);
    fetchAndShowFollowers(userId, 'followers');
}

// Function to show following
function showFollowing(userId) {
    console.log('Showing following for user:', userId);
    fetchAndShowFollowers(userId, 'following');
}

// Function to fetch and show follower/following data
async function fetchAndShowFollowers(userId, type) {
    try {
        const response = await fetch(`/api/user/${userId}/${type}`);
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.message || 'Failed to fetch users');
        }
        
        const users = data[type] || [];
        showFollowersModal(users, type === 'followers' ? 'Followers' : 'Following');
    } catch (error) {
        console.error(`Error fetching ${type}:`, error);
        showToast(`Failed to load ${type}. Please try again.`, 'error');
    }
}

// Function to display the followers/following modal
function showFollowersModal(users, title) {
    // Remove existing modal if it exists
    const existingModal = document.getElementById('followersModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // Create modal container
    const modalContainer = document.createElement('div');
    modalContainer.id = 'followersModal';
    modalContainer.className = 'fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center';
    
    // Create modal content
    let userListHTML = '';
    if (users.length === 0) {
        userListHTML = `
            <div class="py-8 text-center text-gray-500 dark:text-gray-400">
                <i class="fas fa-user-friends text-4xl mb-3"></i>
                <p>No ${title.toLowerCase()} yet</p>
            </div>
        `;
    } else {
        userListHTML = users.map(user => `
            <a href="/user/${user.username || user.email.split('@')[0]}" class="flex items-center p-3 hover:bg-gray-100 dark:hover:bg-gray-800 transition rounded-lg">
                <div class="relative">
                    <img src="${user.profileImage || '/img/default-profile.png'}" alt="${user.name}" class="w-12 h-12 rounded-full object-cover">
                    ${user.isOnline ? `<div class="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white dark:border-gray-700"></div>` : ''}
                </div>
                <div class="ml-3 flex-1">
                    <p class="font-medium text-gray-800 dark:text-white">${user.name}</p>
                    <p class="text-sm text-gray-500 dark:text-gray-400">@${user.username || user.email.split('@')[0]}</p>
                </div>
                ${window.currentUserId !== user._id ? `
                    <button onclick="event.preventDefault(); performFollowToggle('${user._id}')" 
                            class="ml-auto px-3 py-1 text-xs font-medium bg-blue-500 hover:bg-blue-600 text-white rounded-md">
                        Follow
                    </button>
                ` : ''}
            </a>
        `).join('');
    }
    
    modalContainer.innerHTML = `
        <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4 overflow-hidden shadow-xl">
            <div class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-lg font-semibold text-gray-800 dark:text-white">${title}</h3>
                <button onclick="closeFollowersModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="max-h-80 overflow-y-auto p-2">
                ${userListHTML}
            </div>
        </div>
    `;
    
    // Add modal to the DOM
    document.body.appendChild(modalContainer);
    document.body.style.overflow = 'hidden';
    
    // Add event listener to close modal when clicking outside
    modalContainer.addEventListener('click', function(event) {
        if (event.target === modalContainer) {
            closeFollowersModal();
        }
    });
}

// Function to close followers modal
function closeFollowersModal() {
    const modal = document.getElementById('followersModal');
    if (modal) {
        modal.remove();
        document.body.style.overflow = '';
    }
}

// Add closeStoryModal function
function closeStoryModal() {
    console.log('closeStoryModal function called');
    if (storyTimer) {
        console.log('Clearing story timer');
        clearTimeout(storyTimer);
    }
    
    const storyModal = document.getElementById('storyModal');
    if (storyModal) {
        console.log('Hiding story modal');
        storyModal.classList.add('hidden');
        document.body.style.overflow = ''; // Re-enable scrolling
    } else {
        console.error('Story modal element not found');
    }
    
    // Reset story state
    currentStories = [];
    currentUserIndex = 0;
    currentStoryIndex = 0;
    console.log('Story modal should now be closed');
}

// Function to display a story
function showStory(userIndex, storyIndex) {
    if (!currentStories || !currentStories[userIndex] || !currentStories[userIndex].stories) return;
    
    // Update indices
    currentUserIndex = userIndex;
    currentStoryIndex = storyIndex;
    
    // Get the story
    const userStories = currentStories[userIndex];
    const story = userStories.stories[storyIndex];
    
    // Update UI elements
    document.getElementById('storyUsername').textContent = userStories.user.username || userStories.user.name;
    document.getElementById('storyTime').textContent = getTimeAgo(new Date(story.createdAt));
    document.getElementById('storyUserImage').src = userStories.user.profileImage;
    
    // Check if it's the user's own story and show delete buttons if it is
    const isOwnStory = userStories.user._id.toString() === currentUserId.toString();
    console.log('Story owner ID:', userStories.user._id);
    console.log('Current user ID:', currentUserId);
    console.log('Is own story:', isOwnStory);
    
    // Show/hide the delete buttons based on ownership
    const deleteButton = document.getElementById('storyDeleteButton');
    const deleteButtonTop = document.getElementById('storyDeleteButtonTop');
    const deleteButtonBottom = document.getElementById('storyDeleteButtonBottom');
    
    if (deleteButton) {
        deleteButton.classList.toggle('hidden', !isOwnStory);
    }
    
    if (deleteButtonTop) {
        deleteButtonTop.classList.toggle('hidden', !isOwnStory);
    }
    
    if (deleteButtonBottom) {
        deleteButtonBottom.classList.toggle('hidden', !isOwnStory);
    }
    
    // Clear previous story content
    const storyContainer = document.getElementById('storyImage');
    storyContainer.innerHTML = '';
    
    // Create media element based on type
    if (story.media.type === 'image') {
        const img = document.createElement('img');
        img.src = story.media.url;
        img.className = 'w-full h-full object-contain';
        storyContainer.appendChild(img);
    } else if (story.media.type === 'video') {
        const video = document.createElement('video');
        video.src = story.media.url;
        video.className = 'w-full h-full object-contain';
        video.autoplay = true;
        video.controls = false;
        video.muted = false;
        storyContainer.appendChild(video);
    }
    
    // Update progress bars
    updateProgressBars();
    
    // Clear any existing timer
    if (storyTimer) clearTimeout(storyTimer);
    
    // Progress to next story after delay
    const storyDuration = story.media.type === 'video' ? 0 : 5000; // 0 for video, 5s for images
    if (storyDuration > 0) {
        storyTimer = setTimeout(() => {
            showNextStory();
        }, storyDuration);
    }
    
    // Mark story as viewed
    markStoryAsViewed(story._id);
}

// Function to delete the current story
async function deleteCurrentStory() {
    if (!currentStories || currentUserIndex < 0 || currentStoryIndex < 0) return;
    
    const userStories = currentStories[currentUserIndex];
    const story = userStories.stories[currentStoryIndex];
    
    if (!story || userStories.user._id !== currentUserId) {
        showToast('You can only delete your own stories', 'error');
        return;
    }
    
    if (!confirm('Are you sure you want to delete this story?')) {
        return;
    }
    
    try {
        const response = await fetch(`/story/${story._id}/delete`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            showToast('Story deleted successfully');
            
            // Remove story from the current stories array
            userStories.stories.splice(currentStoryIndex, 1);
            
            // If no more stories for this user, close modal or go to next user's stories
            if (userStories.stories.length === 0) {
                if (currentStories.length > 1) {
                    // Go to next user's stories
                    currentStories.splice(currentUserIndex, 1);
                    currentUserIndex = Math.min(currentUserIndex, currentStories.length - 1);
                    currentStoryIndex = 0;
                    showStory(currentUserIndex, currentStoryIndex);
                } else {
                    // Close modal if no more stories
                    closeStoryModal();
                    // Refresh the page to update UI
                    setTimeout(() => window.location.reload(), 1000);
                }
            } else {
                // Go to next story or wrap around
                currentStoryIndex = currentStoryIndex % userStories.stories.length;
                showStory(currentUserIndex, currentStoryIndex);
            }
            
            // Update progress bars
            updateProgressBars();
        } else {
            const errorData = await response.json();
            showToast(errorData.error || 'Failed to delete story', 'error');
        }
    } catch (error) {
        console.error('Error deleting story:', error);
        showToast('An error occurred while deleting the story', 'error');
    }
}

// Function to show the time ago
function getTimeAgo(date) {
    const seconds = Math.floor((new Date() - date) / 1000);
    
    let interval = Math.floor(seconds / 31536000);
    if (interval > 1) return interval + ' years ago';
    if (interval === 1) return '1 year ago';
    
    interval = Math.floor(seconds / 2592000);
    if (interval > 1) return interval + ' months ago';
    if (interval === 1) return '1 month ago';
    
    interval = Math.floor(seconds / 86400);
    if (interval > 1) return interval + ' days ago';
    if (interval === 1) return '1 day ago';
    
    interval = Math.floor(seconds / 3600);
    if (interval > 1) return interval + ' hours ago';
    if (interval === 1) return '1 hour ago';
    
    interval = Math.floor(seconds / 60);
    if (interval > 1) return interval + ' minutes ago';
    if (interval === 1) return '1 minute ago';
    
    if (seconds < 10) return 'just now';
    
    return Math.floor(seconds) + ' seconds ago';
}

// Function to open user stories
async function openUserStories(userId) {
    console.log('Opening stories for user ID:', userId);
    
    try {
        // Make sure currentUserId is set
        window.currentUserId = '<%= user._id %>'; 
        console.log('Current user ID set to:', window.currentUserId);
        
        // Fetch the user's stories
        const response = await fetch(`/api/stories/${userId}`);
        if (!response.ok) {
            throw new Error('Failed to fetch stories');
        }
        
        const stories = await response.json();
        console.log('Fetched stories:', stories);
        
        // Check if there are any stories
        if (!stories || !stories.length) {
            console.log('No stories found for user');
            return;
        }
        
        // Store the stories in the global variable
        currentStories = stories;
        currentUserIndex = 0;
        currentStoryIndex = 0;
        
        // Open the story modal
        document.getElementById('storyModal').classList.remove('hidden');
        document.body.style.overflow = 'hidden'; // Prevent scrolling
        
        // Initialize the progress bars
        initializeProgressBars(stories[0]);
        
        // Show the first story
        showStory(0, 0);
        
    } catch (error) {
        console.error('Error opening stories:', error);
        showToast('Failed to load stories');
    }
}
</script>

<%- include('partials/footer') %>