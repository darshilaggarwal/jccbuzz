<%- include('partials/header') %>

<div class="max-w-4xl mx-auto mt-8 px-4">
    <!-- Profile Header -->
    <div class="bg-white dark:bg-black border-b border-gray-200 dark:border-gray-800 pb-6">
        <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex flex-col sm:flex-row items-center sm:items-start pt-6 sm:space-x-6">
                <!-- Profile Image -->
                <div class="relative mb-4 sm:mb-0">
                    <div class="<%= profileUser.hasActiveStory ? 'story-ring rounded-full p-[2px]' : '' %>" id="profileImageContainer">
                        <div class="bg-white dark:bg-black p-[1px] rounded-full">
                            <img src="<%= profileUser.profileImage %>" 
                                 alt="<%= profileUser.name %>" 
                                 class="w-24 h-24 sm:w-36 sm:h-36 rounded-full object-cover cursor-pointer" 
                                 id="profileImage">
                        </div>
                    </div>
                </div>
                
                <!-- Profile Info -->
                <div class="flex-1 text-center sm:text-left">
                    <div class="flex flex-col sm:flex-row sm:items-center mb-2">
                        <h1 class="text-xl sm:text-2xl font-semibold text-gray-900 dark:text-white"><%= profileUser.name %></h1>
                        
                        <% if (profileUser.isPrivate) { %>
                            <span class="ml-2 px-2 py-1 text-xs bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full font-medium">Private</span>
                        <% } %>
                        
                        <% if (profileUser.isVerified) { %>
                            <span class="ml-2 text-blue-500"><i class="fas fa-badge-check"></i></span>
                        <% } %>
                    </div>
                    
                    <p class="text-gray-500 dark:text-gray-400 mb-4">@<%= profileUser.username %></p>
                    
                    <!-- Stats & Follow Button Row -->
                    <div class="flex flex-col sm:flex-row items-center">
                        <div class="flex space-x-6 mb-4 sm:mb-0">
                            <div>
                                <span class="text-gray-900 dark:text-white font-semibold"><%= profileUser.posts ? profileUser.posts.length : 0 %></span>
                                <span class="text-gray-500 dark:text-gray-400 text-sm"> posts</span>
                            </div>
                            <button class="focus:outline-none" onclick="showFollowers('<%= profileUser._id %>')">
                                <span class="text-gray-900 dark:text-white font-semibold" id="followersCount"><%= typeof profileUser.followers === 'number' ? profileUser.followers : (profileUser.followers ? profileUser.followers.length : 0) %></span>
                                <span class="text-gray-500 dark:text-gray-400 text-sm"> followers</span>
                            </button>
                            <button class="focus:outline-none" onclick="showFollowing('<%= profileUser._id %>')">
                                <span class="text-gray-900 dark:text-white font-semibold"><%= typeof profileUser.following === 'number' ? profileUser.following : (profileUser.following ? profileUser.following.length : 0) %></span>
                                <span class="text-gray-500 dark:text-gray-400 text-sm"> following</span>
                            </button>
                        </div>
                        
                        <% if (!isOwnProfile) { %>
                            <div class="ml-0 sm:ml-auto">
                                <button id="followButton" 
                                        onclick="performFollowToggle('<%= profileUser._id %>')"
                                        class="px-4 py-2 text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 bg-blue-500 hover:bg-blue-600 text-white">
                                    Follow
                                </button>
                                
                                <a href="/chat/<%= profileUser._id %>" 
                                   class="px-4 py-2 text-sm font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 text-gray-800 dark:text-white rounded-md ml-2 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 inline-block">
                                    Message
                                </a>
                            </div>
                        <% } else { %>
                            <div class="ml-0 sm:ml-auto">
                                <a href="/edit-profile" 
                                   class="px-4 py-2 text-sm font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 text-gray-800 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                                    Edit Profile
                                </a>
                            </div>
                        <% } %>
                    </div>
                    
                    <!-- Bio -->
                    <% if (profileUser.bio) { %>
                        <div class="mt-4 text-gray-700 dark:text-gray-300">
                            <%= profileUser.bio %>
                        </div>
                    <% } %>
                    
                    <!-- Website -->
                    <% if (profileUser.website) { %>
                        <div class="mt-1">
                            <a href="<%= profileUser.website %>" 
                               target="_blank" 
                               class="text-blue-500 hover:underline">
                                <%= profileUser.website.replace(/(^\w+:|^)\/\//, '') %>
                            </a>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Posts Section - Instagram Grid Style -->
    <div class="bg-white dark:bg-black rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
            <i class="fas fa-th mr-2"></i> Posts
        </h2>
        
        <% 
        // Helper function to check if arrays contain a value
        function idArrayIncludes(array, targetId) {
            if (!array || !Array.isArray(array) || array.length === 0) return false;
            return array.some(id => id && id.toString() === targetId.toString());
        }
        
        // Check if user should be allowed to see posts
        const canViewPosts = isOwnProfile || 
                           !profileUser.isPrivate || 
                           (user && user.following && idArrayIncludes(user.following, profileUser._id));
        %>
        
        <!-- Hidden field to store profile data for JS -->
        <input type="hidden" id="profileUserId" value="<%= profileUser._id %>">
        <input type="hidden" id="isProfilePrivate" value="<%= profileUser.isPrivate %>">
        <input type="hidden" id="canViewPosts" value="<%= canViewPosts %>">
        
        <div id="postsContainer">
        <% if (profileUser.isPrivate && !canViewPosts) { %>
            <!-- Private account notice -->
            <div class="flex flex-col items-center justify-center py-12 text-center">
                <div class="text-5xl text-gray-300 dark:text-gray-600 mb-4">
                    <i class="fas fa-lock"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">This account is private</h3>
                <p class="text-sm text-gray-500 dark:text-gray-400">Follow this account to see their photos and videos.</p>
            </div>
        <% } else if (profileUser.posts.length === 0) { %>
            <div class="flex flex-col items-center justify-center py-12 text-center">
                <div class="text-5xl text-gray-300 dark:text-gray-600 mb-4">
                    <i class="fas fa-camera"></i>
                </div>
                <p class="text-gray-500 dark:text-gray-400 mb-2">No posts yet</p>
                <p class="text-sm text-gray-400 dark:text-gray-500">When <%= isOwnProfile ? 'you share' : profileUser.name + ' shares' %> photos, they'll appear here.</p>
            </div>
        <% } else { %>
            <div class="grid grid-cols-2 md:grid-cols-3 gap-2 md:gap-4">
                <% profileUser.posts.forEach(post => { %>
                    <a href="/post/<%= post._id %>" class="group relative aspect-square overflow-hidden rounded-md block transform transition hover:scale-[0.98]" data-post-id="<%= post._id %>">
                        <% if (post.images && post.images.length > 0) { %>
                            <img src="<%= post.images[0].url %>" 
                                alt="Post thumbnail"
                                class="w-full h-full object-cover">
                                
                            <% if (post.images.length > 1) { %>
                                <div class="absolute top-2 right-2 text-white">
                                    <i class="fas fa-clone"></i>
                                </div>
                            <% } %>
                        <% } else { %>
                            <!-- Show text content for posts without images -->
                            <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600 p-4 text-white overflow-hidden">
                                <p class="text-center text-sm md:text-base line-clamp-6 font-medium">
                                    <%= post.content || post.title || 'No content' %>
                                </p>
                            </div>
                        <% } %>
                        
                        <!-- Post Overlay on Hover -->
                        <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center space-x-6 text-white">
                            <div class="flex items-center">
                                <i class="fas fa-heart mr-2"></i>
                                <span><%= post.likes.length %></span>
                            </div>
                            <div class="flex items-center">
                                <i class="fas fa-comment mr-2"></i>
                                <span><%= post.comments.length %></span>
                            </div>
                        </div>
                        
                        <% if (isOwnProfile) { %>
                        <!-- Three dots menu trigger -->
                        <div class="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                            <button class="w-8 h-8 rounded-full bg-black bg-opacity-50 text-white flex items-center justify-center hover:bg-opacity-70 transition" 
                                   onclick="event.preventDefault(); showPostMenu(event, '<%= post._id %>')">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                        </div>
                        <% } %>
                    </a>
                <% }) %>
            </div>
        <% } %>
        </div>
    </div>
</div>

<!-- Story Viewer Modal -->
<div id="storyModal" class="hidden fixed inset-0 bg-black z-50">
    <div class="relative h-full flex justify-center">
        <!-- Mobile-like container with fixed aspect ratio -->
        <div class="h-full aspect-[9/16] bg-black relative max-w-[500px] w-full">
            <!-- Touch areas for navigation -->
            <div class="absolute inset-0 z-10 flex">
                <div class="w-1/2 h-full" onclick="showPreviousStory()"></div>
                <div class="w-1/2 h-full" onclick="showNextStory()"></div>
            </div>
            
            <button onclick="closeStoryModal()" class="absolute top-4 right-4 text-white text-2xl z-20">
                <i class="fas fa-times"></i>
            </button>
            
            <div class="h-full flex items-center justify-center bg-black">
                <div id="storyImage" class="w-full h-full relative">
                    <!-- Media will be inserted here -->
                </div>
            </div>

            <!-- Story Progress Bars -->
            <div class="absolute top-0 left-0 right-0 flex space-x-1 p-2 z-20">
                <div id="storyProgressBars" class="flex-1 flex space-x-1">
                    <!-- Progress bars will be added here dynamically -->
                </div>
            </div>

            <!-- Story User Info -->
            <div class="absolute top-4 left-4 flex items-center z-20">
                <div class="story-ring p-[2px] rounded-full">
                    <div class="bg-black p-[1px] rounded-full">
                        <img id="storyUserImage" src="" alt="Profile" class="w-8 h-8 rounded-full object-cover">
                    </div>
                </div>
                <div class="ml-2 text-white">
                    <p id="storyUsername" class="font-semibold text-sm"></p>
                    <p id="storyTime" class="text-xs opacity-75"></p>
                </div>
            </div>

            <!-- Story Reply Section -->
            <div class="absolute bottom-4 left-4 right-4 z-20">
                <form onsubmit="replyToStory(event)" class="flex items-center gap-2">
                    <input type="text" 
                           id="storyReplyInput"
                           placeholder="Reply to story..." 
                           class="flex-1 px-4 py-3 rounded-full bg-white/10 text-white placeholder-white/70 backdrop-blur-sm border border-white/20 focus:outline-none focus:ring-2 focus:ring-white/50">
                    <button type="submit" 
                            class="p-3 rounded-full bg-white/10 text-white backdrop-blur-sm border border-white/20 hover:bg-white/20 flex items-center justify-center">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Followers Modal - Instagram Style -->
<div id="followersModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4">
        <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Followers</h3>
            <button onclick="closeFollowersModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div id="followersList" class="max-h-96 overflow-y-auto p-2">
            <!-- Followers will be loaded here -->
            <div class="flex justify-center py-8">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-800 dark:border-white"></div>
            </div>
        </div>
    </div>
</div>

<!-- Following Modal - Instagram Style -->
<div id="followingModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4">
        <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Following</h3>
            <button onclick="closeFollowingModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div id="followingList" class="max-h-96 overflow-y-auto p-2">
            <!-- Following users will be loaded here -->
            <div class="flex justify-center py-8">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-800 dark:border-white"></div>
            </div>
        </div>
    </div>
</div>

<!-- Unfollow Confirmation Modal -->
<div id="unfollowModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4 p-4 flex flex-col items-center">
        <img id="unfollowUserImage" src="" alt="Profile" class="w-16 h-16 rounded-full object-cover mb-4">
        <p class="text-center mb-6 text-gray-800 dark:text-white">Unfollow <span id="unfollowUsername" class="font-semibold"></span>?</p>
        <div class="w-full border-t border-gray-200 dark:border-gray-700"></div>
        <button id="confirmUnfollow" class="w-full py-3 text-red-500 font-medium">
            Unfollow
        </button>
        <div class="w-full border-t border-gray-200 dark:border-gray-700"></div>
        <button onclick="closeUnfollowModal()" class="w-full py-3 text-gray-800 dark:text-white">
            Cancel
        </button>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteConfirmModal" class="hidden fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg w-full max-w-md mx-4 p-6">
        <h3 class="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Delete Post</h3>
        <p class="mb-6 text-gray-600 dark:text-gray-300">Are you sure you want to delete this post? This action cannot be undone.</p>
        <div class="flex justify-end space-x-3">
            <button onclick="closeDeleteConfirmModal()" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors text-gray-800 dark:text-white">
                Cancel
            </button>
            <button id="confirmDeleteBtn" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors">
                Delete
            </button>
        </div>
    </div>
</div>

<!-- Post Options Menu -->
<div id="postOptionsMenu" class="fixed hidden bg-white dark:bg-gray-900 rounded-lg shadow-xl z-50 overflow-hidden w-48">
    <ul class="divide-y divide-gray-100 dark:divide-gray-800">
        <li>
            <a href="#" id="editPostOption" class="px-4 py-3 flex items-center text-gray-800 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 transition">
                <i class="fas fa-edit mr-3 text-blue-500"></i> Edit
            </a>
        </li>
        <li>
            <button id="deletePostOption" class="w-full px-4 py-3 flex items-center text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-800 transition">
                <i class="fas fa-trash mr-3"></i> Delete
            </button>
        </li>
    </ul>
</div>

<!-- Style tweaks for the profile page -->
<style>
.line-clamp-6 {
    display: -webkit-box;
    -webkit-line-clamp: 6;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.post-menu-backdrop {
    background: rgba(0, 0, 0, 0.5);
    position: fixed;
    inset: 0;
    z-index: 40;
}

@media (max-width: 640px) {
    .line-clamp-6 {
        -webkit-line-clamp: 4;
    }
}

.story-ring {
    background: linear-gradient(45deg, #f09433 0%, #e6683c 25%, #dc2743 50%, #cc2366 75%, #bc1888 100%);
}

.story-ring-viewed {
    background: #ccc;
}

/* Remove pulse animation */
@keyframes pulse-ring {
    0% {
        transform: scale(0.98);
        opacity: 0.8;
    }
    50% {
        transform: scale(1);
        opacity: 1;
    }
    100% {
        transform: scale(0.98);
        opacity: 0.8;
    }
}

/* No longer used */
.pulse-ring {
    /* animation: pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite; */
}

.story-progress-bar {
    height: 3px;
    border-radius: 3px;
    transition: width 0.1s linear;
}
</style>

<!-- Add Swiper JS for image carousel -->
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>

<script>
// Track the currently selected post
let currentPostId = null;

// Variables for story handling
let currentStories = [];
let currentStoryIndex = 0;
let currentUserIndex = 0;
let storyTimer = null;

// Document ready handler
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded - initializing profile page');
    
    // Initialize user ID
    window.currentUserId = '<%= user._id %>';
    window.profileUserId = '<%= profileUser._id %>';
    
    // Check if user has active stories and make profile image clickable
    const profileImageContainer = document.getElementById('profileImageContainer');
    const profileImage = document.getElementById('profileImage');
    
    if (profileImageContainer && profileImageContainer.classList.contains('story-ring')) {
        console.log('User has active stories, adding click handler');
        profileImage.addEventListener('click', function() {
            openUserStories(window.profileUserId);
        });
    }
    
    // Update the follow button on page load
    const followButton = document.getElementById('followButton');
    if (!followButton) return;
    
    const profileId = '<%= profileUser._id %>';
    
    // Check if follow status is in localStorage first (faster response)
    const isFollowing = localStorage.getItem(`following_${profileId}`) === 'true';
    const hasRequested = localStorage.getItem(`followRequested_${profileId}`) === 'true';
    
    if (isFollowing) {
        followButton.textContent = 'Following';
        followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
        followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
    } else if (hasRequested) {
        followButton.textContent = 'Requested';
        followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
        followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
    }
    
    // Then check with the server for accurate status
    fetch(`/api/follow-status/${profileId}`)
        .then(response => response.json())
        .then(data => {
            if (data.following) {
                followButton.textContent = 'Following';
                followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                localStorage.setItem(`following_${profileId}`, 'true');
                localStorage.removeItem(`followRequested_${profileId}`);
            } else if (data.followRequested) {
                followButton.textContent = 'Requested';
                followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                localStorage.setItem(`followRequested_${profileId}`, 'true');
                localStorage.removeItem(`following_${profileId}`);
            } else {
                followButton.textContent = 'Follow';
                followButton.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                followButton.classList.add('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                localStorage.removeItem(`following_${profileId}`);
                localStorage.removeItem(`followRequested_${profileId}`);
            }
        })
        .catch(error => {
            console.error('Error checking follow status:', error);
        });
    
    // Set up delete button handler
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener('click', function() {
            deletePost(postIdToDelete);
        });
    }
    
    // Add transitions for hover effects
    document.querySelectorAll('[data-post-id]').forEach(post => {
        post.classList.add('transition', 'duration-200');
    });
    
    // Check follow status once
    checkFollowStatus();
});

// Function to actually perform the follow/unfollow action
async function performFollowToggle(userId) {
    try {
        const followButton = document.getElementById('followButton');
        if (!followButton) return;
        
        const isCurrentlyFollowing = followButton.textContent.trim() === 'Following';
        const hasRequestedFollow = followButton.textContent.trim() === 'Requested';
        
        // Disable button during request
        followButton.disabled = true;
        
        // Show loading state
        const originalText = followButton.textContent;
        followButton.innerHTML = '<span class="inline-block animate-spin mr-1">⟳</span> ' + originalText;
        
        console.log(`Toggling follow for user ID: ${userId}`);
        
        const response = await fetch(`/user/${userId}/follow`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin' // Ensure cookies are sent with the request
        });
        
        const data = await response.json();
        console.log('Follow toggle response:', data);
        
        if (data.error) {
            showToast(data.error);
            followButton.disabled = false;
            followButton.textContent = originalText;
            return;
        }
        
        const followersCountElement = document.getElementById('followersCount');
        
        if (isCurrentlyFollowing) {
            // User was following, now unfollowing
            followButton.textContent = 'Follow';
            followButton.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
            followButton.classList.add('bg-blue-500', 'hover:bg-blue-600', 'text-white');
            
            // Update followers count with animation
            if (followersCountElement) {
                const currentCount = parseInt(followersCountElement.textContent);
                followersCountElement.textContent = Math.max(0, currentCount - 1);
            }
            
            // Update local storage
            localStorage.removeItem(`following_${userId}`);
            localStorage.removeItem(`followRequested_${userId}`);
            
            showToast('Unfollowed successfully');
            
        } else if (hasRequestedFollow) {
            // User had requested to follow, now cancelling request
            followButton.textContent = 'Follow';
            followButton.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
            followButton.classList.add('bg-blue-500', 'hover:bg-blue-600', 'text-white');
            
            // Update local storage
            localStorage.removeItem(`followRequested_${userId}`);
            
            showToast('Follow request cancelled');
            
        } else {
            // User was not following, now following or requesting
            if (data.followRequested) {
                // Private account - show requested state
                followButton.textContent = 'Requested';
                followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                
                // Update local storage
                localStorage.setItem(`followRequested_${userId}`, 'true');
                
                showToast('Follow request sent');
                
            } else {
                // Public account - show following state
                followButton.textContent = 'Following';
                followButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
                followButton.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-white');
                
                // Update followers count with animation
                if (followersCountElement) {
                    const currentCount = parseInt(followersCountElement.textContent) || 0;
                    followersCountElement.textContent = currentCount + 1;
                }
                
                // Update local storage
                localStorage.setItem(`following_${userId}`, 'true');
                
                showToast('Following successfully');
            }
        }
        
        // Check if we need to refresh the page to show posts for a private account
        if (data.following && document.getElementById('isProfilePrivate').value === 'true') {
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }
    } catch (error) {
        console.error('Error:', error);
        showToast('An error occurred while processing your request.');
    } finally {
        // Re-enable button
        const followButton = document.getElementById('followButton');
        if (followButton) followButton.disabled = false;
    }
}

// Reply to story function
function replyToStory(event) {
    event.preventDefault();
    
    const replyInput = document.getElementById('storyReplyInput');
    const message = replyInput.value.trim();
    
    if (!message) return;
    
    const userStories = currentStories[currentUserIndex];
    const story = userStories.stories[currentStoryIndex];
    
    // Show loading state in button
    const submitBtn = event.target.querySelector('button');
    const originalBtnHTML = submitBtn.innerHTML;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    submitBtn.disabled = true;
    
    console.log('Sending story reply to:', story._id);
    
    fetch(`/story/${story._id}/reply`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ message })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Reply response:', data);
        if (data.message) {
            showToast('Reply sent');
            replyInput.value = '';
            
            // Redirect to the chat with the story owner
            if (data.chatId) {
                // Close story modal
                closeStoryModal();
                
                // Wait for toast to be visible before redirecting
                setTimeout(() => {
                    window.location.href = `/chat/${data.chatId}`;
                }, 1000);
            }
        }
    })
    .catch(error => {
        console.error('Error sending reply:', error);
        showToast('Failed to send reply');
    })
    .finally(() => {
        // Reset button state
        submitBtn.innerHTML = originalBtnHTML;
        submitBtn.disabled = false;
    });
}
</script>

<%- include('partials/footer') %>