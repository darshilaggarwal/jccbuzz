<%- include('partials/header2') %>

<script>
    // Add currentUserId variable
    const currentUserId = '<%= user._id %>';
</script>

<div class="container mx-auto px-4 py-8">
    <!-- Header/Hero Section -->
    <div class="relative mb-16 rounded-2xl overflow-hidden">
        <!-- Background with gradient overlay -->
        <div class="absolute inset-0 bg-gradient-to-r from-blue-600/90 to-purple-600/90 z-10"></div>
        <div class="absolute inset-0 bg-pattern opacity-10 z-0"></div>
        
        <!-- Hero content -->
        <div class="relative z-20 px-4 py-10 md:px-6 md:py-16 max-w-7xl mx-auto">
            <div class="flex flex-col md:flex-row md:items-center gap-8">
                <div class="flex-1">
                    <h1 class="text-4xl md:text-5xl font-bold text-white mb-4">Projects Hub</h1>
                    <p class="text-lg md:text-xl text-blue-100 mb-6 max-w-2xl">
                        Discover innovative projects, collaborate with talented developers, and transform your ideas into reality. Join ongoing initiatives or bring your own vision to life.
                    </p>
                    <div class="flex flex-wrap gap-3 mb-6">
                        <div class="flex items-center bg-white/20 backdrop-blur-sm px-4 py-2 rounded-lg">
                            <i class="fas fa-users text-white mr-3"></i>
                            <span class="text-white">Connect with peers</span>
                        </div>
                        <div class="flex items-center bg-white/20 backdrop-blur-sm px-4 py-2 rounded-lg">
                            <i class="fas fa-code-branch text-white mr-3"></i>
                            <span class="text-white">Build your portfolio</span>
                        </div>
                        <div class="flex items-center bg-white/20 backdrop-blur-sm px-4 py-2 rounded-lg">
                            <i class="fas fa-lightbulb text-white mr-3"></i>
                            <span class="text-white">Share your ideas</span>
                        </div>
                    </div>
                    <button onclick="showCreateProjectModal()" class="bg-white hover:bg-gray-100 text-blue-600 px-6 py-3 rounded-lg flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 font-medium">
                        <i class="fas fa-plus mr-2"></i> Create New Project
                    </button>
                </div>
                <div class="hidden md:block mr-6">
                    <div class="relative">
                        <div class="absolute -top-6 -left-6 w-24 h-24 rounded-full bg-blue-400/30 backdrop-blur-sm animate-pulse"></div>
                        <div class="absolute -bottom-8 -right-8 w-32 h-32 rounded-full bg-purple-400/30 backdrop-blur-sm animate-pulse delay-300"></div>
                        <div class="relative z-10 bg-white/10 backdrop-blur-sm p-4 rounded-xl border border-white/20">
                            <div class="grid grid-cols-2 gap-3">
                                <div class="bg-white/20 backdrop-blur-sm rounded-lg p-3 shadow-sm">
                                    <i class="fas fa-code text-3xl text-white mb-2"></i>
                                    <p class="text-white text-sm">Develop Skills</p>
                                </div>
                                <div class="bg-white/20 backdrop-blur-sm rounded-lg p-3 shadow-sm">
                                    <i class="fas fa-rocket text-3xl text-white mb-2"></i>
                                    <p class="text-white text-sm">Launch Projects</p>
                                </div>
                                <div class="bg-white/20 backdrop-blur-sm rounded-lg p-3 shadow-sm">
                                    <i class="fas fa-handshake text-3xl text-white mb-2"></i>
                                    <p class="text-white text-sm">Collaborate</p>
                                </div>
                                <div class="bg-white/20 backdrop-blur-sm rounded-lg p-3 shadow-sm">
                                    <i class="fas fa-star text-3xl text-white mb-2"></i>
                                    <p class="text-white text-sm">Gain Experience</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        /* Additional fixes for hero section and mobile view */
        .projects-title {
            color: white !important;
        }
        
        @media (max-width: 768px) {
            .relative.mb-16.rounded-2xl {
                border-radius: 1rem;
                margin-bottom: 2.5rem;
            }
            
            .bg-white\/20 {
                padding: 0.5rem 1rem;
                margin-bottom: 0.5rem;
            }
            
            /* Mobile-optimized feature cards */
            .flex.flex-wrap.gap-3 {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 0.5rem;
                margin-bottom: 1.5rem;
            }
            
            /* Improve hero section spacing */
            .relative.z-20.px-4.py-10 {
                padding: 2rem 1rem;
            }
            
            /* Better button display on mobile */
            button.bg-white {
                width: 100%;
                justify-content: center;
                padding: 0.75rem 1rem;
                margin-top: 0.5rem;
            }
            
            .hidden.md\\:block.mr-6 {
                display: none;
            }
        }
        
        /* Fix for the button text */
        button.bg-white {
            color: #3b82f6;
        }
        
        button.bg-white:hover {
            color: #2563eb;
        }
        
        /* Modal inputs */
        #createProjectModal input,
        #createProjectModal select,
        #createProjectModal textarea,
        #join-request-modal textarea {
            background-color: white !important;
            color: #334155 !important;
        }
        
        @media (prefers-color-scheme: dark) {
            #createProjectModal input,
            #createProjectModal select,
            #createProjectModal textarea,
            #join-request-modal textarea {
                background-color: #1e1e1e !important;
                color: #f1f5f9 !important;
            }
        }
        
        /* Gradient tab buttons */
        .tab-button {
            position: relative;
            overflow: hidden;
            outline: none !important;
        }
        
        .tab-button:focus {
            outline: none !important;
            box-shadow: none !important;
        }
        
        .tab-button:hover::before,
        .tab-button.active::before {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(to right, #3b82f6, #8b5cf6);
            z-index: 1;
        }
        
        /* Enhanced gradient button */
        .gradient-btn {
            background-image: linear-gradient(to right, #3b82f6, #8b5cf6) !important;
            transition: all 0.3s ease;
            background-size: 200% auto;
            box-shadow: 0 4px 6px -1px rgba(59, 130, 246, 0.2), 0 2px 4px -1px rgba(59, 130, 246, 0.1);
        }
        
        .gradient-btn:hover {
            background-position: right center;
            box-shadow: 0 10px 15px -3px rgba(59, 130, 246, 0.3), 0 4px 6px -2px rgba(59, 130, 246, 0.2);
            transform: none; /* Remove position change on hover */
        }
        
        /* Create project modal */
        #createProjectModal .flex.justify-between.items-center {
            background-image: linear-gradient(to right, #3b82f6, #8b5cf6);
            margin: -1.5rem -1.5rem 1.5rem -1.5rem;
            padding: 1.5rem;
            border-radius: 0.5rem 0.5rem 0 0;
        }
        
        #createProjectModal .flex.justify-between.items-center h2 {
            color: white !important;
        }
        
        #createProjectModal .flex.justify-between.items-center button {
            color: white !important;
        }
        
        /* Mobile fixes for modals */
        @media (max-width: 640px) {
            #createProjectModal .p-4,
            #participantsModal .p-4,
            #join-request-modal .p-4 {
                padding: 1rem !important;
            }
            
            #createProjectModal .flex.justify-between.items-center,
            #participantsModal .flex.justify-between.items-center,
            #join-request-modal .flex.justify-between.items-center {
                margin: -1rem -1rem 1rem -1rem;
                padding: 1rem;
            }
        }
    </style>

    <!-- Project Tabs -->
    <div class="mb-8">
        <div class="border-b border-gray-200 dark:border-gray-700">
            <nav class="-mb-px flex space-x-8" aria-label="Tabs">
                <button onclick="switchTab('ongoing')" class="tab-button border-b-2 border-blue-500 py-4 px-1 text-sm font-medium text-blue-600 dark:text-blue-400 transition-all duration-300">
                    <i class="fas fa-code-branch mr-2"></i> Ongoing Projects
                </button>
                <button onclick="switchTab('upcoming')" class="tab-button border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300 transition-all duration-300">
                    <i class="fas fa-calendar-alt mr-2"></i> Upcoming Projects
                </button>
            </nav>
        </div>
    </div>

    <!-- Projects Grid -->
    <div id="ongoing-projects" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        <!-- Projects will be loaded here dynamically -->
    </div>

    <div id="upcoming-projects" class="hidden grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        <!-- Projects will be loaded here dynamically -->
    </div>

    <!-- Empty State -->
    <div id="empty-state" class="hidden text-center py-16">
        <i class="fas fa-folder-open text-6xl text-gray-400 mb-6"></i>
        <h3 class="text-2xl font-semibold text-gray-900 dark:text-white mb-3">No Projects Found</h3>
        <p class="text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto">Be the first to create a project and start collaborating with others!</p>
        <button onclick="showCreateProjectModal()" class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
            <i class="fas fa-plus mr-2"></i> Create Project
        </button>
    </div>
</div>

<!-- Create Project Modal -->
<div id="createProjectModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 overflow-y-auto">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl mx-auto my-8 transform transition-all">
        <div class="p-4 sm:p-6">
            <div class="flex justify-between items-center mb-4 sm:mb-6">
                <h2 class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white">Create New Project</h2>
                <button onclick="hideCreateProjectModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <form id="createProjectForm" class="space-y-4 sm:space-y-6" novalidate>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
                    <!-- Project Title -->
                    <div class="col-span-2">
                        <label for="projectTitle" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">Project Title</label>
                        <input type="text" id="projectTitle" name="title" required
                            class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors"
                            placeholder="Enter project title">
                        <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="title"></div>
                    </div>

                    <!-- Project Type -->
                    <div>
                        <label for="projectType" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">Project Type</label>
                        <select id="projectType" name="type" required
                            class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors">
                            <option value="">Select type</option>
                            <option value="ongoing">Ongoing Project</option>
                            <option value="upcoming">Upcoming Project</option>
                        </select>
                        <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="type"></div>
                    </div>

                    <!-- Start Date (for upcoming projects) -->
                    <div id="startDateContainer" class="hidden">
                        <label for="startDate" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">Expected Start Date</label>
                        <input type="date" id="startDate" name="startDate"
                            class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors">
                        <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="startDate"></div>
                    </div>

                    <!-- Max Participants -->
                    <div>
                        <label for="maxParticipants" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">Maximum Participants</label>
                        <input type="number" id="maxParticipants" name="maxParticipants" min="1" required
                            class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors"
                            placeholder="Enter max participants">
                        <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="maxParticipants"></div>
                    </div>

                    <!-- GitHub Link -->
                    <div id="githubLinkContainer" class="col-span-2">
                        <label for="githubLink" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">GitHub Repository Link</label>
                        <input type="url" id="githubLink" name="githubLink"
                            class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors"
                            placeholder="https://github.com/username/repo">
                        <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="githubLink"></div>
                    </div>

                    <!-- Tech Stack -->
                    <div class="col-span-2">
                        <label for="techStack" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">Tech Stack</label>
                        <input type="text" id="techStack" name="techStack" required
                            class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors"
                            placeholder="e.g., React, Node.js, MongoDB">
                        <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="techStack"></div>
                    </div>

                    <!-- Description -->
                    <div class="col-span-2">
                        <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">Project Description</label>
                        <textarea id="description" name="description" rows="4" required
                            class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors resize-none"
                            placeholder="Describe your project..."></textarea>
                        <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="description"></div>
                    </div>
                </div>

                <div id="formErrorMessage" class="text-red-500 text-sm hidden"></div>

                <div class="flex flex-col sm:flex-row sm:justify-end sm:space-x-4 space-y-2 sm:space-y-0 mt-4 sm:mt-6">
                    <button type="button" onclick="hideCreateProjectModal()"
                        class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                        Cancel
                    </button>
                    <button type="submit"
                        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-colors">
                        Create Project
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Participants Modal -->
<div id="participantsModal" class="fixed inset-0 bg-black bg-opacity-60 hidden items-center justify-center z-50 overflow-y-auto">
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-md mx-auto my-8 transform transition-all duration-300 overflow-hidden">
        <div class="relative">
            <!-- Header with gradient background -->
            <div class="bg-gradient-to-r from-blue-600 to-blue-700 p-6">
                <div class="flex justify-between items-center">
                    <h2 class="text-2xl font-bold text-white">Project Participants</h2>
                    <button onclick="hideParticipantsModal()" class="text-white hover:text-gray-200 transition-colors">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>
            
            <!-- Content with scrollable area -->
            <div class="p-6 max-h-[60vh] overflow-y-auto custom-scrollbar">
                <div id="participantsList" class="space-y-4">
                    <!-- Participants will be loaded here -->
                    <div class="animate-pulse flex items-center p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                        <div class="rounded-full bg-gray-200 dark:bg-gray-600 h-10 w-10 mr-3"></div>
                        <div class="flex-1">
                            <div class="h-4 bg-gray-200 dark:bg-gray-600 rounded w-1/2 mb-2"></div>
                            <div class="h-3 bg-gray-200 dark:bg-gray-600 rounded w-1/3"></div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Footer with action button -->
            <div class="p-4 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800">
                <button onclick="hideParticipantsModal()" 
                        class="w-full px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-300">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Join Request Modal -->
<div id="join-request-modal" class="fixed inset-0 bg-black bg-opacity-60 hidden items-center justify-center z-50 overflow-y-auto">
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-md mx-auto my-8 transform transition-all duration-300 overflow-hidden">
        <div class="relative">
            <!-- Header with gradient background -->
            <div class="bg-gradient-to-r from-blue-600 to-blue-700 p-6">
                <div class="flex justify-between items-center">
                    <h2 class="text-2xl font-bold text-white">Join Project</h2>
                    <button onclick="closeJoinRequestModal()" class="text-white hover:text-gray-200 transition-colors">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <p class="text-blue-100 mt-2">Send a request to join this exciting project!</p>
            </div>
            
            <!-- Content -->
            <div class="p-6">
                <div class="mb-5">
                    <label for="join-message" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Why do you want to join this project?
                    </label>
                    <textarea id="join-message" 
                              class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white transition-colors resize-none"
                              rows="4" 
                              placeholder="Share your experience, skills, and why you're interested in this project..."></textarea>
                    <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Your message will be sent to the project admin</p>
                </div>
                
                <!-- Footer with action buttons -->
                <div class="flex space-x-3 pt-4">
                    <button onclick="closeJoinRequestModal()" 
                            class="flex-1 px-4 py-3 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-300">
                        Cancel
                    </button>
                    <button onclick="submitJoinRequest()" 
                            class="flex-1 px-4 py-3 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-colors duration-300">
                        Send Request
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Add animation classes */
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .animate-fadeIn {
        animation: fadeIn 0.3s ease-out forwards;
    }
    
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    .animate-slideInRight {
        animation: slideInRight 0.3s ease-out forwards;
    }
    
    /* Custom scrollbar for modals and project description */
    .custom-scrollbar::-webkit-scrollbar {
        width: 8px;
    }
    
    .custom-scrollbar::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }
    
    .custom-scrollbar::-webkit-scrollbar-thumb {
        background: linear-gradient(to bottom, #3b82f6, #8b5cf6);
        border-radius: 10px;
    }
    
    .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(to bottom, #2563eb, #7c3aed);
    }
    
    @media (prefers-color-scheme: dark) {
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #374151;
        }
    }

    /* Project card styling with hover effects */
    .project-card {
        position: relative;
        transition: all 0.3s cubic-bezier(0.22, 1, 0.36, 1);
        border: 1px solid transparent;
        overflow: hidden;
    }

    .project-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        border-color: rgba(59, 130, 246, 0.1);
    }

    /* Gradient elements */
    .gradient-border-top {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(to right, #3b82f6, #8b5cf6);
        z-index: 1;
    }

    .gradient-bg {
        background-image: linear-gradient(to right, #3b82f6, #8b5cf6);
    }

    .gradient-text {
        background: linear-gradient(to right, #3b82f6, #8b5cf6);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
    }

    /* Button styling */
    .gradient-btn {
        background-image: linear-gradient(to right, #3b82f6, #8b5cf6);
        transition: all 0.3s ease;
        background-size: 200% auto;
    }

    .gradient-btn:hover {
        background-position: right center;
        box-shadow: 0 10px 15px -3px rgba(59, 130, 246, 0.3), 0 4px 6px -2px rgba(59, 130, 246, 0.2);
        transform: none; /* Remove position change on hover */
    }

    /* Modal enhancements */
    .modal-gradient-header {
        background-image: linear-gradient(to right, #3b82f6, #8b5cf6);
        color: white;
    }

    /* Loading animation for project cards */
    @keyframes shimmer {
        0% {
            background-position: -1000px 0;
        }
        100% {
            background-position: 1000px 0;
        }
    }

    .shimmer {
        animation: shimmer 2s infinite linear;
        background: linear-gradient(to right, rgba(255,255,255,0) 0%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0) 100%);
        background-size: 1000px 100%;
    }

    /* Progress bar styling */
    .progress-bar-bg {
        background-color: #f3f4f6;
        border-radius: 9999px;
        height: 0.5rem;
        overflow: hidden;
    }

    .progress-bar-fill {
        height: 100%;
        border-radius: 9999px;
        background-image: linear-gradient(to right, #3b82f6, #8b5cf6);
        transition: width 0.5s ease;
    }

    /* Custom toast notification */
    .custom-toast {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        background-image: linear-gradient(to right, #3b82f6, #8b5cf6);
        color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        z-index: 50;
        opacity: 0;
        transform: translateY(1rem);
        transition: all 0.3s ease;
    }

    .custom-toast.show {
        opacity: 1;
        transform: translateY(0);
    }

    /* Add to existing styles */
    .bg-pattern {
        background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.2'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    }
    
    /* Fix for the create project modal form */
    #createProjectModal .modal-gradient-header + form input,
    #createProjectModal .modal-gradient-header + form select,
    #createProjectModal .modal-gradient-header + form textarea {
        background-color: white;
        color: #334155;
        border: 1px solid #e2e8f0;
    }
    
    #createProjectModal .modal-gradient-header + form input:focus,
    #createProjectModal .modal-gradient-header + form select:focus,
    #createProjectModal .modal-gradient-header + form textarea:focus {
        border-color: #3b82f6;
        box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
    }
    
    #createProjectModal .modal-gradient-header + form label {
        color: #334155;
    }
    
    /* Dark mode styles */
    @media (prefers-color-scheme: dark) {
        #createProjectModal .modal-gradient-header + form input,
        #createProjectModal .modal-gradient-header + form select,
        #createProjectModal .modal-gradient-header + form textarea {
            background-color: #1e293b;
            color: #f1f5f9;
            border: 1px solid #334155;
        }
        
        #createProjectModal .modal-gradient-header + form label {
            color: #f1f5f9;
        }
    }
    
    /* Add padding for forms on mobile */
    @media (max-width: 640px) {
        #createProjectModal .p-4 {
            padding: 1.5rem;
        }
        
        #createProjectModal .space-y-4 {
            margin-top: 1rem;
        }
        
        #createProjectModal input,
        #createProjectModal select,
        #createProjectModal textarea {
            margin-bottom: 0.5rem;
        }
    }
</style>

<script>
    // Tab switching functionality with animation and proper active classes
    function switchTab(tab) {
        const ongoingTab = document.querySelector('.tab-button:first-child');
        const upcomingTab = document.querySelector('.tab-button:last-child');
        const ongoingProjects = document.getElementById('ongoing-projects');
        const upcomingProjects = document.getElementById('upcoming-projects');
        
        // Remove active class from all tabs
        document.querySelectorAll('.tab-button').forEach(btn => {
            btn.classList.remove('active');
            btn.classList.remove('border-blue-500');
            btn.classList.add('border-transparent');
        });
        
        if (tab === 'ongoing') {
            ongoingTab.classList.add('active');
            ongoingTab.classList.add('text-blue-600', 'dark:text-blue-400');
            ongoingTab.classList.remove('text-gray-500', 'dark:text-gray-400');
            ongoingProjects.classList.remove('hidden');
            upcomingProjects.classList.add('hidden');
        } else {
            upcomingTab.classList.add('active');
            upcomingTab.classList.add('text-blue-600', 'dark:text-blue-400');
            upcomingTab.classList.remove('text-gray-500', 'dark:text-gray-400');
            upcomingProjects.classList.remove('hidden');
            ongoingProjects.classList.add('hidden');
        }
    }

    // Apply styling when the DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        // Set the Projects Hub title to white
        const projectsTitle = document.querySelector('.container h1');
        if (projectsTitle) {
            projectsTitle.classList.add('projects-title');
            projectsTitle.classList.remove('gradient-text');
        }
        
        // Ensure the Create New Project button has proper text color
        const createButton = document.querySelector('button.bg-white');
        if (createButton) {
            createButton.style.color = '#3b82f6';
        }
        
        // Add active class to the default tab (Ongoing Projects)
        const defaultTab = document.querySelector('.tab-button:first-child');
        if (defaultTab) {
            defaultTab.classList.add('active');
        }
        
        // Add gradient-btn class to the participants modal close button
        const participantsCloseBtn = document.querySelector('#participantsModal .p-4.border-t button');
        if (participantsCloseBtn) {
            participantsCloseBtn.className = 'w-full px-4 py-2 text-sm font-medium text-white gradient-btn rounded-lg hover:shadow-lg transition-all duration-300';
        }
        
        // Add gradient-btn class to the join request modal submit button
        const joinRequestBtn = document.querySelector('#join-request-modal button[onclick="submitJoinRequest()"]');
        if (joinRequestBtn) {
            joinRequestBtn.className = 'flex-1 px-4 py-3 text-sm font-medium text-white gradient-btn rounded-lg hover:shadow-lg transition-all duration-300';
        }
        
        // Apply to create project modal button
        const createProjectSubmitBtn = document.querySelector('#createProjectForm button[type="submit"]');
        if (createProjectSubmitBtn) {
            createProjectSubmitBtn.className = 'px-4 py-2 gradient-btn text-white rounded-lg hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-all duration-300';
        }
        
        // Load projects
        loadProjects();
    });

    // Project creation modal functionality with animations
    function showCreateProjectModal() {
        const modal = document.getElementById('createProjectModal');
        if (modal) {
            modal.classList.remove('hidden');
            modal.classList.add('flex');
        }
    }

    function hideCreateProjectModal() {
        const modal = document.getElementById('createProjectModal');
        if (modal) {
            modal.classList.add('hidden');
            modal.classList.remove('flex');
        }
    }

    // Update the project type change handler
    document.getElementById('projectType').addEventListener('change', function() {
        const startDateContainer = document.getElementById('startDateContainer');
        const startDateInput = document.getElementById('startDate');

        if (this.value === 'upcoming') {
            if (startDateContainer) startDateContainer.classList.remove('hidden');
            if (startDateInput) startDateInput.required = true;
        } else {
            if (startDateContainer) startDateContainer.classList.add('hidden');
            if (startDateInput) startDateInput.required = false;
        }
    });

    // Form validation and submission
    document.getElementById('createProjectForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Clear previous errors
        const errorMessages = document.querySelectorAll('.error-message');
        errorMessages.forEach(el => {
            if (el) {
                el.classList.add('hidden');
                el.textContent = '';
            }
        });

        const formErrorMessage = document.getElementById('formErrorMessage');
        if (formErrorMessage) {
            formErrorMessage.classList.add('hidden');
        }
        
        // Get form data
        const formData = new FormData(this);
        const projectData = {
            title: formData.get('title'),
            type: formData.get('type'),
            maxParticipants: parseInt(formData.get('maxParticipants')),
            description: formData.get('description'),
            techStack: formData.get('techStack').split(',').map(tech => tech.trim()).filter(tech => tech.length > 0),
            githubLink: formData.get('githubLink') || ''
        };

        // Add start date for upcoming projects
        if (projectData.type === 'upcoming') {
            const startDate = formData.get('startDate');
            if (!startDate) {
                const errorEl = document.querySelector('.error-message[data-for="startDate"]');
                if (errorEl) {
                    errorEl.textContent = 'Start date is required for upcoming projects';
                    errorEl.classList.remove('hidden');
                }
                return;
            }
            projectData.startDate = startDate;
        } else {
            projectData.startDate = new Date().toISOString(); // Set current date for ongoing projects
        }

        // Validate required fields
        let hasErrors = false;
        const requiredFields = ['title', 'type', 'description', 'techStack', 'maxParticipants'];
        
        requiredFields.forEach(field => {
            if (!projectData[field] || (Array.isArray(projectData[field]) && projectData[field].length === 0)) {
                const errorEl = document.querySelector(`.error-message[data-for="${field}"]`);
                if (errorEl) {
                    errorEl.textContent = `${field.charAt(0).toUpperCase() + field.slice(1)} is required`;
                    errorEl.classList.remove('hidden');
                }
                hasErrors = true;
            }
        });

        if (hasErrors) {
            return;
        }

        try {
            const response = await fetch('/api/projects', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify(projectData)
            });

            const responseData = await response.json();

            if (!response.ok) {
                if (response.status === 401) {
                    window.location.href = '/login';
                    return;
                }
                
                // Handle validation errors
                if (response.status === 400) {
                    if (responseData.details) {
                        Object.entries(responseData.details).forEach(([field, error]) => {
                            const errorEl = document.querySelector(`.error-message[data-for="${field}"]`);
                            if (errorEl) {
                                errorEl.textContent = error.message || `${field} is invalid`;
                                errorEl.classList.remove('hidden');
                            }
                        });
                    } else if (formErrorMessage) {
                        formErrorMessage.textContent = responseData.message;
                        formErrorMessage.classList.remove('hidden');
                    }
                    return;
                }

                throw new Error(responseData.message || 'Failed to create project');
            }

            showToast('Project created successfully!', 'success');
            hideCreateProjectModal();
            this.reset();
            loadProjects();
        } catch (error) {
            console.error('Error creating project:', error);
            if (formErrorMessage) {
                formErrorMessage.textContent = error.message || 'Failed to create project. Please try again.';
                formErrorMessage.classList.remove('hidden');
            }
        }
    });

    // Load projects when page loads
    document.addEventListener('DOMContentLoaded', () => {
        loadProjects();
    });

    // Function to load projects with authentication
    async function loadProjects() {
        const emptyState = document.getElementById('empty-state');
        const ongoingContainer = document.getElementById('ongoing-projects');
        const upcomingContainer = document.getElementById('upcoming-projects');
        
        ongoingContainer.innerHTML = '';
        upcomingContainer.innerHTML = '';
        
        try {
            const response = await fetch('/api/projects', {
                credentials: 'include' // Include credentials for authentication
            });
            
            if (!response.ok) {
                if (response.status === 401) {
                    // Handle unauthorized error
                    window.location.href = '/login';
                    return;
                }
                throw new Error('Failed to load projects');
            }
            
            const data = await response.json();
            renderProjects(data.projects);
        } catch (error) {
            console.error('Error loading projects:', error);
            showToast('Failed to load projects', 'error');
        }
    }

    // Function to render projects
    function renderProjects(projects) {
        const ongoingProjects = projects.filter(p => p.type === 'ongoing');
        const upcomingProjects = projects.filter(p => p.type === 'upcoming');
        
        const ongoingContainer = document.getElementById('ongoing-projects');
        const upcomingContainer = document.getElementById('upcoming-projects');
        
        // Render ongoing projects
        if (ongoingProjects.length === 0) {
            ongoingContainer.innerHTML = `
                <div class="text-center py-8">
                    <p class="text-gray-500 dark:text-gray-400">No ongoing projects yet</p>
                </div>
            `;
        } else {
            ongoingContainer.innerHTML = ongoingProjects.map(project => createProjectCard(project)).join('');
        }
        
        // Render upcoming projects
        if (upcomingProjects.length === 0) {
            upcomingContainer.innerHTML = `
                <div class="text-center py-8">
                    <p class="text-gray-500 dark:text-gray-400">No upcoming projects yet</p>
                </div>
            `;
        } else {
            upcomingContainer.innerHTML = upcomingProjects.map(project => createProjectCard(project)).join('');
        }
    }

    // Function to create project card
    function createProjectCard(project) {
        const isAdmin = project.admin._id === currentUserId;
        const isParticipant = project.participants.some(p => p._id === currentUserId);
        const hasPendingRequest = project.joinRequests.some(r => r.user._id === currentUserId && r.status === 'pending');
        
        // Format dates properly
        const projectDate = project.startDate ? new Date(project.startDate) : new Date();
        const formattedDate = projectDate.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        const dateLabel = project.type === 'ongoing' ? 'Posted on' : 'Expected to start on';
        
        // Calculate progress for ongoing projects (ratio of participants to max)
        const progressPercentage = Math.min(100, Math.round((project.participants.length / project.maxParticipants) * 100));
        
        return `
            <div class="project-card bg-white dark:bg-gray-800 rounded-xl shadow-lg h-full flex flex-col border border-gray-100 dark:border-gray-700">
                <div class="gradient-border-top"></div>
                <div class="p-6 flex flex-col flex-grow">
                    <!-- Header Section -->
                    <div class="flex justify-between items-start mb-4">
                        <div class="flex items-center space-x-3">
                            <div class="relative">
                                <div class="w-10 h-10 rounded-full overflow-hidden ring-2 ring-gray-200 dark:ring-gray-700">
                                    <img src="${project.admin.profileImage || '/placeholder/placeholder.webp'}" 
                                         alt="${project.admin.name}" 
                                         class="w-full h-full object-cover"
                                         onerror="this.src='/placeholder/placeholder.webp'">
                                </div>
                                ${isAdmin ? `<div class="absolute -bottom-1 -right-1 gradient-bg text-white text-xs rounded-full w-5 h-5 flex items-center justify-center shadow-lg">
                                    <i class="fas fa-crown text-[10px]"></i>
                                </div>` : ''}
                            </div>
                            <div>
                                <h3 class="text-xl font-semibold text-gray-900 dark:text-white">${project.title}</h3>
                                <p class="text-sm text-gray-500 dark:text-gray-400">by ${project.admin.name}</p>
                            </div>
                        </div>
                        <span class="px-3 py-1 text-sm font-medium rounded-full shadow-sm ${
                            project.type === 'ongoing' 
                                ? 'gradient-bg text-white' 
                                : 'gradient-bg text-white'
                        }">
                            ${project.type.charAt(0).toUpperCase() + project.type.slice(1)}
                        </span>
                    </div>
                    
                    <!-- Description Section -->
                    <div class="description-container h-24 overflow-y-auto mb-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg p-3 hover:shadow-sm transition-shadow">
                        <p class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed">${project.description}</p>
                    </div>
                    
                    <!-- Tech Stack Section -->
                    <div class="mb-4">
                        <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 flex items-center">
                            <i class="fas fa-laptop-code mr-2 text-blue-500"></i>
                            Tech Stack
                        </h4>
                        <div class="flex flex-wrap gap-2">
                            ${project.techStack.map(tech => `
                                <span class="px-2.5 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200 border border-gray-200 dark:border-gray-600 hover:bg-blue-50 hover:text-blue-600 dark:hover:bg-blue-900/20 dark:hover:text-blue-300 transition-all duration-200">
                                    ${tech}
                                </span>
                            `).join('')}
                        </div>
                    </div>
                    
                    <!-- Progress Bar -->
                    <div class="mb-4">
                        <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1">
                            <span>Team</span>
                            <span>${project.participants.length}/${project.maxParticipants} members</span>
                        </div>
                        <div class="progress-bar-bg">
                            <div class="progress-bar-fill" style="width: ${progressPercentage}%"></div>
                        </div>
                    </div>
                    
                    <!-- Project Details Section -->
                    <div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 mb-4 border-t border-gray-100 dark:border-gray-700 pt-4">
                        <div class="flex items-center">
                            <i class="far fa-calendar-alt mr-1 text-blue-500"></i>
                            <span>${dateLabel}: ${formattedDate}</span>
                        </div>
                        ${project.githubLink ? `
                            <a href="${project.githubLink}" target="_blank" class="inline-flex items-center text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 transition-colors">
                                <i class="fab fa-github mr-1"></i>
                                GitHub
                            </a>
                        ` : ''}
                    </div>
                    
                    <!-- Action Buttons Section -->
                    <div class="flex justify-between items-center mt-auto pt-4 border-t border-gray-100 dark:border-gray-700">
                        <button onclick="showParticipants('${project._id}')" 
                                class="text-sm text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200 flex items-center transition-colors">
                            <i class="fas fa-users mr-1"></i>
                            View Participants
                        </button>
                        ${isAdmin ? `
                            <div class="flex gap-3">
                                <button onclick="editProject('${project._id}')" 
                                        class="px-4 py-2 text-sm font-medium text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 bg-blue-50 hover:bg-blue-100 dark:bg-blue-900/20 dark:hover:bg-blue-900/30 rounded-lg transition-colors">
                                    <i class="fas fa-edit mr-1"></i> Edit
                                </button>
                                <button onclick="showDeleteConfirmation('${project._id}')" 
                                        class="px-4 py-2 text-sm font-medium text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 bg-red-50 hover:bg-red-100 dark:bg-red-900/20 dark:hover:bg-red-900/30 rounded-lg transition-colors">
                                    <i class="fas fa-trash-alt mr-1"></i> Delete
                                </button>
                            </div>
                        ` : isParticipant ? `
                            <span class="px-4 py-2 text-sm font-medium rounded-lg gradient-bg text-white shadow-sm">
                                <i class="fas fa-check mr-1"></i> Participating
                            </span>
                        ` : hasPendingRequest ? `
                            <span class="px-4 py-2 text-sm font-medium rounded-lg bg-yellow-400 text-white shadow-sm">
                                <i class="fas fa-clock mr-1"></i> Request Pending
                            </span>
                        ` : project.participants.length >= project.maxParticipants ? `
                            <span class="px-4 py-2 text-sm font-medium rounded-lg bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200">
                                <i class="fas fa-users-slash mr-1"></i> Project Full
                            </span>
                        ` : `
                            <button onclick="sendJoinRequest('${project._id}')" 
                                    class="px-4 py-2 text-sm font-medium text-white gradient-btn rounded-lg transition-colors shadow-sm hover:shadow-md">
                                <i class="fas fa-sign-in-alt mr-1"></i> Join Project
                            </button>
                        `}
                    </div>
                </div>
            </div>
        `;
    }

    // Add edit and delete project functions
    async function editProject(projectId) {
        try {
            const response = await fetch(`/api/projects/${projectId}`, {
                credentials: 'include'
            });
            
            if (!response.ok) {
                throw new Error('Failed to fetch project details');
            }
            
            const project = await response.json();
            showEditProjectModal(project);
        } catch (error) {
            console.error('Error fetching project:', error);
            showToast('Failed to fetch project details', 'error');
        }
    }

    async function deleteProject(projectId) {
        try {
            const response = await fetch(`/api/projects/${projectId}`, {
                method: 'DELETE',
                credentials: 'include'
            });
            
            if (!response.ok) {
                throw new Error('Failed to delete project');
            }
            
            hideConfirmationDialog();
            showToast('Project deleted successfully!', 'success');
            loadProjects();
        } catch (error) {
            console.error('Error deleting project:', error);
            hideConfirmationDialog();
            showToast('Failed to delete project', 'error');
        }
    }

    // Custom confirmation dialog
    function showDeleteConfirmation(projectId) {
        const dialog = document.createElement('div');
        dialog.id = 'confirmationDialog';
        dialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
        dialog.innerHTML = `
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 max-w-md mx-auto">
                <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Confirm Delete</h3>
                <p class="text-gray-600 dark:text-gray-300 mb-6">Are you sure you want to delete this project? This action cannot be undone.</p>
                <div class="flex justify-end space-x-4">
                    <button onclick="hideConfirmationDialog()" class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                        Cancel
                    </button>
                    <button onclick="deleteProject('${projectId}')" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-colors">
                        Delete
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(dialog);
    }

    function hideConfirmationDialog() {
        const dialog = document.getElementById('confirmationDialog');
        if (dialog) {
            document.body.removeChild(dialog);
        }
    }

    // Edit Project Modal
    function showEditProjectModal(project) {
        // Create modal if it doesn't exist
        let modal = document.getElementById('editProjectModal');
        if (!modal) {
            modal = document.createElement('div');
            modal.id = 'editProjectModal';
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 overflow-y-auto';
            modal.innerHTML = `
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl mx-auto my-8 transform transition-all">
                    <div class="p-4 sm:p-6">
                        <div class="flex justify-between items-center mb-4 sm:mb-6">
                            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white">Edit Project</h2>
                            <button onclick="hideEditProjectModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                            </button>
                        </div>
                        
                        <form id="editProjectForm" class="space-y-4 sm:space-y-6" novalidate>
                            <input type="hidden" id="editProjectId" name="projectId">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
                                <!-- Project Title -->
                                <div class="col-span-2">
                                    <label for="editProjectTitle" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">Project Title</label>
                                    <input type="text" id="editProjectTitle" name="title" required
                                        class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors"
                                        placeholder="Enter project title">
                                    <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="title"></div>
                                </div>

                                <!-- Project Type -->
                                <div>
                                    <label for="editProjectType" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">Project Type</label>
                                    <select id="editProjectType" name="type" required
                                        class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors">
                                        <option value="ongoing">Ongoing Project</option>
                                        <option value="upcoming">Upcoming Project</option>
                                    </select>
                                    <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="type"></div>
                                </div>

                                <!-- Start Date (for upcoming projects) -->
                                <div id="editStartDateContainer">
                                    <label for="editStartDate" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">Expected Start Date</label>
                                    <input type="date" id="editStartDate" name="startDate"
                                        class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors">
                                    <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="startDate"></div>
                                </div>

                                <!-- Max Participants -->
                                <div>
                                    <label for="editMaxParticipants" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">Maximum Participants</label>
                                    <input type="number" id="editMaxParticipants" name="maxParticipants" min="1" required
                                        class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors"
                                        placeholder="Enter max participants">
                                    <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="maxParticipants"></div>
                                </div>

                                <!-- GitHub Link -->
                                <div id="editGithubLinkContainer" class="col-span-2">
                                    <label for="editGithubLink" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">GitHub Repository Link (Optional)</label>
                                    <input type="url" id="editGithubLink" name="githubLink"
                                        class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors"
                                        placeholder="https://github.com/username/repo">
                                    <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="githubLink"></div>
                                </div>

                                <!-- Tech Stack -->
                                <div class="col-span-2">
                                    <label for="editTechStack" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">Tech Stack</label>
                                    <input type="text" id="editTechStack" name="techStack" required
                                        class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors"
                                        placeholder="e.g., React, Node.js, MongoDB">
                                    <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="techStack"></div>
                                </div>

                                <!-- Description -->
                                <div class="col-span-2">
                                    <label for="editDescription" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-2">Project Description</label>
                                    <textarea id="editDescription" name="description" rows="4" required
                                        class="w-full px-3 py-2 sm:px-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent dark:bg-gray-700 dark:text-white transition-colors resize-none"
                                        placeholder="Describe your project..."></textarea>
                                    <div class="error-message text-red-500 text-sm mt-1 hidden" data-for="description"></div>
                                </div>
                            </div>

                            <div id="editFormErrorMessage" class="text-red-500 text-sm hidden"></div>

                            <div class="flex flex-col sm:flex-row sm:justify-end sm:space-x-4 space-y-2 sm:space-y-0 mt-4 sm:mt-6">
                                <button type="button" onclick="hideEditProjectModal()"
                                    class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                                    Cancel
                                </button>
                                <button type="submit"
                                    class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-colors">
                                    Save Changes
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            // Add event listener for type change
            document.getElementById('editProjectType').addEventListener('change', function() {
                const startDateContainer = document.getElementById('editStartDateContainer');
                if (this.value === 'upcoming') {
                    if (startDateContainer) startDateContainer.classList.remove('hidden');
                } else {
                    if (startDateContainer) startDateContainer.classList.add('hidden');
                }
            });
            
            // Add form submission handler
            document.getElementById('editProjectForm').addEventListener('submit', handleEditFormSubmit);
        }
        
        // Fill form with project data
        document.getElementById('editProjectId').value = project._id;
        document.getElementById('editProjectTitle').value = project.title;
        document.getElementById('editProjectType').value = project.type;
        document.getElementById('editMaxParticipants').value = project.maxParticipants;
        document.getElementById('editGithubLink').value = project.githubLink || '';
        document.getElementById('editTechStack').value = Array.isArray(project.techStack) ? project.techStack.join(', ') : project.techStack;
        document.getElementById('editDescription').value = project.description;
        
        if (project.startDate) {
            const date = new Date(project.startDate);
            const formattedDate = date.toISOString().split('T')[0];
            document.getElementById('editStartDate').value = formattedDate;
        }
        
        // Show/hide start date based on project type
        const startDateContainer = document.getElementById('editStartDateContainer');
        if (project.type === 'upcoming') {
            if (startDateContainer) startDateContainer.classList.remove('hidden');
        } else {
            if (startDateContainer) startDateContainer.classList.add('hidden');
        }
        
        // Show modal
        modal.classList.remove('hidden');
        modal.classList.add('flex');
    }

    function hideEditProjectModal() {
        const modal = document.getElementById('editProjectModal');
        if (modal) {
            modal.classList.add('hidden');
            modal.classList.remove('flex');
        }
    }

    async function handleEditFormSubmit(e) {
        e.preventDefault();
        
        // Clear previous errors
        const errorMessages = document.querySelectorAll('#editProjectForm .error-message');
        errorMessages.forEach(el => {
            if (el) {
                el.classList.add('hidden');
                el.textContent = '';
            }
        });

        const formErrorMessage = document.getElementById('editFormErrorMessage');
        if (formErrorMessage) {
            formErrorMessage.classList.add('hidden');
        }
        
        // Get form data
        const formData = new FormData(this);
        const projectId = formData.get('projectId');
        const projectData = {
            title: formData.get('title'),
            type: formData.get('type'),
            maxParticipants: parseInt(formData.get('maxParticipants')),
            description: formData.get('description'),
            techStack: formData.get('techStack').split(',').map(tech => tech.trim()).filter(tech => tech.length > 0),
            githubLink: formData.get('githubLink') || ''
        };

        // Add start date for upcoming projects
        if (projectData.type === 'upcoming') {
            const startDate = formData.get('startDate');
            if (!startDate) {
                const errorEl = document.querySelector('#editProjectForm .error-message[data-for="startDate"]');
                if (errorEl) {
                    errorEl.textContent = 'Start date is required for upcoming projects';
                    errorEl.classList.remove('hidden');
                }
                return;
            }
            projectData.startDate = startDate;
        }

        // Validate required fields
        let hasErrors = false;
        const requiredFields = ['title', 'type', 'description', 'techStack', 'maxParticipants'];
        
        requiredFields.forEach(field => {
            if (!projectData[field] || (Array.isArray(projectData[field]) && projectData[field].length === 0)) {
                const errorEl = document.querySelector(`#editProjectForm .error-message[data-for="${field}"]`);
                if (errorEl) {
                    errorEl.textContent = `${field.charAt(0).toUpperCase() + field.slice(1)} is required`;
                    errorEl.classList.remove('hidden');
                }
                hasErrors = true;
            }
        });

        if (hasErrors) {
            return;
        }

        try {
            const response = await fetch(`/api/projects/${projectId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify(projectData)
            });

            const responseData = await response.json();

            if (!response.ok) {
                if (response.status === 401) {
                    window.location.href = '/login';
                    return;
                }
                
                throw new Error(responseData.message || 'Failed to update project');
            }

            showToast('Project updated successfully!', 'success');
            hideEditProjectModal();
            loadProjects();
        } catch (error) {
            console.error('Error updating project:', error);
            if (formErrorMessage) {
                formErrorMessage.textContent = error.message || 'Failed to update project. Please try again.';
                formErrorMessage.classList.remove('hidden');
            }
        }
    }

    // Add CSS for custom scrollbar and other UI improvements
    const style = document.createElement('style');
    style.textContent = `
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .description-container::-webkit-scrollbar {
            width: 4px;
        }
        
        .description-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        
        .description-container::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }
        
        .description-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        
        @media (prefers-color-scheme: dark) {
            .description-container::-webkit-scrollbar-track {
                background: #2d3748;
            }
            
            .description-container::-webkit-scrollbar-thumb {
                background: #4a5568;
            }
            
            .description-container::-webkit-scrollbar-thumb:hover {
                background: #718096;
            }
        }
    `;
    document.head.appendChild(style);

    // Toast notification function
    function showToast(message, type = 'success') {
        // Remove existing toasts
        const existingToasts = document.querySelectorAll('.custom-toast');
        existingToasts.forEach(toast => {
            document.body.removeChild(toast);
        });
        
        const toast = document.createElement('div');
        toast.className = 'custom-toast flex items-center';
        
        // Add icon based on type
        const icon = type === 'success' 
            ? '<i class="fas fa-check-circle mr-2"></i>' 
            : '<i class="fas fa-exclamation-circle mr-2"></i>';
        
        toast.innerHTML = `${icon}${message}`;
        
        document.body.appendChild(toast);
        
        // Trigger animation
        setTimeout(() => {
            toast.classList.add('show');
        }, 10);
        
        // Remove toast after 3 seconds
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => {
                document.body.removeChild(toast);
            }, 300);
        }, 3000);
    }

    // Add functions for participants modal
    function showParticipants(projectId) {
        currentProjectId = projectId;
        const modal = document.getElementById('participantsModal');
        const participantsList = document.getElementById('participantsList');
        
        // Show loading state
        participantsList.innerHTML = `
            <div class="animate-pulse flex items-center p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                <div class="rounded-full bg-gray-200 dark:bg-gray-600 h-10 w-10 mr-3"></div>
                <div class="flex-1">
                    <div class="h-4 bg-gray-200 dark:bg-gray-600 rounded w-1/2 mb-2"></div>
                    <div class="h-3 bg-gray-200 dark:bg-gray-600 rounded w-1/3"></div>
                </div>
            </div>
        `;
        
        // Show modal
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        
        // Fetch project details
        fetch(`/api/projects/${projectId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch project details');
                }
                return response.json();
            })
            .then(project => {
                // First add the admin with special styling
                let participantsHtml = `
                    <div class="flex items-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-100 dark:border-blue-800">
                        <img src="${project.admin.profileImage || '/images/placeholder.webp'}" 
                             alt="${project.admin.name}" 
                             class="w-12 h-12 rounded-full object-cover border-2 border-blue-300 dark:border-blue-700 mr-4"
                             onerror="this.src='/images/placeholder.webp'">
                        <div class="flex-1">
                            <div class="flex items-center">
                                <h3 class="font-semibold text-gray-900 dark:text-white">${project.admin.name}</h3>
                                <span class="ml-2 px-2 py-0.5 text-xs font-medium rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                                    Admin
                                </span>
                            </div>
                            <p class="text-sm text-gray-500 dark:text-gray-400">${project.admin.email || ''}</p>
                        </div>
                    </div>
                `;
                
                // Now add other participants
                if (project.participants.length > 1) {
                    participantsHtml += `<h4 class="text-sm font-medium text-gray-500 dark:text-gray-400 mt-4 mb-2">Other Participants</h4>`;
                    
                    participantsHtml += project.participants
                        .filter(p => p._id !== project.admin._id)
                        .map(p => `
                            <div class="flex items-center p-4 bg-gray-50 dark:bg-gray-700/30 rounded-lg">
                                <img src="${p.profileImage || '/images/placeholder.webp'}" 
                                     alt="${p.name}" 
                                     class="w-10 h-10 rounded-full object-cover border border-gray-200 dark:border-gray-700 mr-3"
                                     onerror="this.src='/images/placeholder.webp'">
                                <div>
                                    <h3 class="font-medium text-gray-900 dark:text-white">${p.name}</h3>
                                    <p class="text-sm text-gray-500 dark:text-gray-400">${p.email || ''}</p>
                                </div>
                            </div>
                        `).join('');
                } else {
                    participantsHtml += `
                        <div class="text-center p-4 mt-4 bg-gray-50 dark:bg-gray-700/20 rounded-lg">
                            <p class="text-gray-500 dark:text-gray-400">No other participants yet</p>
                        </div>
                    `;
                }
                
                // If there are pending join requests and user is admin, show them
                if (project.admin._id === currentUserId && project.joinRequests && project.joinRequests.length > 0) {
                    const pendingRequests = project.joinRequests.filter(r => r.status === 'pending');
                    
                    if (pendingRequests.length > 0) {
                        participantsHtml += `
                            <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400 mt-6 mb-2">
                                Pending Join Requests (${pendingRequests.length})
                            </h4>
                        `;
                        
                        participantsHtml += pendingRequests.map(request => `
                            <div class="p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-100 dark:border-yellow-800">
                                <div class="flex items-center mb-2">
                                    <img src="${request.user.profileImage || '/images/placeholder.webp'}" 
                                         alt="${request.user.name}" 
                                         class="w-10 h-10 rounded-full object-cover border border-gray-200 dark:border-gray-700 mr-3"
                                         onerror="this.src='/images/placeholder.webp'">
                                    <div>
                                        <h3 class="font-medium text-gray-900 dark:text-white">${request.user.name}</h3>
                                        <p class="text-sm text-gray-500 dark:text-gray-400">${request.user.email || ''}</p>
                                    </div>
                                </div>
                                ${request.message ? `
                                    <div class="mt-2 mb-3 p-2 bg-gray-50 dark:bg-gray-700/30 rounded text-sm text-gray-600 dark:text-gray-300">
                                        "${request.message}"
                                    </div>
                                ` : ''}
                                <div class="flex space-x-2 mt-2">
                                    <button onclick="handleJoinRequest('${project._id}', '${request._id}', 'accepted')" 
                                            class="flex-1 px-3 py-1.5 text-xs font-medium text-white bg-green-600 rounded hover:bg-green-700 transition-colors">
                                        Accept
                                    </button>
                                    <button onclick="handleJoinRequest('${project._id}', '${request._id}', 'rejected')" 
                                            class="flex-1 px-3 py-1.5 text-xs font-medium text-white bg-red-600 rounded hover:bg-red-700 transition-colors">
                                        Reject
                                    </button>
                                </div>
                            </div>
                        `).join('');
                    }
                }
                
                participantsList.innerHTML = participantsHtml;
            })
            .catch(error => {
                console.error('Error fetching project details:', error);
                participantsList.innerHTML = `
                    <div class="p-4 bg-red-50 dark:bg-red-900/20 rounded-lg text-red-600 dark:text-red-400 text-center">
                        <svg class="w-8 h-8 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <p>Error loading participants</p>
                    </div>
                `;
            });
    }

    // Add function to handle join requests
    function handleJoinRequest(projectId, requestId, status) {
        const button = event.target;
        const buttonText = button.textContent.trim();
        
        // Disable button and show loading state
        button.disabled = true;
        button.innerHTML = `
            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            ${status === 'accepted' ? 'Accepting...' : 'Rejecting...'}
        `;
        
        fetch(`/api/projects/${projectId}/join-request/${requestId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ status }),
            credentials: 'include'
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(errorData => {
                    throw new Error(errorData.message || `Failed to ${status} join request`);
                });
            }
            return response.json();
        })
        .then(data => {
            showToast(data.message || `Join request ${status} successfully`, 'success');
            // Refresh participants modal
            showParticipants(projectId);
            // Refresh projects to update UI
            loadProjects();
        })
        .catch(error => {
            console.error(`Error ${status} join request:`, error);
            // Reset button state
            button.disabled = false;
            button.textContent = status === 'accepted' ? 'Accept' : 'Reject';
            showToast(error.message || `Failed to ${status} join request`, 'error');
        });
    }

    // Close participants modal
    function hideParticipantsModal() {
        const modal = document.getElementById('participantsModal');
        if (modal) {
            modal.classList.add('hidden');
            modal.classList.remove('flex');
        }
    }
    
    // Close join request modal
    function closeJoinRequestModal() {
        const modal = document.getElementById('join-request-modal');
        if (modal) {
            modal.classList.add('hidden');
            modal.classList.remove('flex');
        }
    }
    
    // Open join request modal
    function sendJoinRequest(projectId) {
        if (!projectId) {
            showToast('Invalid project selected', 'error');
            return;
        }
        currentProjectId = projectId;
        const modal = document.getElementById('join-request-modal');
        if (modal) {
            // Reset form
            document.getElementById('join-message').value = '';
            
            // Show modal
            modal.classList.remove('hidden');
            modal.classList.add('flex');
        }
    }

    // Close modals when clicking outside
    window.onclick = function(event) {
        const participantsModal = document.getElementById('participantsModal');
        const joinRequestModal = document.getElementById('join-request-modal');
        
        if (event.target === participantsModal) {
            closeParticipantsModal();
        }
        if (event.target === joinRequestModal) {
            closeJoinRequestModal();
        }
    }

    // Add function to submit a join request
    function submitJoinRequest() {
        if (!currentProjectId) {
            showToast('Invalid project selected', 'error');
            return;
        }

        const message = document.getElementById('join-message').value.trim();
        if (!message) {
            showToast('Please enter a message explaining why you want to join', 'error');
            return;
        }

        const button = document.querySelector('#join-request-modal button[onclick="submitJoinRequest()"]');
        const buttonText = button.textContent.trim();
        
        // Disable button and show loading state
        button.disabled = true;
        button.innerHTML = `
            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Sending...
        `;
        
        fetch(`/api/projects/${currentProjectId}/join-request`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ message }),
            credentials: 'include'
        })
        .then(async response => {
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.message || 'Failed to send join request');
            }
            return data;
        })
        .then(data => {
            // Reset button state
            button.disabled = false;
            button.textContent = buttonText;
            
            // Show success message and close modal
            showToast(data.message || 'Join request sent successfully', 'success');
            closeJoinRequestModal();
            
            // Refresh projects to update UI
            loadProjects();
        })
        .catch(error => {
            console.error('Error sending join request:', error);
            
            // Reset button state
            button.disabled = false;
            button.textContent = buttonText;
            
            // Show error message
            showToast(error.message || 'Failed to send join request. Please try again.', 'error');
        });
    }

    // Add custom enhancements when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        // Original code from before
        loadProjects();
        
        // Remove gradient-text class from the title and ensure it's white
        const header = document.querySelector('.container h1');
        if (header) {
            header.classList.remove('gradient-text');
            header.classList.add('projects-title');
        }
        
        // ... rest of the existing DOMContentLoaded code ...
        
        // Enhanced create project modal
        enhanceModal('createProjectModal', (modal) => {
            const header = modal.querySelector('.flex.justify-between.items-center').parentNode;
            header.classList.add('modal-gradient-header', 'rounded-t-lg', 'p-6');
            
            const title = modal.querySelector('h2');
            title.classList.add('text-white', 'flex', 'items-center');
            title.innerHTML = '<i class="fas fa-plus-circle mr-3"></i>' + title.textContent;
            
            const createButton = modal.querySelector('button[type="submit"]');
            createButton.classList.add('gradient-btn');
            createButton.classList.add('text-white');
            
            // Update form container padding for mobile
            const formContainer = modal.querySelector('.p-4.sm\\:p-6');
            if (formContainer) {
                formContainer.classList.add('px-5', 'sm:px-6');
            }
            
            // Make form labels more visible
            const labels = modal.querySelectorAll('label');
            labels.forEach(label => {
                label.classList.add('text-gray-700', 'dark:text-gray-300');
            });
            
            // Style form inputs for better visibility
            const inputs = modal.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                input.classList.add('shadow-sm');
                input.classList.remove('dark:bg-gray-700');
                input.classList.add('dark:bg-gray-800');
            });
        });
    });
</script>

<%- include('partials/footer') %> 