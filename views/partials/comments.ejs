<!-- Instagram-style comments section -->
<div class="mt-3 border-t border-gray-100 dark:border-gray-800 pt-3">
    <!-- Comments Section with toggle -->
    <div class="comments-section">
        <!-- View all comments button -->
        <% if (post.comments && post.comments.length > 0) { %>
        <button 
            onclick="toggleComments('<%= post._id %>')" 
            class="text-gray-500 dark:text-gray-400 text-sm mb-2 flex items-center hover:text-gray-700 dark:hover:text-gray-300 transition-colors"
            aria-expanded="false"
            aria-controls="comments-container-<%= post._id %>"
        >
            <span id="comments-toggle-text-<%= post._id %>">View <%= post.comments.length %> <%= post.comments.length === 1 ? 'comment' : 'comments' %></span>
            <i class="fas fa-chevron-down ml-1 text-xs transition-transform duration-200" id="comments-toggle-icon-<%= post._id %>"></i>
        </button>
        
        <!-- Collapsible comments container with animation classes -->
        <div class="space-y-2.5 max-h-96 overflow-y-auto hidden opacity-0 transition-all duration-300 ease-in-out" 
             id="comments-container-<%= post._id %>">
        <% } else { %>
        <div class="hidden" id="comments-container-<%= post._id %>">
        <% } %>
            <% if (post.comments && post.comments.length > 0) { %>
                <% post.comments.forEach((comment, commentIndex) => { %>
                    <div class="flex space-x-2.5 comment-item group">
                        <% if (comment.user) { %>
                        <a href="/profile/<%= comment.user.username || comment.user._id %>" class="flex-shrink-0">
                            <img src="<%= comment.user.profileImage %>" 
                                 alt="<%= comment.user.name %>" 
                                 class="w-8 h-8 rounded-full flex-shrink-0 object-cover">
                        </a>
                        <div class="flex-1 rounded-xl py-1.5 px-3">
                            <div class="flex flex-wrap items-start">
                                <a href="/profile/<%= comment.user.username || comment.user._id %>" class="font-medium text-sm text-gray-800 dark:text-white mr-1.5 hover:underline"><%= comment.user.name %></a>
                                <p class="text-gray-700 dark:text-gray-300 text-sm break-words inline"><%= comment.content %></p>
                            </div>
                        <% } else { %>
                        <div class="w-8 h-8 rounded-full flex-shrink-0 bg-gray-300 flex items-center justify-center">
                            <i class="fas fa-user text-gray-500"></i>
                        </div>
                        <div class="flex-1 rounded-xl py-1.5 px-3">
                            <div class="flex flex-wrap items-start">
                                <span class="font-medium text-sm text-gray-800 dark:text-white mr-1.5">Deleted User</span>
                                <p class="text-gray-700 dark:text-gray-300 text-sm break-words inline"><%= comment.content %></p>
                            </div>
                        <% } %>
                            
                            <!-- Comment metadata and actions -->
                            <div class="mt-1 flex items-center text-xs space-x-4 text-gray-500 dark:text-gray-400">
                                <span class="text-xs"><%= new Date(comment.createdAt).toLocaleDateString(undefined, {month: 'short', day: 'numeric'}) %></span>
                                
                                <button onclick="likeComment('<%= comment._id %>', this)" 
                                        class="comment-like-btn <%= comment.likes && comment.likes.includes(user._id) ? 'text-red-500' : 'text-gray-500' %> hover:text-red-500 transition-colors duration-200">
                                    <i class="fas fa-heart text-xs"></i>
                                    <% if (comment.likes && comment.likes.length > 0) { %>
                                    <span class="like-count ml-1"><%= comment.likes.length %></span>
                                    <% } %>
                                </button>
                                
                                <button onclick="toggleReplyForm('<%= post._id %>', '<%= comment._id %>')" 
                                        class="text-gray-500 hover:text-blue-500 transition-colors duration-200">
                                    Reply
                                </button>
                                
                                <% if (comment.user && user && comment.user._id.toString() === user._id.toString()) { %>
                                <button onclick="deleteComment('<%= comment._id %>', this)" 
                                        class="text-gray-500 hover:text-red-500 transition-colors duration-200 opacity-0 group-hover:opacity-100">
                                    <i class="fas fa-trash text-xs"></i>
                                </button>
                                <% } %>
                            </div>
                            
                            <!-- Hidden reply form, shown when reply button is clicked -->
                            <div id="reply-form-<%= comment._id %>" class="hidden mt-2">
                                <form class="flex items-center" onsubmit="addReply(event, '<%= comment._id %>')">
                                    <input type="text" 
                                           placeholder="Add a reply..." 
                                           class="flex-1 py-1.5 px-3 text-xs border border-gray-200 dark:border-gray-700 rounded-full focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-800 text-gray-800 dark:text-white"
                                           required>
                                    <button type="submit" class="ml-1.5 text-blue-500 hover:text-blue-600 transition-colors">
                                        <i class="fas fa-paper-plane"></i>
                                    </button>
                                </form>
                            </div>
                            
                            <!-- Display replies if any -->
                            <% if (comment.replies && comment.replies.length > 0) { %>
                                <div class="mt-1.5 pl-2 border-l border-gray-200 dark:border-gray-700 space-y-2 pt-1">
                                    <% comment.replies.forEach((reply, replyIndex) => { %>
                                        <div class="reply group" id="reply-<%= comment._id %>-<%= replyIndex %>">
                                            <div class="flex items-start">
                                                <% if (reply.user) { %>
                                                <a href="/profile/<%= reply.user.username || reply.user._id %>" class="flex-shrink-0 mr-1.5">
                                                    <img src="<%= reply.user.profileImage %>" 
                                                         alt="<%= reply.user.name %>" 
                                                         class="w-6 h-6 rounded-full object-cover">
                                                </a>
                                                <div class="flex-1">
                                                    <p class="text-xs">
                                                        <a href="/profile/<%= reply.user.username || reply.user._id %>" class="font-medium text-gray-800 dark:text-white hover:underline"><%= reply.user.name %></a>
                                                        <% if (reply.parentReplyIndex >= 0 && comment.replies[reply.parentReplyIndex] && comment.replies[reply.parentReplyIndex].user) { %>
                                                            <span class="text-gray-500 dark:text-gray-400">@<%= comment.replies[reply.parentReplyIndex].user.name %></span>
                                                        <% } %>
                                                        <span class="text-gray-700 dark:text-gray-300 break-words"><%= reply.content %></span>
                                                    </p>
                                                <% } else { %>
                                                <div class="flex-shrink-0 mr-1.5">
                                                    <div class="w-6 h-6 rounded-full bg-gray-300 flex items-center justify-center">
                                                        <i class="fas fa-user text-gray-500 text-xs"></i>
                                                    </div>
                                                </div>
                                                <div class="flex-1">
                                                    <p class="text-xs">
                                                        <span class="font-medium text-gray-800 dark:text-white">Deleted User</span>
                                                        <span class="text-gray-700 dark:text-gray-300 break-words"><%= reply.content %></span>
                                                    </p>
                                                <% } %>
                                                    <div class="mt-1 flex items-center text-xs space-x-3 text-gray-500 dark:text-gray-400">
                                                        <span class="text-xs"><%= new Date(reply.createdAt).toLocaleDateString(undefined, {month: 'short', day: 'numeric'}) %></span>
                                                        
                                                        <button onclick="likeReply('<%= comment._id %>', '<%= replyIndex %>', this)" 
                                                                class="reply-like-btn <%= reply.likes && reply.likes.includes(user._id) ? 'text-red-500' : 'text-gray-500' %> hover:text-red-500 transition-colors duration-200">
                                                            <i class="fas fa-heart text-xs"></i>
                                                            <% if (reply.likes && reply.likes.length > 0) { %>
                                                            <span class="reply-like-count"><%= reply.likes.length %></span>
                                                            <% } %>
                                                        </button>
                                                        
                                                        <button onclick="toggleNestedReplyForm('<%= comment._id %>', '<%= replyIndex %>')" 
                                                                class="text-gray-500 hover:text-blue-500 transition-colors duration-200">
                                                            Reply
                                                        </button>
                                                        
                                                        <% if (reply.user && user && reply.user._id.toString() === user._id.toString()) { %>
                                                        <button onclick="deleteReply('<%= comment._id %>', '<%= replyIndex %>', this)" 
                                                                class="text-gray-500 hover:text-red-500 transition-colors duration-200 opacity-0 group-hover:opacity-100">
                                                            <i class="fas fa-trash text-xs"></i>
                                                        </button>
                                                        <% } %>
                                                    </div>
                                                    
                                                    <!-- Hidden nested reply form -->
                                                    <div id="nested-reply-form-<%= comment._id %>-<%= replyIndex %>" class="hidden mt-1">
                                                        <form class="flex items-center" onsubmit="addNestedReply(event, '<%= comment._id %>', '<%= replyIndex %>')">
                                                            <input type="text" 
                                                                   placeholder="Reply to <%= reply.user ? reply.user.name : 'this comment' %>..." 
                                                                   class="flex-1 py-1 px-2 text-xs border border-gray-200 dark:border-gray-700 rounded-full focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-800 text-gray-800 dark:text-white"
                                                                   required>
                                                            <button type="submit" class="ml-1.5 text-blue-500 hover:text-blue-600 transition-colors">
                                                                <i class="fas fa-paper-plane"></i>
                                                            </button>
                                                        </form>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    <% }) %>
                                </div>
                            <% } %>
                        </div>
                    </div>
                <% }) %>
            <% } %>
        </div>

        <!-- Comment Form - Keep this visible for quick commenting -->
        <form class="mt-2.5 flex items-center" onsubmit="addComment(event, '<%= post._id %>')">
            <img src="<%= user.profileImage %>" 
                 alt="Your profile" 
                 class="w-8 h-8 rounded-full object-cover mr-2.5">
            <div class="relative flex-1">
                <input type="text" 
                       id="comment-input-<%= post._id %>" 
                       placeholder="Add a comment..." 
                       class="w-full py-2 px-3.5 border border-gray-200 dark:border-gray-700 rounded-full focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-800 text-gray-800 dark:text-white text-sm"
                       required>
                <button type="submit" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-blue-500 hover:text-blue-600 transition-colors">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </form>
    </div>
</div>

<script>
// Add comment functionality
function addComment(event, postId) {
    event.preventDefault();
    const inputEl = document.getElementById(`comment-input-${postId}`);
    const content = inputEl.value.trim();
    
    if (!content) return;
    
    // Disable input while submitting
    inputEl.disabled = true;
    
    fetch(`/post/${postId}/comment`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ content })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to add comment');
        }
        return response.json();
    })
    .then(data => {
        // Create new comment HTML
        const commentHTML = `
            <div class="flex space-x-2.5 comment-item group animate-fadeIn">
                <a href="/profile/${data.comment.user.username || data.comment.user._id}" class="flex-shrink-0">
                    <img src="${data.comment.user.profileImage}" 
                         alt="${data.comment.user.name}" 
                         class="w-8 h-8 rounded-full flex-shrink-0 object-cover">
                </a>
                <div class="flex-1 rounded-xl py-1.5 px-3">
                    <div class="flex flex-wrap items-start">
                        <a href="/profile/${data.comment.user.username || data.comment.user._id}" class="font-medium text-sm text-gray-800 dark:text-white mr-1.5 hover:underline">${data.comment.user.name}</a>
                        <p class="text-gray-700 dark:text-gray-300 text-sm break-words inline">${data.comment.content}</p>
                    </div>
                    
                    <!-- Comment metadata and actions -->
                    <div class="mt-1 flex items-center text-xs space-x-4 text-gray-500 dark:text-gray-400">
                        <span class="text-xs">just now</span>
                        
                        <button onclick="likeComment('${data.comment._id}', this)" 
                                class="comment-like-btn text-gray-500 hover:text-red-500 transition-colors duration-200">
                            <i class="fas fa-heart text-xs"></i>
                        </button>
                        
                        <button onclick="toggleReplyForm('${postId}', '${data.comment._id}')" 
                                class="text-gray-500 hover:text-blue-500 transition-colors duration-200">
                            Reply
                        </button>
                        
                        <button onclick="deleteComment('${data.comment._id}', this)" 
                                class="text-gray-500 hover:text-red-500 transition-colors duration-200 opacity-0 group-hover:opacity-100">
                            <i class="fas fa-trash text-xs"></i>
                        </button>
                    </div>
                    
                    <!-- Hidden reply form -->
                    <div id="reply-form-${data.comment._id}" class="hidden mt-2">
                        <form class="flex items-center" onsubmit="addReply(event, '${data.comment._id}')">
                            <input type="text" 
                                   placeholder="Add a reply..." 
                                   class="flex-1 py-1.5 px-3 text-xs border border-gray-200 dark:border-gray-700 rounded-full focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-800 text-gray-800 dark:text-white"
                                   required>
                            <button type="submit" class="ml-1.5 text-blue-500 hover:text-blue-600 transition-colors">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        `;
        
        // Add the new comment to the DOM
        const commentsContainer = document.getElementById(`comments-container-${postId}`);
        
        // If there are no comments yet, create the container and toggle button
        if (!commentsContainer || commentsContainer.children.length === 0) {
            if (!commentsContainer) {
                const newCommentsContainer = document.createElement('div');
                newCommentsContainer.id = `comments-container-${postId}`;
                newCommentsContainer.className = 'space-y-2.5 max-h-96 overflow-y-auto hidden opacity-0 transition-all duration-300 ease-in-out';
                newCommentsContainer.innerHTML = commentHTML;
                
                // Create the toggle button if it doesn't exist
                const toggleBtn = document.createElement('button');
                toggleBtn.className = 'text-gray-500 dark:text-gray-400 text-sm mb-2 flex items-center hover:text-gray-700 dark:hover:text-gray-300 transition-colors';
                toggleBtn.setAttribute('onclick', `toggleComments('${postId}')`);
                toggleBtn.setAttribute('aria-expanded', 'false');
                toggleBtn.setAttribute('aria-controls', `comments-container-${postId}`);
                toggleBtn.innerHTML = `
                    <span id="comments-toggle-text-${postId}">View 1 comment</span>
                    <i class="fas fa-chevron-down ml-1 text-xs transition-transform duration-200" id="comments-toggle-icon-${postId}"></i>
                `;
                
                // Add the button and container to the DOM
                const commentSection = inputEl.closest('.comments-section');
                commentSection.insertBefore(toggleBtn, commentSection.firstChild);
                commentSection.insertBefore(newCommentsContainer, inputEl.closest('form'));
            } else {
                commentsContainer.innerHTML = commentHTML;
                
                // Create or update the toggle button
                let toggleBtn = document.querySelector(`button[aria-controls="comments-container-${postId}"]`);
                if (!toggleBtn) {
                    toggleBtn = document.createElement('button');
                    toggleBtn.className = 'text-gray-500 dark:text-gray-400 text-sm mb-2 flex items-center hover:text-gray-700 dark:hover:text-gray-300 transition-colors';
                    toggleBtn.setAttribute('onclick', `toggleComments('${postId}')`);
                    toggleBtn.setAttribute('aria-expanded', 'false');
                    toggleBtn.setAttribute('aria-controls', `comments-container-${postId}`);
                    toggleBtn.innerHTML = `
                        <span id="comments-toggle-text-${postId}">View 1 comment</span>
                        <i class="fas fa-chevron-down ml-1 text-xs transition-transform duration-200" id="comments-toggle-icon-${postId}"></i>
                    `;
                    
                    const commentSection = inputEl.closest('.comments-section');
                    commentSection.insertBefore(toggleBtn, commentSection.firstChild);
                } else {
                    document.getElementById(`comments-toggle-text-${postId}`).textContent = `View 1 comment`;
                }
            }
            
            // Show the comments container with animation
            setTimeout(() => {
                toggleComments(postId);
            }, 100);
        } else {
            commentsContainer.insertAdjacentHTML('beforeend', commentHTML);
            
            // Update the toggle button text
            const commentCount = commentsContainer.querySelectorAll('.comment-item').length;
            document.getElementById(`comments-toggle-text-${postId}`).textContent = `View ${commentCount} ${commentCount === 1 ? 'comment' : 'comments'}`;
            
            // Scroll to the new comment
            commentsContainer.scrollTop = commentsContainer.scrollHeight;
        }
        
        // Clear the input
        inputEl.value = '';
        
        // Update the comment count display
        const commentCountEl = document.querySelector(`button[onclick="focusComment('${postId}')"] span`);
        if (commentCountEl) {
            const currentCount = parseInt(commentCountEl.textContent) || 0;
            commentCountEl.textContent = currentCount + 1;
        }
    })
    .catch(error => {
        console.error('Error adding comment:', error);
    })
    .finally(() => {
        // Re-enable input
        inputEl.disabled = false;
        inputEl.focus();
    });
}

// Toggle comments visibility with animation
function toggleComments(postId) {
    const container = document.getElementById(`comments-container-${postId}`);
    const toggleIcon = document.getElementById(`comments-toggle-icon-${postId}`);
    const toggleText = document.getElementById(`comments-toggle-text-${postId}`);
    const isHidden = container.classList.contains('hidden');
    const commentCount = container.querySelectorAll('.comment-item').length;
    
    if (isHidden) {
        // Show comments
        container.classList.remove('hidden');
        // Trigger reflow to make the transition work
        void container.offsetWidth;
        container.classList.add('opacity-100');
        container.classList.add('max-h-96');
        toggleIcon.style.transform = 'rotate(180deg)';
        toggleText.textContent = `Hide comments`;
    } else {
        // Hide comments
        container.classList.remove('opacity-100');
        container.classList.remove('max-h-96');
        container.classList.add('opacity-0');
        container.classList.add('max-h-0');
        
        // Wait for transition to complete before hiding
        setTimeout(() => {
            container.classList.add('hidden');
        }, 300);
        
        toggleIcon.style.transform = 'rotate(0deg)';
        toggleText.textContent = `View ${commentCount} ${commentCount === 1 ? 'comment' : 'comments'}`;
    }
}

// Toggle reply form visibility
function toggleReplyForm(postId, commentId) {
    const replyForm = document.getElementById(`reply-form-${commentId}`);
    
    if (replyForm.classList.contains('hidden')) {
        replyForm.classList.remove('hidden');
        replyForm.classList.add('animate-fadeIn');
        replyForm.querySelector('input').focus();
    } else {
        replyForm.classList.add('animate-fadeOut');
        setTimeout(() => {
            replyForm.classList.add('hidden');
            replyForm.classList.remove('animate-fadeOut');
        }, 200);
    }
}

// Add reply to a comment
function addReply(event, commentId) {
    event.preventDefault();
    const input = event.target.querySelector('input');
    const content = input.value.trim();
    
    if (!content) return;
    
    // Disable input while submitting
    input.disabled = true;
    
    fetch(`/comment/${commentId}/reply`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ content })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to add reply');
        }
        return response.json();
    })
    .then(reply => {
        // Create new reply HTML
        const replyHTML = `
            <div class="reply group animate-fadeIn" id="reply-${commentId}-${reply.replyIndex || 0}">
                <div class="flex items-start">
                    <a href="/profile/${reply.user.username || reply.user._id}" class="flex-shrink-0 mr-1.5">
                        <img src="${reply.user.profileImage}" 
                             alt="${reply.user.name}" 
                             class="w-6 h-6 rounded-full object-cover">
                    </a>
                    <div class="flex-1">
                        <p class="text-xs">
                            <a href="/profile/${reply.user.username || reply.user._id}" class="font-medium text-gray-800 dark:text-white hover:underline">${reply.user.name}</a>
                            <span class="text-gray-700 dark:text-gray-300 break-words">${reply.content}</span>
                        </p>
                        <div class="mt-1 flex items-center text-xs space-x-3 text-gray-500 dark:text-gray-400">
                            <span class="text-xs">just now</span>
                            
                            <button onclick="likeReply('${commentId}', '${reply.replyIndex || 0}', this)" 
                                    class="reply-like-btn text-gray-500 hover:text-red-500 transition-colors duration-200">
                                <i class="fas fa-heart text-xs"></i>
                            </button>
                            
                            <button onclick="toggleNestedReplyForm('${commentId}', '${reply.replyIndex || 0}')" 
                                    class="text-gray-500 hover:text-blue-500 transition-colors duration-200">
                                Reply
                            </button>
                            
                            <button onclick="deleteReply('${commentId}', '${reply.replyIndex || 0}', this)" 
                                    class="text-gray-500 hover:text-red-500 transition-colors duration-200 opacity-0 group-hover:opacity-100">
                                <i class="fas fa-trash text-xs"></i>
                            </button>
                        </div>
                        
                        <!-- Hidden nested reply form -->
                        <div id="nested-reply-form-${commentId}-${reply.replyIndex || 0}" class="hidden mt-1">
                            <form class="flex items-center" onsubmit="addNestedReply(event, '${commentId}', '${reply.replyIndex || 0}')">
                                <input type="text" 
                                       placeholder="Reply to ${reply.user.name}..." 
                                       class="flex-1 py-1 px-2 text-xs border border-gray-200 dark:border-gray-700 rounded-full focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-800 text-gray-800 dark:text-white"
                                       required>
                                <button type="submit" class="ml-1.5 text-blue-500 hover:text-blue-600 transition-colors">
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Find or create the replies container
        let repliesContainer = event.target.closest('.flex-1').querySelector('.pl-2');
        
        if (!repliesContainer) {
            repliesContainer = document.createElement('div');
            repliesContainer.className = 'mt-1.5 pl-2 border-l border-gray-200 dark:border-gray-700 space-y-2 pt-1 animate-fadeIn';
            event.target.closest('.flex-1').appendChild(repliesContainer);
        }
        
        // Add the reply
        repliesContainer.insertAdjacentHTML('beforeend', replyHTML);
        
        // Clear the input and hide the form
        input.value = '';
        toggleReplyForm('', commentId);
        
        // Scroll to show the new reply
        repliesContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    })
    .catch(error => {
        console.error('Error adding reply:', error);
    })
    .finally(() => {
        // Re-enable input
        input.disabled = false;
    });
}

// Like/unlike a comment
function likeComment(commentId, button) {
    // Add animation for the heart icon
    const heart = button.querySelector('i');
    heart.classList.add('animate-heartbeat');
    
    fetch(`/comment/${commentId}/like`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to process like');
        }
        return response.json();
    })
    .then(data => {
        const likeCountEl = button.querySelector('.like-count');
        
        // If like count element doesn't exist and we have likes, create it
        if (!likeCountEl && data.likes > 0) {
            const span = document.createElement('span');
            span.className = 'like-count ml-1';
            span.textContent = data.likes;
            button.appendChild(span);
        } 
        // If like count element exists, update it or remove if zero
        else if (likeCountEl) {
            if (data.likes > 0) {
                likeCountEl.textContent = data.likes;
            } else {
                likeCountEl.remove();
            }
        }
        
        if (data.isLiked) {
            button.classList.add('text-red-500');
            button.classList.remove('text-gray-500');
        } else {
            button.classList.remove('text-red-500');
            button.classList.add('text-gray-500');
        }
        
        // Remove animation class after animation completes
        setTimeout(() => {
            heart.classList.remove('animate-heartbeat');
        }, 600);
    })
    .catch(error => {
        console.error('Error liking comment:', error);
        heart.classList.remove('animate-heartbeat');
    });
}

// Like/unlike a reply
function likeReply(commentId, replyIndex, button) {
    // Add animation for the heart icon
    const heart = button.querySelector('i');
    heart.classList.add('animate-heartbeat');
    
    fetch(`/comment/${commentId}/reply/${replyIndex}/like`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to process like');
        }
        return response.json();
    })
    .then(data => {
        const likeCountEl = button.querySelector('.reply-like-count');
        
        // If like count element doesn't exist and we have likes, create it
        if (!likeCountEl && data.likes > 0) {
            const span = document.createElement('span');
            span.className = 'reply-like-count ml-1';
            span.textContent = data.likes;
            button.appendChild(span);
        } 
        // If like count element exists, update it or remove if zero
        else if (likeCountEl) {
            if (data.likes > 0) {
                likeCountEl.textContent = data.likes;
            } else {
                likeCountEl.remove();
            }
        }
        
        if (data.isLiked) {
            button.classList.add('text-red-500');
            button.classList.remove('text-gray-500');
        } else {
            button.classList.remove('text-red-500');
            button.classList.add('text-gray-500');
        }
        
        // Remove animation class after animation completes
        setTimeout(() => {
            heart.classList.remove('animate-heartbeat');
        }, 600);
    })
    .catch(error => {
        console.error('Error liking reply:', error);
        heart.classList.remove('animate-heartbeat');
    });
}

// Delete a comment
function deleteComment(commentId, button) {
    const commentItem = button.closest('.comment-item');
    if (commentItem) {
        // Add fade out animation
        commentItem.classList.add('animate-fadeOut');
    }
    
    fetch(`/comment/${commentId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to delete comment');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // Find and remove the comment element from the DOM after animation completes
            if (commentItem) {
                setTimeout(() => {
                    commentItem.remove();
                    
                    // Update the comment count in the toggle button
                    const postId = commentItem.closest('[id^="comments-container-"]').id.split('-').slice(2).join('-');
                    const container = document.getElementById(`comments-container-${postId}`);
                    const commentCount = container.querySelectorAll('.comment-item').length;
                    const toggleText = document.getElementById(`comments-toggle-text-${postId}`);
                    
                    if (toggleText) {
                        if (commentCount === 0) {
                            // Hide the container and toggle button if no comments left
                            container.innerHTML = '';
                            container.classList.add('hidden');
                            toggleText.parentElement.classList.add('hidden');
                        } else {
                            toggleText.textContent = `View ${commentCount} ${commentCount === 1 ? 'comment' : 'comments'}`;
                        }
                    }
                }, 300);
            }
        } else {
            console.error('Error deleting comment:', data.error);
            // Remove animation if deletion failed
            if (commentItem) {
                commentItem.classList.remove('animate-fadeOut');
            }
        }
    })
    .catch(error => {
        console.error('Error deleting comment:', error);
        // Remove animation if deletion failed
        if (commentItem) {
            commentItem.classList.remove('animate-fadeOut');
        }
    });
}

// Delete a reply
function deleteReply(commentId, replyIndex, button) {
    const replyItem = button.closest('.reply');
    if (replyItem) {
        // Add fade out animation
        replyItem.classList.add('animate-fadeOut');
    }
    
    fetch(`/comment/${commentId}/reply/${replyIndex}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to delete reply');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // Find and remove the reply element from the DOM after animation completes
            if (replyItem) {
                setTimeout(() => {
                    const repliesContainer = replyItem.closest('.pl-2');
                    replyItem.remove();
                    
                    // If this was the last reply, remove the replies container
                    if (repliesContainer && repliesContainer.children.length === 0) {
                        repliesContainer.remove();
                    }
                }, 300);
            }
        } else {
            console.error('Error deleting reply:', data.error);
            // Remove animation if deletion failed
            if (replyItem) {
                replyItem.classList.remove('animate-fadeOut');
            }
        }
    })
    .catch(error => {
        console.error('Error deleting reply:', error);
        // Remove animation if deletion failed
        if (replyItem) {
            replyItem.classList.remove('animate-fadeOut');
        }
    });
}

// Toggle nested reply form
function toggleNestedReplyForm(commentId, replyIndex) {
    const replyForm = document.getElementById(`nested-reply-form-${commentId}-${replyIndex}`);
    if (replyForm) {
        if (replyForm.classList.contains('hidden')) {
            replyForm.classList.remove('hidden');
            replyForm.classList.add('animate-fadeIn');
            replyForm.querySelector('input').focus();
        } else {
            replyForm.classList.add('animate-fadeOut');
            setTimeout(() => {
                replyForm.classList.add('hidden');
                replyForm.classList.remove('animate-fadeOut');
            }, 200);
        }
    }
}

// Add nested reply
function addNestedReply(event, commentId, parentReplyIndex) {
    event.preventDefault();
    const input = event.target.querySelector('input');
    const content = input.value.trim();
    
    if (!content) return;
    
    // Disable input while submitting
    input.disabled = true;
    
    fetch(`/comment/${commentId}/reply`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
            content,
            parentReplyIndex: parseInt(parentReplyIndex)
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to add reply');
        }
        return response.json();
    })
    .then(reply => {
        // Create new reply HTML
        const parentReply = document.getElementById(`reply-${commentId}-${parentReplyIndex}`);
        const parentUserName = parentReply.querySelector('.font-medium').textContent;
        
        const replyHTML = `
            <div class="reply group animate-fadeIn" id="reply-${commentId}-${reply.replyIndex || 0}">
                <div class="flex items-start">
                    <a href="/profile/${reply.user.username || reply.user._id}" class="flex-shrink-0 mr-1.5">
                        <img src="${reply.user.profileImage}" 
                             alt="${reply.user.name}" 
                             class="w-6 h-6 rounded-full object-cover">
                    </a>
                    <div class="flex-1">
                        <p class="text-xs">
                            <a href="/profile/${reply.user.username || reply.user._id}" class="font-medium text-gray-800 dark:text-white hover:underline">${reply.user.name}</a>
                            <span class="text-gray-500 dark:text-gray-400">@${parentUserName}</span>
                            <span class="text-gray-700 dark:text-gray-300 break-words">${reply.content}</span>
                        </p>
                        <div class="mt-1 flex items-center text-xs space-x-3 text-gray-500 dark:text-gray-400">
                            <span class="text-xs">just now</span>
                            
                            <button onclick="likeReply('${commentId}', '${reply.replyIndex || 0}', this)" 
                                    class="reply-like-btn text-gray-500 hover:text-red-500 transition-colors duration-200">
                                <i class="fas fa-heart text-xs"></i>
                            </button>
                            
                            <button onclick="toggleNestedReplyForm('${commentId}', '${reply.replyIndex || 0}')" 
                                    class="text-gray-500 hover:text-blue-500 transition-colors duration-200">
                                Reply
                            </button>
                            
                            <button onclick="deleteReply('${commentId}', '${reply.replyIndex || 0}', this)" 
                                    class="text-gray-500 hover:text-red-500 transition-colors duration-200 opacity-0 group-hover:opacity-100">
                                <i class="fas fa-trash text-xs"></i>
                            </button>
                        </div>
                        
                        <!-- Hidden nested reply form -->
                        <div id="nested-reply-form-${commentId}-${reply.replyIndex || 0}" class="hidden mt-1">
                            <form class="flex items-center" onsubmit="addNestedReply(event, '${commentId}', '${reply.replyIndex || 0}')">
                                <input type="text" 
                                       placeholder="Reply to ${reply.user.name}..." 
                                       class="flex-1 py-1 px-2 text-xs border border-gray-200 dark:border-gray-700 rounded-full focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-800 text-gray-800 dark:text-white"
                                       required>
                                <button type="submit" class="ml-1.5 text-blue-500 hover:text-blue-600 transition-colors">
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Find the replies container
        let repliesContainer = parentReply.closest('.pl-2');
        
        // Add the reply
        repliesContainer.insertAdjacentHTML('beforeend', replyHTML);
        
        // Clear the input and hide the form
        input.value = '';
        toggleNestedReplyForm(commentId, parentReplyIndex);
        
        // Scroll to show the new reply
        const newReply = document.getElementById(`reply-${commentId}-${reply.replyIndex || 0}`);
        if (newReply) {
            newReply.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    })
    .catch(error => {
        console.error('Error adding nested reply:', error);
    })
    .finally(() => {
        // Re-enable input
        input.disabled = false;
    });
}

// Listen for new comments via socket
if (typeof io !== 'undefined') {
    const socket = io();
    socket.on('newComment', function(data) {
        const commentsContainer = document.getElementById(`comments-container-${data.postId}`);
        if (commentsContainer) {
            const commentHTML = `
                <div class="flex space-x-2.5 comment-item group animate-fadeIn">
                    <a href="/profile/${data.comment.user.username || data.comment.user._id}" class="flex-shrink-0">
                        <img src="${data.comment.user.profileImage}" 
                             alt="${data.comment.user.name}" 
                             class="w-8 h-8 rounded-full flex-shrink-0 object-cover">
                    </a>
                    <div class="flex-1 rounded-xl py-1.5 px-3">
                        <div class="flex flex-wrap items-start">
                            <a href="/profile/${data.comment.user.username || data.comment.user._id}" class="font-medium text-sm text-gray-800 dark:text-white mr-1.5 hover:underline">${data.comment.user.name}</a>
                            <p class="text-gray-700 dark:text-gray-300 text-sm break-words inline">${data.comment.content}</p>
                        </div>
                        
                        <!-- Comment metadata and actions -->
                        <div class="mt-1 flex items-center text-xs space-x-4 text-gray-500 dark:text-gray-400">
                            <span class="text-xs">just now</span>
                            
                            <button onclick="likeComment('${data.comment._id}', this)" 
                                    class="comment-like-btn text-gray-500 hover:text-red-500 transition-colors duration-200">
                                <i class="fas fa-heart text-xs"></i>
                            </button>
                            
                            <button onclick="toggleReplyForm('${data.postId}', '${data.comment._id}')" 
                                    class="text-gray-500 hover:text-blue-500 transition-colors duration-200">
                                Reply
                            </button>
                            
                            <button onclick="deleteComment('${data.comment._id}', this)" 
                                    class="text-gray-500 hover:text-red-500 transition-colors duration-200 opacity-0 group-hover:opacity-100">
                                <i class="fas fa-trash text-xs"></i>
                            </button>
                        </div>
                        
                        <!-- Hidden reply form -->
                        <div id="reply-form-${data.comment._id}" class="hidden mt-2">
                            <form class="flex items-center" onsubmit="addReply(event, '${data.comment._id}')">
                                <input type="text" 
                                       placeholder="Add a reply..." 
                                       class="flex-1 py-1.5 px-3 text-xs border border-gray-200 dark:border-gray-700 rounded-full focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-800 text-gray-800 dark:text-white"
                                       required>
                                <button type="submit" class="ml-1.5 text-blue-500 hover:text-blue-600 transition-colors">
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            `;
            commentsContainer.insertAdjacentHTML('beforeend', commentHTML);
            commentsContainer.scrollTop = commentsContainer.scrollHeight;
            
            // Update comment count
            const commentCountEl = document.querySelector(`button[onclick="focusComment('${data.postId}')"] span`);
            if (commentCountEl) {
                const currentCount = parseInt(commentCountEl.textContent) || 0;
                commentCountEl.textContent = currentCount + 1;
            }
            
            // Update toggle button text if it exists
            const toggleText = document.getElementById(`comments-toggle-text-${data.postId}`);
            if (toggleText) {
                const commentCount = commentsContainer.querySelectorAll('.comment-item').length;
                toggleText.textContent = `View ${commentCount} ${commentCount === 1 ? 'comment' : 'comments'}`;
            }
        }
    });
}
</script>

<style>
/* Animation classes */
.animate-fadeIn {
    animation: fadeIn 0.3s ease-in-out forwards;
}

.animate-fadeOut {
    animation: fadeOut 0.3s ease-in-out forwards;
}

.animate-heartbeat {
    animation: heartbeat 0.6s ease-in-out;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

@keyframes fadeOut {
    from { opacity: 1; transform: translateY(0); }
    to { opacity: 0; transform: translateY(10px); }
}

@keyframes heartbeat {
    0% { transform: scale(1); }
    25% { transform: scale(1.3); }
    50% { transform: scale(1); }
    75% { transform: scale(1.3); }
    100% { transform: scale(1); }
}
</style> 