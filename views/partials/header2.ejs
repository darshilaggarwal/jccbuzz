<!DOCTYPE html>
<html lang="en" class="<%= locals.user && locals.user.darkMode ? 'dark' : '' %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JCCbuzz</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://unpkg.com/swiper@8/swiper-bundle.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/stylesheets/style.css">
    <link rel="icon" type="image/svg+xml" href="/placeholder/JccBUZZ logo.svg">
    <link rel="shortcut icon" href="/placeholder/JccBUZZ logo.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/placeholder/JccBUZZ logo.svg">
    <script src="/socket.io/socket.io.js"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f0f9ff',
                            100: '#e0f2fe',
                            200: '#bae6fd',
                            300: '#7dd3fc',
                            400: '#38bdf8',
                            500: '#0ea5e9',
                            600: '#0284c7',
                            700: '#0369a1',
                            800: '#075985',
                            900: '#0c4a6e',
                        }
                    },
                    lineClamp: {
                        1: '1',
                        2: '2',
                        3: '3',
                        4: '4',
                        5: '5',
                        6: '6',
                        7: '7',
                        8: '8',
                        9: '9',
                        10: '10'
                    }
                }
            },
            plugins: [
                function({ addUtilities }) {
                    const newUtilities = {
                        '.line-clamp-1': {
                            overflow: 'hidden',
                            display: '-webkit-box',
                            '-webkit-box-orient': 'vertical',
                            '-webkit-line-clamp': '1',
                        },
                        '.line-clamp-2': {
                            overflow: 'hidden',
                            display: '-webkit-box',
                            '-webkit-box-orient': 'vertical',
                            '-webkit-line-clamp': '2',
                        },
                        '.line-clamp-3': {
                            overflow: 'hidden',
                            display: '-webkit-box',
                            '-webkit-box-orient': 'vertical',
                            '-webkit-line-clamp': '3',
                        },
                        '.line-clamp-4': {
                            overflow: 'hidden',
                            display: '-webkit-box',
                            '-webkit-box-orient': 'vertical',
                            '-webkit-line-clamp': '4',
                        },
                        '.line-clamp-5': {
                            overflow: 'hidden',
                            display: '-webkit-box',
                            '-webkit-box-orient': 'vertical',
                            '-webkit-line-clamp': '5',
                        },
                        '.line-clamp-6': {
                            overflow: 'hidden',
                            display: '-webkit-box',
                            '-webkit-box-orient': 'vertical',
                            '-webkit-line-clamp': '6',
                        },
                        '.line-clamp-none': {
                            '-webkit-line-clamp': 'unset',
                        }
                    }
                    addUtilities(newUtilities);
                }
            ]
        }
    </script>
    <style>
        /* Hide scrollbars but keep scrolling functionality */
        * {
            scrollbar-width: none; /* Firefox */
            -ms-overflow-style: none; /* IE and Edge */
        }
        
        *::-webkit-scrollbar {
            display: none; /* Chrome, Safari, Opera */
        }
        
        /* Animation for comment fade-in */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .animate-fadeIn {
            animation: fadeIn 0.3s ease-out forwards;
        }
        
        /* Animation for notification badge pulse */
        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.5);
            }
            70% {
                box-shadow: 0 0 0 6px rgba(239, 68, 68, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(239, 68, 68, 0);
            }
        }
        
        #notification-badge:not(.opacity-0) {
            animation: pulse 2s infinite;
        }
        
        /* Gradient text effect */
        .gradient-text {
            background-clip: text;
            -webkit-background-clip: text;
            color: transparent;
            background-image: linear-gradient(to right, #3b82f6, #8b5cf6, #ec4899);
        }
        
        /* Navbar icon hover effects with gradient */
        .navbar-icon:hover i {
            background-clip: text;
            -webkit-background-clip: text;
            color: transparent;
            background-image: linear-gradient(to right, #3b82f6, #8b5cf6, #ec4899);
            transform: scale(1.1);
            transition: all 0.3s ease;
        }
        
        /* Current/active link styling */
        .navbar-icon.active i {
            background-clip: text;
            -webkit-background-clip: text;
            color: transparent;
            background-image: linear-gradient(to right, #3b82f6, #8b5cf6, #ec4899);
        }
        
        /* Slide in/out animations for dropdown panel */
        @keyframes slideInDown {
            from {
                transform: translateY(-10px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }
        
        @keyframes slideOutUp {
            from {
                transform: translateY(0);
                opacity: 1;
            }
            to {
                transform: translateY(-10px);
                opacity: 0;
            }
        }
        
        .slide-in {
            animation: slideInDown 0.2s ease-out forwards;
        }
        
        .slide-out {
            animation: slideOutUp 0.2s ease-out forwards;
        }
        
        /* Theme variables */
        :root {
            --bg-main: #ffffff;
            --bg-secondary: #f3f4f6;
            --bg-tertiary: #e5e7eb;
            --text-primary: #1f2937;
            --text-secondary: #4b5563;
            --text-tertiary: #6b7280;
            --border-color: #e5e7eb;
        }
        
        .dark {
            --bg-main: #000000;
            --bg-secondary: #111111;
            --bg-tertiary: #222222;
            --text-primary: rgba(255, 255, 255, 0.95);
            --text-secondary: rgba(255, 255, 255, 0.8);
            --text-tertiary: rgba(255, 255, 255, 0.65);
            --border-color: #333333;
        }
        
        /* Base styles */
        body {
            background-color: var(--bg-secondary);
            color: var(--text-primary);
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        
        /* Card and container backgrounds */
        .bg-white {
            background-color: var(--bg-main) !important;
        }
        
        .dark .bg-white {
            background-color: var(--bg-main) !important;
        }
        
        .bg-gray-100, .bg-gray-50, .bg-gray-200 {
            background-color: var(--bg-secondary) !important;
        }
        
        .dark .bg-gray-100, .dark .bg-gray-50, .dark .bg-gray-200 {
            background-color: var(--bg-secondary) !important;
        }
        
        /* Text colors */
        .text-gray-800, .text-gray-900 {
            color: var(--text-primary) !important;
        }
        
        .text-gray-600, .text-gray-700 {
            color: var(--text-secondary) !important;
        }
        
        .text-gray-400, .text-gray-500 {
            color: var(--text-tertiary) !important;
        }
        
        /* Border colors */
        .border-gray-200, .border-gray-300 {
            border-color: var(--border-color) !important;
        }
        
        /* Form elements */
        input, textarea, select {
            background-color: var(--bg-secondary);
            color: var(--text-primary);
            border-color: var(--border-color);
        }
        
        .dark input, .dark textarea, .dark select {
            background-color: var(--bg-tertiary) !important;
            color: var(--text-primary) !important;
            border-color: var(--border-color) !important;
        }
        
        /* Heart animation for double-tap like */
        .heart-animation {
            animation: scale-in-center 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
        }

        @keyframes scale-in-center {
            0% {
                transform: scale(0);
                opacity: 0;
            }
            50% {
                transform: scale(1.5);
                opacity: 1;
            }
            100% {
                transform: scale(1);
                opacity: 0;
            }
        }

        /* Post image container styles */
        .post-image {
            position: relative;
            cursor: pointer;
        }

        /* Like button transitions */
        .like-btn,
        .save-btn {
            transition: all 0.2s ease;
        }

        .like-btn.text-red-500,
        .save-btn.text-blue-500 {
            transform: scale(1.1);
        }

        /* Custom scrollbar for notification dropdown */
        .custom-scrollbar::-webkit-scrollbar {
            width: 4px;
        }
        
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #d1d5db;
            border-radius: 2px;
        }
        
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #9ca3af;
        }
        
        @media (prefers-color-scheme: dark) {
            .custom-scrollbar::-webkit-scrollbar-track {
                background: #1f2937;
            }
            
            .custom-scrollbar::-webkit-scrollbar-thumb {
                background: #4b5563;
            }
            
            .custom-scrollbar::-webkit-scrollbar-thumb:hover {
                background: #6b7280;
            }
        }
        
        /* Add animation for notifications dropdown */
        #notificationPanel {
            transition: opacity 0.2s ease, transform 0.2s ease;
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-black transition-colors duration-200">
    <nav class="bg-white dark:bg-black shadow-lg sticky top-0 z-40">
        <div class="max-w-6xl mx-auto px-4">
            <div class="flex justify-between items-center h-16">
                <div class="flex-shrink-0">
                    <a href="/feed" class="text-xl font-bold gradient-text bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 bg-clip-text text-transparent">
                        JCCbuzz
                    </a>
                </div>
                
                <!-- Mobile menu button -->
                <div class="md:hidden">
                    <button type="button" onclick="toggleMobileMenu()" 
                            class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 dark:text-gray-300 dark:hover:text-gray-200">
                        <i class="fas fa-bars"></i>
                    </button>
                </div>

                <!-- Desktop menu (icons only) -->
                <div class="hidden md:flex md:items-center md:space-x-6">
                    <% if (locals.user) { %>
                        <!-- Feed Icon -->
                        <a href="/feed" class="text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent p-2 transition-colors rounded-full navbar-icon" title="Feed">
                            <i class="fas fa-home text-xl"></i>
                        </a>
                        
                        <!-- Explore Icon -->
                        <a href="/explore" class="text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent p-2 transition-colors rounded-full navbar-icon" title="Explore">
                            <i class="fas fa-compass text-xl"></i>
                        </a>
                        
                        <!-- Saved Posts Icon -->
                        <a href="/saved-posts" class="text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent p-2 transition-colors rounded-full navbar-icon" title="Saved Posts">
                            <i class="fas fa-bookmark text-xl"></i>
                        </a>
                        
                        <!-- Profile Icon -->
                        <a href="/profile" class="text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent p-2 transition-colors rounded-full relative navbar-icon" title="Profile">
                            <i class="fas fa-user text-xl"></i>
                        </a>
                        
                        <!-- Notifications Icon -->
                        <div class="relative">
                            <button id="notificationBtn" class="text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent p-2 transition-colors rounded-full navbar-icon" title="Notifications">
                                <i class="fas fa-bell text-xl"></i>
                                <span id="notification-badge" class="absolute -top-1 -right-1 bg-gradient-to-r from-red-500 to-pink-500 text-white text-xs rounded-full flex items-center justify-center px-1.5 min-w-[20px] h-5 opacity-0">0</span>
                            </button>
                            
                            <!-- Notification Dropdown Panel (Updated) -->
                            <div id="notificationPanel" class="hidden absolute right-0 mt-2 w-80 sm:w-96 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-100 dark:border-gray-700 overflow-hidden z-50 transform origin-top-right transition-all duration-200 ease-out">
                                <div class="flex justify-between items-center px-4 py-3 border-b border-gray-100 dark:border-gray-700">
                                    <h3 class="text-base font-semibold gradient-text">Notifications</h3>
                                    <div class="flex items-center space-x-3">
                                        <button id="markAllReadBtn" class="text-xs text-blue-500 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text flex items-center">
                                            <i class="fas fa-check-double mr-1"></i> Mark all read
                                    </button>
                                        <a href="/notifications" class="text-xs text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-white">
                                            <i class="fas fa-external-link-alt"></i>
                                        </a>
                                    </div>
                                </div>
                                
                                <div id="notificationsContainer" class="max-h-[400px] overflow-y-auto custom-scrollbar">
                                    <!-- Loading state -->
                                    <div id="notification-loading" class="p-4 text-center text-gray-500 dark:text-gray-400">
                                        <div class="inline-block animate-spin h-5 w-5 border-2 border-gray-300 dark:border-gray-600 border-t-blue-500 rounded-full mr-2"></div>
                                        Loading notifications...
                                    </div>
                                    
                                    <!-- Empty state (hidden by default) -->
                                    <div id="notification-empty" class="p-6 text-center hidden">
                                        <div class="w-12 h-12 bg-blue-50 dark:bg-blue-900/20 rounded-full flex items-center justify-center mx-auto mb-3">
                                            <i class="fas fa-bell-slash text-blue-500"></i>
                                        </div>
                                        <p class="text-sm text-gray-500 dark:text-gray-400">No notifications yet</p>
                                </div>
                                
                                    <!-- Notifications will be loaded here via JavaScript -->
                                </div>
                                
                                <div class="border-t border-gray-100 dark:border-gray-700 p-3">
                                    <a href="/notifications" class="block text-center text-sm text-blue-500 hover:text-blue-700 dark:hover:text-blue-300 font-medium">
                                        See all notifications
                                    </a>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Chat Icon -->
                        <a href="/chats" class="text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent p-2 transition-colors rounded-full relative navbar-icon" title="Messages">
                            <i class="fas fa-paper-plane text-xl"></i>
                            <% if (locals.unreadMessages && locals.unreadMessages > 0) { %>
                                <span class="absolute -top-1 -right-1 bg-gradient-to-r from-red-500 to-pink-500 text-white text-xs rounded-full flex items-center justify-center px-1.5 min-w-[20px] h-5"><%= locals.unreadMessages %></span>
                            <% } %>
                        </a>

                        <!-- Projects Icon -->
                        <a href="/projects" class="text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent p-2 transition-colors rounded-full navbar-icon" title="Projects">
                            <i class="fas fa-project-diagram text-xl"></i>
                            <% if (locals.projectRequests && locals.projectRequests > 0) { %>
                                <span class="absolute -top-1 -right-1 bg-gradient-to-r from-red-500 to-pink-500 text-white text-xs rounded-full flex items-center justify-center px-1.5 min-w-[20px] h-5"><%= locals.projectRequests %></span>
                            <% } %>
                        </a>
                        
                        <!-- Events Icon -->
                        <a href="/events" class="text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent p-2 transition-colors rounded-full navbar-icon" title="Events">
                            <i class="fas fa-calendar-alt text-xl"></i>
                        </a>
                        
                        <!-- Settings Dropdown -->
                        <div class="relative">
                            <button id="settingsBtn" class="text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent p-2 transition-colors rounded-full navbar-icon" title="Settings">
                                <i class="fas fa-cog text-xl"></i>
                            </button>
                            
                            <!-- Settings Dropdown Panel -->
                            <div id="settingsPanel" class="hidden absolute right-0 mt-2 w-56 bg-white dark:bg-gray-900 rounded-md shadow-lg py-1 z-50 border border-transparent bg-gradient-to-r from-blue-600/10 via-indigo-600/10 to-purple-600/10">
                                <a href="/edit-profile" class="block px-4 py-2 text-gray-700 dark:text-gray-200 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text transition-colors">
                                    <i class="fas fa-user-edit mr-2"></i> Edit Profile
                                </a>
                                <div class="border-t border-gray-100 dark:border-gray-800 my-1"></div>
                                <a href="/logout" class="block px-4 py-2 text-red-600 dark:text-red-400 hover:text-transparent hover:bg-gradient-to-r hover:from-red-600 hover:to-pink-600 hover:bg-clip-text transition-colors">
                                    <i class="fas fa-sign-out-alt mr-2"></i> Logout
                                </a>
                            </div>
                        </div>
                    <% } else { %>
                        <!-- <a href="/login" class="px-4 py-2 text-white rounded-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 transition-all mr-2">Login</a>
                        <a href="/register" class="px-4 py-2 text-white rounded-full bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 transition-all">Register</a> -->
                    <% } %>
                </div>
            </div>

            <!-- Mobile menu -->
            <div id="mobileMenu" class="hidden md:hidden">
                <div class="px-2 pt-2 pb-3 space-y-1">
                    <% if (locals.user) { %>
                        <div class="grid grid-cols-3 gap-2 py-2">
                            <a href="/feed" class="flex flex-col items-center justify-center p-2 text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent rounded-lg">
                                <i class="fas fa-home text-xl mb-1"></i>
                                <span class="text-xs">Feed</span>
                            </a>
                            <a href="/explore" class="flex flex-col items-center justify-center p-2 text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent rounded-lg">
                                <i class="fas fa-compass text-xl mb-1"></i>
                                <span class="text-xs">Explore</span>
                            </a>
                            <a href="/profile" class="flex flex-col items-center justify-center p-2 text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent rounded-lg">
                                <i class="fas fa-user text-xl mb-1"></i>
                                <span class="text-xs">Profile</span>
                            </a>
                            <a href="/notifications" class="flex flex-col items-center justify-center p-2 text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent rounded-lg">
                                <i class="fas fa-bell text-xl mb-1"></i>
                                <span class="text-xs">Alerts</span>
                            </a>
                            <a href="/projects" class="flex flex-col items-center justify-center p-2 text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent rounded-lg">
                                <i class="fas fa-project-diagram text-xl mb-1"></i>
                                <span class="text-xs">Projects</span>
                            </a>
                            <a href="/events" class="flex flex-col items-center justify-center p-2 text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent rounded-lg">
                                <i class="fas fa-calendar-alt text-xl mb-1"></i>
                                <span class="text-xs">Events</span>
                            </a>
                            <a href="/edit-profile" class="flex flex-col items-center justify-center p-2 text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:via-indigo-600 hover:to-purple-600 hover:bg-clip-text dark:text-gray-300 dark:hover:text-transparent rounded-lg">
                                <i class="fas fa-cog text-xl mb-1"></i>
                                <span class="text-xs">Settings</span>
                            </a>
                        </div>
                        <div class="border-t border-gray-200 dark:border-gray-700 my-2"></div>
                        <a href="/logout" class="block px-3 py-2 text-white bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 rounded-md transition-colors text-center">
                            <i class="fas fa-sign-out-alt mr-2"></i> Logout
                        </a>
                    <% } else { %>
                        <!-- <div class="flex flex-col space-y-2 p-2">
                            <a href="/login" class="block px-3 py-2 rounded-md text-white bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-center">Login</a>
                            <a href="/register" class="block px-3 py-2 rounded-md text-white bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-center">Register</a>
                        </div> -->
                    <% } %>
                </div>
            </div>
        </div>
    </nav>

    <script>
        function toggleMobileMenu() {
            const menu = document.getElementById('mobileMenu');
            menu.classList.toggle('hidden');
        }
        
        function toggleDarkMode() {
            const html = document.documentElement;
            const body = document.body;
            
            // Toggle dark class
            html.classList.toggle('dark');
            
            // Update body class and all container elements
            if (html.classList.contains('dark')) {
                localStorage.setItem('darkMode', 'enabled');
                // Apply dark mode variables to any problematic elements
                document.querySelectorAll('.bg-white, .bg-gray-100, .card, .container-bg').forEach(el => {
                    el.style.backgroundColor = 'var(--bg-main)';
                });
                document.querySelectorAll('.bg-gray-50, .bg-gray-200').forEach(el => {
                    el.style.backgroundColor = 'var(--bg-secondary)';
                });
                // Also save to database if user is logged in
                updateUserDarkModePreference(true);
            } else {
                localStorage.setItem('darkMode', 'disabled');
                // Reset inline styles for light mode
                document.querySelectorAll('.bg-white, .bg-gray-100, .card, .container-bg').forEach(el => {
                    el.style.backgroundColor = '';
                });
                document.querySelectorAll('.bg-gray-50, .bg-gray-200').forEach(el => {
                    el.style.backgroundColor = '';
                });
                // Also save to database if user is logged in
                updateUserDarkModePreference(false);
            }
        }
        
        // Highlight active navigation link
        function highlightCurrentPage() {
            const currentPath = window.location.pathname;
            
            // Get all navbar links
            const navLinks = document.querySelectorAll('.navbar-icon');
            
            // Remove active class from all links
            navLinks.forEach(link => {
                link.classList.remove('active');
            });
            
            // Check each link and add active class if it matches current path
            navLinks.forEach(link => {
                const href = link.getAttribute('href');
                if (href === currentPath) {
                    link.classList.add('active');
                    
                    // Apply gradient text to icon directly
                    const icon = link.querySelector('i');
                    if (icon) {
                        icon.classList.add('gradient-text');
                    }
                }
            });
            
            // Also check mobile menu links
            const mobileLinks = document.querySelectorAll('#mobileMenu a');
            mobileLinks.forEach(link => {
                const href = link.getAttribute('href');
                if (href === currentPath) {
                    link.querySelector('i')?.classList.add('gradient-text');
                    link.querySelector('span')?.classList.add('gradient-text');
                }
            });
        }
        
        function updateUserDarkModePreference(isDarkMode) {
            /* eslint-disable */
            // NOTE: The following EJS template syntax may trigger linter warnings
            // These warnings can be safely ignored as EJS syntax is processed server-side
            <% if (locals.user) { %>
                fetch('/user/preferences/theme', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ darkMode: isDarkMode })
                })
                .catch(error => console.error('Error updating theme preference:', error));
            <% } %>
            /* eslint-enable */
        }
        
        // Check if dark mode is enabled in localStorage on page load
        document.addEventListener('DOMContentLoaded', function() {
            const html = document.documentElement;
            
            if (localStorage.getItem('darkMode') === 'enabled' || html.classList.contains('dark')) {
                html.classList.add('dark');
                
                // Apply dark mode variables to any problematic elements
                document.querySelectorAll('.bg-white, .bg-gray-100, .card, .container-bg').forEach(el => {
                    el.style.backgroundColor = 'var(--bg-main)';
                });
                document.querySelectorAll('.bg-gray-50, .bg-gray-200').forEach(el => {
                    el.style.backgroundColor = 'var(--bg-secondary)';
                });
            }
            
            // Highlight the current page in navigation
            highlightCurrentPage();
            
            // Set up settings dropdown
            const settingsBtn = document.getElementById('settingsBtn');
            const settingsPanel = document.getElementById('settingsPanel');
            
            if (settingsBtn && settingsPanel) {
                settingsBtn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    settingsPanel.classList.toggle('hidden');
                });
                
                // Close panel when clicking outside
                document.addEventListener('click', function(e) {
                    if (!settingsPanel.contains(e.target) && !settingsBtn.contains(e.target)) {
                        settingsPanel.classList.add('hidden');
                    }
                });
            }
        });

        // Notification handling
        document.addEventListener('DOMContentLoaded', function() {
            const notificationBtn = document.getElementById('notificationBtn');
            const notificationPanel = document.getElementById('notificationPanel');
            const notificationBadge = document.getElementById('notification-badge');
            const notificationsContainer = document.getElementById('notificationsContainer');
            const notificationLoading = document.getElementById('notification-loading');
            const notificationEmpty = document.getElementById('notification-empty');
            const markAllReadBtn = document.getElementById('markAllReadBtn');
            
            let unreadCount = 0;
            let isNotificationPanelOpen = false;
            
            // Toggle notification panel
            if (notificationBtn) {
                notificationBtn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    
                    if (isNotificationPanelOpen) {
                        closeNotificationPanel();
                    } else {
                        openNotificationPanel();
                        fetchNotifications();
                    }
                });
            }
                
                // Close panel when clicking outside
                document.addEventListener('click', function(e) {
                if (isNotificationPanelOpen && notificationPanel && !notificationPanel.contains(e.target) && e.target !== notificationBtn) {
                    closeNotificationPanel();
                    }
                });
                
            // Mark all notifications as read
                if (markAllReadBtn) {
                markAllReadBtn.addEventListener('click', function(e) {
                    e.stopPropagation();
                        markAllNotificationsAsRead();
                    });
                }
            
            function openNotificationPanel() {
                if (notificationPanel) {
                    notificationPanel.classList.remove('hidden');
                    // Apply animation class
                    setTimeout(() => {
                        notificationPanel.classList.add('slide-in');
                        notificationPanel.classList.remove('slide-out');
                    }, 10);
                    isNotificationPanelOpen = true;
                }
            }
            
            function closeNotificationPanel() {
                if (notificationPanel) {
                    // Apply animation class
                    notificationPanel.classList.remove('slide-in');
                    notificationPanel.classList.add('slide-out');
                    // Hide after animation completes
                    setTimeout(() => {
                        notificationPanel.classList.add('hidden');
                    }, 200);
                    isNotificationPanelOpen = false;
                }
            }
            
            // Fetch unread notification count
            function fetchUnreadCount() {
                fetch('/api/notifications/count', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    credentials: 'include'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch notification count');
                    }
                    return response.json();
                })
                .then(data => {
                    unreadCount = data.count;
                    updateNotificationBadge();
                })
                .catch(error => {
                    console.error('Error fetching notification count:', error);
                });
            }
            
            // Update notification badge
            function updateNotificationBadge() {
                if (notificationBadge) {
                    if (unreadCount > 0) {
                        notificationBadge.textContent = unreadCount > 99 ? '99+' : unreadCount;
                        notificationBadge.classList.remove('opacity-0');
                        notificationBadge.classList.add('opacity-100');
            } else {
                        notificationBadge.classList.remove('opacity-100');
                        notificationBadge.classList.add('opacity-0');
                    }
                }
            }
            
            // Fetch notifications for dropdown
            function fetchNotifications() {
                if (!notificationsContainer || !notificationLoading || !notificationEmpty) return;
                
                notificationLoading.classList.remove('hidden');
                notificationEmpty.classList.add('hidden');
                
                // Clear previous notifications except loading and empty states
                const existingNotifications = notificationsContainer.querySelectorAll('.notification-item');
                existingNotifications.forEach(notification => notification.remove());
                
                fetch('/api/notifications/unread?limit=5', {
                    method: 'GET',
                headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    credentials: 'include'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch notifications');
                    }
                    return response.json();
                })
                .then(data => {
                    notificationLoading.classList.add('hidden');
                    
                    if (!data || data.length === 0) {
                        notificationEmpty.classList.remove('hidden');
                        return;
                    }
                    
                    // Render notifications
                    data.forEach(notification => renderNotification(notification));
            })
            .catch(error => {
                    console.error('Error fetching notifications:', error);
                    notificationLoading.classList.add('hidden');
                    notificationEmpty.classList.remove('hidden');
                });
            }
            
            // Render a single notification
            function renderNotification(notification) {
                if (!notificationsContainer) return;
                
                let iconClass = '';
                let iconBgClass = '';
                
                // Determine icon and background based on notification type
                if (notification.type.includes('project_')) {
                    iconClass = 'fas fa-project-diagram';
                    iconBgClass = 'bg-purple-100 text-purple-600 dark:bg-purple-900/20 dark:text-purple-400';
                } else if (notification.type === 'follow' || notification.type === 'follow_request' || notification.type === 'follow_accepted') {
                    iconClass = 'fas fa-user-plus';
                    iconBgClass = 'bg-green-100 text-green-600 dark:bg-green-900/20 dark:text-green-400';
                } else if (notification.type === 'like' || notification.type === 'comment_like' || notification.type === 'reply_like') {
                    iconClass = 'fas fa-heart';
                    iconBgClass = 'bg-red-100 text-red-600 dark:bg-red-900/20 dark:text-red-400';
                } else if (notification.type === 'comment') {
                    iconClass = 'fas fa-comment';
                    iconBgClass = 'bg-yellow-100 text-yellow-600 dark:bg-yellow-900/20 dark:text-yellow-400';
                } else if (notification.type === 'reply') {
                    iconClass = 'fas fa-reply';
                    iconBgClass = 'bg-orange-100 text-orange-600 dark:bg-orange-900/20 dark:text-orange-400';
                } else if (notification.type === 'mention') {
                    iconClass = 'fas fa-at';
                    iconBgClass = 'bg-blue-100 text-blue-600 dark:bg-blue-900/20 dark:text-blue-400';
                } else if (notification.type === 'new_post') {
                    iconClass = 'fas fa-image';
                    iconBgClass = 'bg-indigo-100 text-indigo-600 dark:bg-indigo-900/20 dark:text-indigo-400';
                } else {
                    iconClass = 'fas fa-bell';
                    iconBgClass = 'bg-blue-100 text-blue-600 dark:bg-blue-900/20 dark:text-blue-400';
                }
                
                let timeAgo = new Date(notification.createdAt).toLocaleDateString(undefined, {
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
                
                const notificationElement = document.createElement('div');
                notificationElement.className = 'notification-item p-3 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors cursor-pointer animate-fadeIn';
                notificationElement.setAttribute('data-id', notification._id);
                
                // Check if this is a project join request notification
                const isProjectJoinRequest = notification.type === 'project_join_request';
                
                // Display sender profile image when available
                const senderImage = notification.sender && notification.sender.profileImage 
                    ? notification.sender.profileImage 
                    : '/placeholder/image.png';
                    
                // In social notifications, use sender profile image
                const useProfileImage = !notification.type.includes('project_');
                
                let contentHtml = `
                    <div class="flex items-start space-x-3">
                        <div class="flex-shrink-0">
                            ${useProfileImage ? `
                                <img src="${senderImage}" alt="Profile" 
                                     class="w-10 h-10 rounded-full object-cover border border-gray-200 dark:border-gray-700"
                                     onerror="this.src='/placeholder/image.png'">
                            ` : `
                                <div class="w-10 h-10 rounded-full ${iconBgClass} flex items-center justify-center shadow-sm">
                                    <i class="${iconClass} text-lg"></i>
                                        </div>
                            `}
                                    </div>
                        <div class="flex-1 min-w-0">
                            <div class="flex justify-between items-start mb-1">
                                <h4 class="text-sm font-semibold text-gray-900 dark:text-white truncate">
                                    ${notification.title || 'Notification'}
                                </h4>
                                <span class="text-xs text-gray-500 dark:text-gray-400 whitespace-nowrap ml-2">${timeAgo}</span>
                            </div>`;
                
                // For project join requests, split the message to separate the user message if present
                if (isProjectJoinRequest && notification.message && notification.message.includes("Message:")) {
                    // Split the notification message to extract the applicant's message
                    const parts = notification.message.split("\n\nMessage:");
                    
                    contentHtml += `
                            <p class="text-xs text-gray-600 dark:text-gray-300 line-clamp-2 mb-1">
                                ${parts[0]}
                            </p>
                            <div class="mt-2 mb-3 p-3 bg-purple-50 dark:bg-purple-900/20 rounded-md text-xs text-gray-700 dark:text-gray-300 border border-purple-100 dark:border-purple-800">
                                <div class="font-semibold mb-1">Applicant's Message:</div>
                                <div class="italic">${parts[1] || ""}</div>
                            </div>`;
                } else {
                    contentHtml += `
                            <p class="text-xs text-gray-600 dark:text-gray-300 line-clamp-2 mb-1">
                                ${notification.message || notification.displayMessage || ''}
                            </p>`;
                }
                
                // Add accept/reject buttons for project join requests
                if (isProjectJoinRequest && notification.data && notification.data.projectId && notification.data.requestId) {
                    contentHtml += `
                            <div class="flex space-x-2 my-2">
                                <button class="flex-1 px-3 py-1.5 text-xs font-medium text-white bg-green-600 rounded hover:bg-green-700 transition-colors accept-request-btn" 
                                        data-project-id="${notification.data.projectId}" 
                                        data-request-id="${notification.data.requestId}">
                                    Accept
                                </button>
                                <button class="flex-1 px-3 py-1.5 text-xs font-medium text-white bg-red-600 rounded hover:bg-red-700 transition-colors reject-request-btn"
                                        data-project-id="${notification.data.projectId}" 
                                        data-request-id="${notification.data.requestId}">
                                    Reject
                                </button>
                            </div>`;
                }
                
                // Add the mark as read button
                contentHtml += `
                            <div class="flex justify-end">
                                <button class="text-xs text-blue-500 hover:text-blue-700 dark:hover:text-blue-300 transition-colors mt-1 mark-read-btn">
                                    Mark as read
                                    </button>
                            </div>
                                </div>
                            </div>
                        `;
                
                notificationElement.innerHTML = contentHtml;
                
                // Add click event to mark as read and navigate
                const markReadBtn = notificationElement.querySelector('.mark-read-btn');
                if (markReadBtn) {
                    markReadBtn.addEventListener('click', function(e) {
                        e.stopPropagation();
                        markNotificationAsRead(notification._id);
                        notificationElement.classList.add('opacity-50');
                        markReadBtn.textContent = 'Read';
                        markReadBtn.disabled = true;
                        
                        // Update badge count
                        if (unreadCount > 0) {
                            unreadCount--;
                            updateNotificationBadge();
                        }
                    });
                }
                
                // Add click event for accept project request button
                const acceptBtn = notificationElement.querySelector('.accept-request-btn');
                if (acceptBtn) {
                    acceptBtn.addEventListener('click', function(e) {
                        e.stopPropagation();
                        const projectId = this.getAttribute('data-project-id');
                        const requestId = this.getAttribute('data-request-id');
                        
                        // Add loading state
                        const originalText = this.textContent;
                        this.disabled = true;
                        this.innerHTML = '<span class="inline-block animate-spin mr-1">↻</span> Processing...';
                        
                        // Call API to accept the request
                        handleJoinRequest(projectId, requestId, 'accepted', () => {
                            // Success callback
                            markNotificationAsRead(notification._id);
                            notificationElement.classList.add('opacity-50');
                            acceptBtn.textContent = 'Accepted';
                            acceptBtn.disabled = true;
                            
                            // Disable the reject button too
                            const rejectBtn = notificationElement.querySelector('.reject-request-btn');
                            if (rejectBtn) {
                                rejectBtn.disabled = true;
                                rejectBtn.classList.add('opacity-50');
                            }
                            
                            // Update badge count
                            if (unreadCount > 0) {
                                unreadCount--;
                                updateNotificationBadge();
                            }
                        }, () => {
                            // Error callback
                            this.disabled = false;
                            this.textContent = originalText;
                        });
                    });
                }
                
                // Add click event for reject project request button
                const rejectBtn = notificationElement.querySelector('.reject-request-btn');
                if (rejectBtn) {
                    rejectBtn.addEventListener('click', function(e) {
                        e.stopPropagation();
                        const projectId = this.getAttribute('data-project-id');
                        const requestId = this.getAttribute('data-request-id');
                        
                        // Add loading state
                        const originalText = this.textContent;
                        this.disabled = true;
                        this.innerHTML = '<span class="inline-block animate-spin mr-1">↻</span> Processing...';
                        
                        // Call API to reject the request
                        handleJoinRequest(projectId, requestId, 'rejected', () => {
                            // Success callback
                            markNotificationAsRead(notification._id);
                            notificationElement.classList.add('opacity-50');
                            rejectBtn.textContent = 'Rejected';
                            rejectBtn.disabled = true;
                            
                            // Disable the accept button too
                            const acceptBtn = notificationElement.querySelector('.accept-request-btn');
                            if (acceptBtn) {
                                acceptBtn.disabled = true;
                                acceptBtn.classList.add('opacity-50');
                            }
                            
                            // Update badge count
                            if (unreadCount > 0) {
                                unreadCount--;
                                updateNotificationBadge();
                            }
                        }, () => {
                            // Error callback
                            this.disabled = false;
                            this.textContent = originalText;
                        });
                    });
                }
                
                // Default click event for notification - navigate to relevant page
                notificationElement.addEventListener('click', function(e) {
                    // Don't trigger if clicking on accept/reject buttons
                    if (e.target.classList.contains('accept-request-btn') || 
                        e.target.classList.contains('reject-request-btn') ||
                        e.target.classList.contains('mark-read-btn')) {
                        return;
                    }
                    
                    markNotificationAsRead(notification._id);
                    
                    // Navigate based on notification type
                    if (notification.type.includes('like')) {
                        // For post likes, comment likes, reply likes
                        if (notification.data && notification.data.postId) {
                            window.location.href = `/post/${notification.data.postId}`;
            } else {
                            window.location.href = '/notifications';
                        }
                    } else if (notification.type.includes('comment') || notification.type === 'reply' || notification.type === 'mention') {
                        // For comments, replies, mentions
                        if (notification.data && notification.data.postId) {
                            window.location.href = `/post/${notification.data.postId}`;
                } else {
                            window.location.href = '/notifications';
                        }
                    } else if (notification.type.includes('project_')) {
                        window.location.href = '/projects';
                    } else if (notification.type.includes('follow')) {
                        window.location.href = '/follow-requests';
                    } else {
                        window.location.href = '/notifications';
                    }
                });
                
                notificationsContainer.appendChild(notificationElement);
            }
            
            // Function to handle project join requests
            function handleJoinRequest(projectId, requestId, status, successCallback, errorCallback) {
                console.log(`Handling ${status} request for project ${projectId}, request ${requestId}`);
                
                fetch(`/api/projects/${projectId}/join-request/${requestId}`, {
                    method: 'PUT',
                headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ status }),
                    credentials: 'include'
                })
                .then(async response => {
                    // Get the response data regardless of status
                    const data = await response.json();
                    
                    // Check if response was successful
                    if (!response.ok) {
                        throw new Error(data.message || `Failed to ${status} join request`);
                    }
                    
                    return data;
                })
            .then(data => {
                    console.log(`Successfully ${status} request:`, data);
                    
                    // Show toast notification if available
                    if (typeof showToast === 'function') {
                        showToast(data.message || `Join request ${status} successfully`, 'success');
                    }
                    
                    // Call success callback
                    if (typeof successCallback === 'function') {
                        successCallback(data);
                    }
                })
                .catch(error => {
                    console.error(`Error ${status} join request:`, error);
                    
                    // Show toast notification if available
                    if (typeof showToast === 'function') {
                        showToast(error.message || `Failed to ${status} join request`, 'error');
                    }
                    
                    // Call error callback
                    if (typeof errorCallback === 'function') {
                        errorCallback(error);
                    }
                });
            }
            
            // Toast notification function
            function showToast(message, type = 'success') {
                // Check if toast container exists, create if not
                let toastContainer = document.getElementById('toast-container');
                if (!toastContainer) {
                    toastContainer = document.createElement('div');
                    toastContainer.id = 'toast-container';
                    toastContainer.className = 'fixed bottom-4 right-4 z-50 flex flex-col space-y-2';
                    document.body.appendChild(toastContainer);
                }
                
                // Create toast
                const toast = document.createElement('div');
                toast.className = `px-6 py-3 rounded-lg text-white transform transition-all duration-300 translate-y-2 opacity-0 ${
                    type === 'success' ? 'bg-green-500' : 'bg-red-500'
                }`;
                
                // Add a nicer message format with icon
                const icon = type === 'success' ? 
                    '<i class="fas fa-check-circle mr-2"></i>' : 
                    '<i class="fas fa-exclamation-circle mr-2"></i>';
                
                toast.innerHTML = icon + message;
                
                toastContainer.appendChild(toast);
                
                // Trigger animation
                setTimeout(() => {
                    toast.classList.remove('translate-y-2', 'opacity-0');
                }, 10);
                
                // Remove toast after 3 seconds
                setTimeout(() => {
                    toast.classList.add('translate-y-2', 'opacity-0');
                    setTimeout(() => {
                        toastContainer.removeChild(toast);
                    }, 300);
                }, 3000);
            }
            
            // Mark notification as read
            function markNotificationAsRead(notificationId) {
                fetch(`/api/notifications/${notificationId}/read`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include'
                })
                .then(() => {
                    // Update unread count
                    if (unreadCount > 0) {
                        unreadCount--;
                        updateNotificationBadge();
                    }
            })
            .catch(error => {
                console.error('Error marking notification as read:', error);
            });
        }
        
        // Mark all notifications as read
        function markAllNotificationsAsRead() {
            fetch('/api/notifications/mark-all-read', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                    },
                    credentials: 'include'
                })
                .then(() => {
                    // Update UI - hide all notifications and update badge
                    const notificationItems = notificationsContainer.querySelectorAll('.notification-item');
                    notificationItems.forEach(item => item.remove());
                    
                    if (notificationEmpty) {
                        notificationEmpty.classList.remove('hidden');
                    }
                    
                    unreadCount = 0;
                    updateNotificationBadge();
                    
                    // Show toast message
                    showToast('All notifications marked as read');
            })
            .catch(error => {
                console.error('Error marking all notifications as read:', error);
            });
        }
        
            // Initialize
            fetchUnreadCount();
            
            // Poll for notifications more frequently (every 10 seconds)
            setInterval(fetchUnreadCount, 10000);

            // Initialize socket for real-time notifications
            const socket = io();
            
            // Send authentication when connected
            socket.on('connect', function() {
                console.log('Socket connected');
                
                /* eslint-disable */
                <% if (locals.user && locals.user._id) { %>
                // Authenticate with user ID
                socket.auth = { userId: '<%= locals.user._id %>' };
                socket.emit('authenticate', '<%= locals.user._id %>');
                // Join user-specific room for notifications
                socket.emit('joinRoom', 'user:<%= locals.user._id %>');
                <% } %>
                /* eslint-enable */
            });
            
            // Listen for real-time notifications
            socket.on('new_notification', function(notification) {
                console.log('New notification received:', notification);
                
                // Update unread count
                unreadCount++;
                updateNotificationBadge();
                
                // Show toast notification with customized message based on type
                let toastMessage = notification.message || 'New notification';
                let toastType = 'info';
                
                // Customize toast by notification type
                if (notification.type === 'like' || notification.type === 'comment_like' || notification.type === 'reply_like') {
                    toastType = 'like';
                    toastMessage = notification.message || 'Someone liked your content';
                } else if (notification.type === 'comment' || notification.type === 'reply') {
                    toastType = 'comment';
                    toastMessage = notification.message || 'Someone commented on your content';
                } else if (notification.type === 'follow' || notification.type === 'follow_request') {
                    toastType = 'follow';
                    toastMessage = notification.message || 'New follower activity';
                } else if (notification.type === 'new_post') {
                    toastType = 'post';
                    toastMessage = notification.message || 'New post from someone you follow';
                }
                
                showToast(toastMessage, toastType);
                
                // If notification panel is open, add the new notification at the top
                if (isNotificationPanelOpen && notificationsContainer) {
                    // Remove empty state if present
                    if (notificationEmpty && !notificationEmpty.classList.contains('hidden')) {
                        notificationEmpty.classList.add('hidden');
                    }
                    
                    // Render the new notification at the top
                    renderNotification(notification);
                    
                    // Move it to the top of the container
                    const newNotificationElement = notificationsContainer.lastChild;
                    if (newNotificationElement) {
                        notificationsContainer.insertBefore(newNotificationElement, notificationsContainer.firstChild);
                        
                        // Add highlight animation
                        newNotificationElement.classList.add('bg-blue-50', 'dark:bg-blue-900/20');
                        setTimeout(() => {
                            newNotificationElement.classList.remove('bg-blue-50', 'dark:bg-blue-900/20');
                        }, 3000);
                    }
                }
            });
        });
    </script>
</body>
</html> 

