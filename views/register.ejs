<%- include('partials/header') %>

<div class="min-h-screen flex items-center justify-center bg-gray-100 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                Create your account
            </h2>
            <p class="mt-2 text-center text-sm text-gray-600">
                Or
                <a href="/login" class="font-medium text-blue-600 hover:text-blue-500">
                    sign in to your account
                </a>
            </p>
        </div>
        
        <% if (locals.error) { %>
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                <span class="block sm:inline"><%= error %></span>
            </div>
        <% } %>
        
        <div id="toast" class="fixed top-4 right-4 max-w-xs bg-red-500 text-white px-4 py-3 rounded shadow-lg transform transition-all duration-500 opacity-0 translate-y-8 pointer-events-none" role="alert">
            <div class="flex items-center">
                <div class="py-1"><svg class="fill-current h-6 w-6 text-white mr-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z"/></svg></div>
                <div id="toastMessage"></div>
            </div>
        </div>
        
        <!-- Step 1: Enter enrollment number and request OTP -->
        <div id="step1" class="mt-8 space-y-6">
            <div class="rounded-md shadow-sm">
                <div>
                    <label for="enrollment_number" class="block text-sm font-medium text-gray-700 mb-1">Enrollment Number</label>
                    <input id="enrollment_number" name="enrollment_number" type="text" required 
                           class="appearance-none rounded-md relative block w-full px-3 py-2 border
                                  border-gray-300 placeholder-gray-500 text-gray-900
                                  focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                           placeholder="e.g. 021323001">
                    <p id="enrollmentError" class="mt-1 hidden text-xs text-red-600"></p>
                </div>
            </div>
            <div>
                <button id="requestOtpBtn" type="button" 
                        class="group relative w-full flex justify-center py-2 px-4 border border-transparent
                               text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700
                               focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Request OTP
                </button>
            </div>
        </div>
        
        <!-- Step 2: Enter OTP -->
        <div id="step2" class="mt-8 space-y-6 hidden">
            <div class="rounded-md shadow-sm">
                <div>
                    <label for="otp" class="block text-sm font-medium text-gray-700 mb-1">Enter OTP sent to <span id="maskedEmail" class="font-medium text-blue-600"></span></label>
                    <div class="flex space-x-2 justify-center">
                        <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center text-2xl border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center text-2xl border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center text-2xl border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center text-2xl border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center text-2xl border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center text-2xl border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                    <p id="otpError" class="mt-1 hidden text-xs text-red-600"></p>
                    <p class="mt-2 text-center text-sm text-gray-600">
                        <span id="countdownTimer" class="font-medium">2:00</span>
                    </p>
                    <p class="mt-2 text-center text-sm text-gray-600">
                        <button id="resendOtp" class="font-medium text-blue-600 hover:text-blue-500 hidden">
                            Resend OTP
                        </button>
                    </p>
                </div>
            </div>
            <div>
                <button id="verifyOtpBtn" type="button" 
                        class="group relative w-full flex justify-center py-2 px-4 border border-transparent
                               text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700
                               focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Verify OTP
                </button>
            </div>
        </div>
        
        <!-- Step 3: Complete Registration -->
        <form id="registerForm" class="mt-8 space-y-6 hidden" action="/register" method="POST" novalidate>
            <input type="hidden" id="verified_enrollment" name="enrollment_number" value="">
            <input type="hidden" id="verified_email" name="verified_email" value="">
            
            <div class="rounded-md shadow-sm -space-y-px">
                <div>
                    <label for="name" class="sr-only">Full Name</label>
                    <input id="name" name="name" type="text" required readonly
                           class="appearance-none rounded-none relative block w-full px-3 py-2 border
                                  border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md
                                  focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                           placeholder="Full Name">
                    <p id="nameError" class="mt-1 hidden text-xs text-red-600"></p>
                </div>
                <div>
                    <label for="username" class="sr-only">Username</label>
                    <input id="username" name="username" type="text" required 
                           class="appearance-none rounded-none relative block w-full px-3 py-2 border
                                  border-gray-300 placeholder-gray-500 text-gray-900
                                  focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                           placeholder="Username">
                    <p id="usernameError" class="mt-1 hidden text-xs text-red-600"></p>
                </div>
                <div>
                    <label for="email" class="sr-only">Email address</label>
                    <input id="email" name="email" type="email" required readonly
                           class="appearance-none rounded-none relative block w-full px-3 py-2 border
                                  border-gray-300 placeholder-gray-500 text-gray-900
                                  focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                           placeholder="Email address">
                    <p id="emailError" class="mt-1 hidden text-xs text-red-600"></p>
                </div>
                <div>
                    <label for="password" class="sr-only">Password</label>
                    <input id="password" name="password" type="password" required 
                           class="appearance-none rounded-none relative block w-full px-3 py-2 border
                                  border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md
                                  focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                           placeholder="Password">
                    <p id="passwordError" class="mt-1 hidden text-xs text-red-600"></p>
                </div>
            </div>

            <div class="flex items-center">
                <div class="flex items-center">
                    <div class="text-sm w-full">
                        <p class="font-medium text-gray-700">Password requirements:</p>
                        <ul class="list-none pl-0 text-xs mt-2 space-y-2">
                            <li id="length-check" class="flex items-center text-red-500">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                                At least 8 characters long
                            </li>
                            <li id="uppercase-check" class="flex items-center text-red-500">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                                Include at least one uppercase letter
                            </li>
                            <li id="special-check" class="flex items-center text-red-500">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                                Include at least one special character
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

            <div>
                <button type="submit" 
                        class="group relative w-full flex justify-center py-2 px-4 border border-transparent
                               text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700
                               focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Register
                </button>
            </div>
            
            <div class="relative">
                <div class="absolute inset-0 flex items-center">
                    <div class="w-full border-t border-gray-300"></div>
                </div>
                <div class="relative flex justify-center text-sm">
                    <span class="px-2 bg-gray-100 text-gray-500">Or continue with</span>
                </div>
            </div>
            
            <div>
                <button type="button" 
                       class="w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm
                              bg-white text-sm font-medium text-gray-400 cursor-not-allowed opacity-70"
                       disabled>
                    <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4"/>
                        <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853"/>
                        <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05"/>
                        <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335"/>
                    </svg>
                    Sign up with Google (Currently Disabled)
                </button>
            </div>
        </form>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const step1 = document.getElementById('step1');
    const step2 = document.getElementById('step2');
    const registerForm = document.getElementById('registerForm');
    const requestOtpBtn = document.getElementById('requestOtpBtn');
    const verifyOtpBtn = document.getElementById('verifyOtpBtn');
    const resendOtpBtn = document.getElementById('resendOtp');
    const enrollmentInput = document.getElementById('enrollment_number');
    const enrollmentError = document.getElementById('enrollmentError');
    const otpError = document.getElementById('otpError');
    const countdownTimer = document.getElementById('countdownTimer');
    const maskedEmail = document.getElementById('maskedEmail');
    const verifiedEnrollment = document.getElementById('verified_enrollment');
    const verifiedEmail = document.getElementById('verified_email');
    const otpInputs = document.querySelectorAll('.otp-input');
    
    // Variables for the registration form elements
    const nameInput = document.getElementById('name');
    const username = document.getElementById('username');
    const email = document.getElementById('email');
    const password = document.getElementById('password');
    const nameError = document.getElementById('nameError');
    const usernameError = document.getElementById('usernameError');
    const emailError = document.getElementById('emailError');
    const passwordError = document.getElementById('passwordError');
    
    // Student data for autofill
    let studentData = null;
    
    // OTP countdown timer variables
    let countdownInterval;
    let timeLeft = 120; // 2 minutes
    
    // Password validation elements
    const lengthCheck = document.getElementById('length-check');
    const uppercaseCheck = document.getElementById('uppercase-check');
    const specialCheck = document.getElementById('special-check');
    
    // Handle OTP input navigation
    otpInputs.forEach((input, index) => {
        input.addEventListener('keyup', function(e) {
            // If the input has a value, move to the next input
            if (this.value.length === 1) {
                if (index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
            }
            
            // If backspace is pressed and the input is empty, focus on the previous input
            if (e.key === 'Backspace' && this.value.length === 0) {
                if (index > 0) {
                    otpInputs[index - 1].focus();
                }
            }
        });
    });
    
    // Check URL parameters for error messages
    const urlParams = new URLSearchParams(window.location.search);
    const errorParam = urlParams.get('error');
    
    if (errorParam) {
        let errorMessage = '';
        
        switch(errorParam) {
            case 'username_taken':
                errorMessage = 'Username is already taken. Please choose a different username.';
                break;
            case 'email_taken':
                errorMessage = 'Email is already registered. Please use a different email or login.';
                break;
            case 'enrollment_taken':
                errorMessage = 'This enrollment number is already registered. Please login instead.';
                break;
            case 'invalid_enrollment':
                errorMessage = 'Invalid enrollment number. Only university students can register.';
                break;
            case 'otp_expired':
                errorMessage = 'OTP has expired. Please request a new one.';
                break;
            case 'invalid_otp':
                errorMessage = 'Invalid OTP. Please try again.';
                break;
            case 'not_verified':
                errorMessage = 'Your enrollment is not verified. Please complete the verification process.';
                break;
            case 'registration_failed':
                errorMessage = 'Registration failed. Please try again.';
                break;
            default:
                errorMessage = 'An error occurred. Please try again.';
        }
        
        showToast(errorMessage);
    }
    
    // Function to mask email for privacy
    function maskEmail(email) {
        if (!email) return '';
        
        const parts = email.split('@');
        if (parts.length !== 2) return email;
        
        const username = parts[0];
        const domain = parts[1];
        
        // If username is too short, don't mask
        if (username.length <= 2) return email;
        
        const firstChar = username.charAt(0);
        const lastChar = username.charAt(username.length - 1);
        const asterisks = '*'.repeat(username.length - 2);
        
        return `${firstChar}${asterisks}${lastChar}@${domain}`;
    }
    
    // Function to show toast
    function showToast(message, type = 'error') {
        const toast = document.getElementById('toast');
        const toastMessage = document.getElementById('toastMessage');
        
        // Set message
        toastMessage.textContent = message;
        
        // Set toast type (color)
        if (type === 'error') {
            toast.classList.remove('bg-green-500');
            toast.classList.add('bg-red-500');
        } else {
            toast.classList.remove('bg-red-500');
            toast.classList.add('bg-green-500');
        }
        
        // Show toast
        toast.classList.remove('opacity-0', 'translate-y-8');
        toast.classList.add('opacity-100', 'translate-y-0');
        
        // Hide toast after 5 seconds
        setTimeout(() => {
            toast.classList.remove('opacity-100', 'translate-y-0');
            toast.classList.add('opacity-0', 'translate-y-8');
        }, 5000);
    }
    
    // Function to start countdown timer
    function startCountdownTimer() {
        timeLeft = 120; // 2 minutes
        
        clearInterval(countdownInterval);
        
        countdownInterval = setInterval(() => {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            
            countdownTimer.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
            
            if (timeLeft <= 0) {
                clearInterval(countdownInterval);
                countdownTimer.textContent = '0:00';
                resendOtpBtn.classList.remove('hidden');
            }
            
            timeLeft--;
        }, 1000);
    }
    
    // Request OTP
    requestOtpBtn.addEventListener('click', async function() {
        const enrollment_number = enrollmentInput.value.trim();
        
        if (!enrollment_number) {
            enrollmentError.textContent = 'Please enter your enrollment number.';
            enrollmentError.classList.remove('hidden');
            return;
        }
        
        enrollmentError.classList.add('hidden');
        
        try {
            requestOtpBtn.disabled = true;
            requestOtpBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Sending OTP...';
            
            const response = await fetch('/verify/request-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ enrollment_number })
            });
            
            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error);
            }
            
            // Save student data for later use
            if (data.student) {
                studentData = data.student;
            }
            
            // Set masked email
            maskedEmail.textContent = maskEmail(data.student_email);
            
            // Hide step 1, show step 2
            step1.classList.add('hidden');
            step2.classList.remove('hidden');
            
            // Set verified enrollment in hidden input
            verifiedEnrollment.value = enrollment_number;
            
            // Start countdown timer
            startCountdownTimer();
            
            // In development mode, show the OTP
            if (data.dev_otp) {
                showToast(`Development OTP: ${data.dev_otp}`, 'success');
            } else {
                showToast('OTP sent to your registered email address', 'success');
            }
            
            // Focus on first OTP input
            otpInputs[0].focus();
        } catch (error) {
            enrollmentError.textContent = error.message;
            enrollmentError.classList.remove('hidden');
        } finally {
            requestOtpBtn.disabled = false;
            requestOtpBtn.textContent = 'Request OTP';
        }
    });
    
    // Resend OTP
    resendOtpBtn.addEventListener('click', async function() {
        const enrollment_number = verifiedEnrollment.value;
        
        try {
            resendOtpBtn.disabled = true;
            resendOtpBtn.textContent = 'Sending...';
            
            const response = await fetch('/verify/request-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ enrollment_number })
            });
            
            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error);
            }
            
            // Reset OTP inputs
            otpInputs.forEach(input => input.value = '');
            
            // Start countdown timer
            startCountdownTimer();
            
            // Hide resend button
            resendOtpBtn.classList.add('hidden');
            
            // In development mode, show the OTP
            if (data.dev_otp) {
                showToast(`Development OTP: ${data.dev_otp}`, 'success');
            } else {
                showToast('OTP resent to your registered email address', 'success');
            }
            
            // Focus on first OTP input
            otpInputs[0].focus();
        } catch (error) {
            otpError.textContent = error.message;
            otpError.classList.remove('hidden');
        } finally {
            resendOtpBtn.disabled = false;
            resendOtpBtn.textContent = 'Resend OTP';
        }
    });
    
    // Verify OTP
    verifyOtpBtn.addEventListener('click', async function() {
        const enrollment_number = verifiedEnrollment.value;
        
        // Collect OTP from inputs
        const otp = Array.from(otpInputs).map(input => input.value).join('');
        
        if (otp.length !== 6) {
            otpError.textContent = 'Please enter a valid 6-digit OTP.';
            otpError.classList.remove('hidden');
            return;
        }
        
        otpError.classList.add('hidden');
        
        try {
            verifyOtpBtn.disabled = true;
            verifyOtpBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Verifying...';
            
            const response = await fetch('/verify/verify-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ enrollment_number, otp })
            });
            
            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error);
            }
            
            // Stop countdown timer
            clearInterval(countdownInterval);
            
            // Hide step 2, show registration form
            step2.classList.add('hidden');
            registerForm.classList.remove('hidden');
            
            // Auto-fill name and email if available
            if (data.student) {
                nameInput.value = data.student.name;
                email.value = data.student.email;
                verifiedEmail.value = data.student.email;
                
                // Suggest a username based on name (first name + random numbers)
                const firstName = data.student.name.split(' ')[0].toLowerCase();
                const randomNum = Math.floor(1000 + Math.random() * 9000);
                username.value = `${firstName}${randomNum}`;
            }
            
            showToast('OTP verified successfully!', 'success');
        } catch (error) {
            otpError.textContent = error.message;
            otpError.classList.remove('hidden');
        } finally {
            verifyOtpBtn.disabled = false;
            verifyOtpBtn.textContent = 'Verify OTP';
        }
    });
    
    // Form validation before submission
    registerForm.addEventListener('submit', function(e) {
        let isValid = true;
        
        // Reset error messages
        nameError.classList.add('hidden');
        usernameError.classList.add('hidden');
        emailError.classList.add('hidden');
        passwordError.classList.add('hidden');
        
        // Validate username
        if (!username.value) {
            usernameError.textContent = 'Username is required.';
            usernameError.classList.remove('hidden');
            isValid = false;
        } else if (username.value.length < 3) {
            usernameError.textContent = 'Username must be at least 3 characters.';
            usernameError.classList.remove('hidden');
            isValid = false;
        }
        
        // Validate password requirements
        const passwordValue = password.value;
        let passwordValid = true;
        
        if (!passwordValue) {
            passwordError.textContent = 'Password is required.';
            passwordError.classList.remove('hidden');
            isValid = false;
            passwordValid = false;
        } else {
            // Check all password requirements
            if (passwordValue.length < 8) {
                passwordValid = false;
            }
            if (!/[A-Z]/.test(passwordValue)) {
                passwordValid = false;
            }
            if (!/[!@#$%^&*(),.?":{}|<>]/.test(passwordValue)) {
                passwordValid = false;
            }
            
            if (!passwordValid) {
                passwordError.textContent = 'Please meet all password requirements.';
                passwordError.classList.remove('hidden');
                isValid = false;
            }
        }
        
        if (!isValid) {
            e.preventDefault();
        }
    });
    
    // Function to validate password in real-time
    function validatePassword() {
        const passwordValue = password.value;
        
        // Check length (at least 8 characters)
        if (passwordValue.length >= 8) {
            lengthCheck.classList.remove('text-red-500');
            lengthCheck.classList.add('text-green-500');
            lengthCheck.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                At least 8 characters long
            `;
        } else {
            lengthCheck.classList.remove('text-green-500');
            lengthCheck.classList.add('text-red-500');
            lengthCheck.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
                At least 8 characters long
            `;
        }
        
        // Check for uppercase letter
        if (/[A-Z]/.test(passwordValue)) {
            uppercaseCheck.classList.remove('text-red-500');
            uppercaseCheck.classList.add('text-green-500');
            uppercaseCheck.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                Include at least one uppercase letter
            `;
        } else {
            uppercaseCheck.classList.remove('text-green-500');
            uppercaseCheck.classList.add('text-red-500');
            uppercaseCheck.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
                Include at least one uppercase letter
            `;
        }
        
        // Check for special character
        if (/[!@#$%^&*(),.?":{}|<>]/.test(passwordValue)) {
            specialCheck.classList.remove('text-red-500');
            specialCheck.classList.add('text-green-500');
            specialCheck.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                Include at least one special character
            `;
        } else {
            specialCheck.classList.remove('text-green-500');
            specialCheck.classList.add('text-red-500');
            specialCheck.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
                Include at least one special character
            `;
        }
    }
    
    // Add event listener for password input
    if (password) {
        password.addEventListener('input', validatePassword);
    }
});
</script>

</body>
</html>
