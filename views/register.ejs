<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <link rel="icon" type="image/svg+xml" href="/placeholder/JccBUZZ logo.svg">
    <link rel="shortcut icon" href="/placeholder/JccBUZZ logo.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/placeholder/JccBUZZ logo.svg">
    <!-- Font -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <title>Register</title>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
        
        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .animate-fade-in {
            animation: fadeIn 0.6s ease-out forwards;
        }
        
        /* Logo styling */
        .logo-image {
            height: 38px;
            width: auto;
            object-fit: contain;
            filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
            transition: all 0.3s ease;
        }
        
        .logo-image:hover {
            transform: scale(1.05);
            filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
        }
        
        /* Decorative rings */
        .decor-ring {
            position: absolute;
            border-radius: 50%;
            opacity: 0.6;
            z-index: 0;
        }
        
        /* Button hover effects */
        .btn-primary {
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            z-index: 1;
        }
        
        .btn-primary:before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: all 0.6s ease;
            z-index: -1;
        }
        
        .btn-primary:hover:before {
            left: 100%;
        }
        
        .otp-input {
            transition: all 0.3s ease;
        }
        
        .otp-input:focus {
            transform: scale(1.05);
        }
        
        /* Mobile responsiveness improvements */
        @media (max-width: 640px) {
            /* Navbar adjustments */
            header .h-16 {
                height: auto;
                padding: 8px 0;
            }
            
            header img.h-40 {
                height: 2.5rem; 
                margin-top: 0;
            }
            
            /* Better auth buttons on mobile */
            header .flex.items-center.space-x-4 {
                gap: 8px;
            }
            
            header .btn-primary {
                padding: 8px 12px;
                font-size: 14px;
                white-space: nowrap;
                border-radius: 6px;
            }
            
            /* Registration form adjustments */
            .max-w-md {
                width: 92%;
                padding: 16px;
                margin-top: 20px;
                margin-bottom: 20px;
            }
            
            /* Input padding adjustments */
            input[type="text"], 
            input[type="password"],
            input[type="email"] {
                padding-top: 10px;
                padding-bottom: 10px;
            }
            
            /* OTP input adjustments */
            .otp-input {
                width: 40px;
                height: 40px;
                font-size: 18px;
            }
            
            /* Submit buttons improvements */
            button[type="button"],
            button[type="submit"] {
                padding-top: 10px;
                padding-bottom: 10px;
                margin-top: 8px;
            }
            
            /* Registration steps spacing */
            #step1, #step2, #registerForm {
                margin-top: 16px;
            }
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Simple Navbar -->
    <header class="bg-white shadow py-2">
        <div class="max-w-7xl mx-auto px-6 sm:px-10 lg:px-16">
            <div class="flex justify-between items-center h-16">
                <!-- Left: Logo -->
                <div class="flex-shrink-0">
                    <a href="/" class="flex items-center">
                        <img class="h-40 mt-3 object-contain filter drop-shadow-md max-w-full transform transition hover:scale-105 duration-300" src="/placeholder/JccBUZZ_logo-removebg-preview.png" alt="JCCbuzz Logo">
                    </a>
                </div>
                
                <!-- Right: Auth Links -->
                <div class="flex items-center space-x-4">
                    <a href="/login" class="btn-primary px-4 py-2 border border-transparent text-base font-semibold rounded-lg text-indigo-600 bg-indigo-50 hover:bg-indigo-100 transition-all duration-300 shadow-sm">
                        Sign In
                    </a>
                    <a href="/register" class="btn-primary px-4 py-2 border border-transparent text-base font-semibold rounded-lg text-white bg-indigo-600 hover:bg-indigo-700 transition-all duration-300 shadow-sm">
                        Sign Up
                    </a>
                </div>
            </div>
        </div>
    </header>

    <div class="min-h-screen flex items-center justify-center py-8 px-4 sm:px-6 lg:px-8 relative">
        <!-- Decorative rings -->
        <div class="decor-ring w-32 h-32 bg-purple-400 blur-xl -top-10 -left-10"></div>
        <div class="decor-ring w-40 h-40 bg-indigo-300 blur-xl bottom-40 -right-10"></div>
        <div class="decor-ring w-24 h-24 bg-blue-300 blur-xl top-40 right-1/4"></div>
        
        <div class="max-w-md w-full space-y-6 bg-white p-8 rounded-xl shadow-lg relative z-10 animate-fade-in my-8">
            <div>
                <h2 class="mt-2 text-center text-3xl font-extrabold text-gray-900">
                    Create your account
                </h2>
                <p class="mt-2 text-center text-sm text-gray-600">
                    Or
                    <a href="/login" class="font-medium text-indigo-600 hover:text-indigo-500">
                        sign in to your account
                    </a>
                </p>
            </div>
            
            <% if (locals.error) { %>
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                    <span class="block sm:inline"><%= error %></span>
                </div>
            <% } %>
            
            <div id="toast" class="fixed top-4 right-4 max-w-xs bg-red-500 text-white px-4 py-3 rounded shadow-lg transform transition-all duration-500 opacity-0 translate-y-8 pointer-events-none" role="alert">
                <div class="flex items-center">
                    <div class="py-1"><svg class="fill-current h-6 w-6 text-white mr-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z"/></svg></div>
                    <div id="toastMessage"></div>
                </div>
            </div>
            
            <!-- Step 1: Enter enrollment number and request OTP -->
            <div id="step1" class="mt-6 space-y-6">
                <div class="rounded-md shadow-sm">
                    <div>
                        <label for="enrollment_number" class="block text-sm font-medium text-gray-700 mb-1">Enrollment Number</label>
                        <input id="enrollment_number" name="enrollment_number" type="text" required 
                                class="appearance-none rounded-md relative block w-full px-3 py-3 border
                                      border-gray-300 placeholder-gray-500 text-gray-900
                                      focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="e.g. 021323001">
                        <p id="enrollmentError" class="mt-1 hidden text-xs text-red-600"></p>
                    </div>
                </div>
                <div>
                    <button id="requestOtpBtn" type="button" 
                            class="btn-primary group relative w-full flex justify-center py-3 px-4 border border-transparent
                                    text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700
                                    focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow-md">
                        Request OTP
                    </button>
                </div>
            </div>
            
            <!-- Step 2: Enter OTP -->
            <div id="step2" class="mt-6 space-y-6 hidden">
                <div class="rounded-md shadow-sm">
                    <div>
                        <label for="otp" class="block text-sm font-medium text-gray-700 mb-2">Enter OTP sent to <span id="maskedEmail" class="font-medium text-indigo-600"></span></label>
                        <div class="flex space-x-2 justify-center">
                            <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center text-2xl border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                            <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center text-2xl border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                            <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center text-2xl border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                            <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center text-2xl border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                            <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center text-2xl border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                            <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center text-2xl border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                        </div>
                        <p id="otpError" class="mt-1 hidden text-xs text-red-600"></p>
                        <p class="mt-2 text-center text-sm text-gray-600">
                            <span id="countdownTimer" class="font-medium">2:00</span>
                        </p>
                        <p class="mt-2 text-center text-sm text-gray-600">
                            <button id="resendOtp" class="font-medium text-indigo-600 hover:text-indigo-500 hidden">
                                Resend OTP
                            </button>
                        </p>
                    </div>
                </div>
                <div>
                    <button id="verifyOtpBtn" type="button" 
                            class="btn-primary group relative w-full flex justify-center py-3 px-4 border border-transparent
                                    text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700
                                    focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow-md">
                        Verify OTP
                    </button>
                </div>
            </div>
            
            <!-- Step 3: Complete Registration -->
            <form id="registerForm" class="mt-6 space-y-6 hidden" action="/register" method="POST" novalidate>
                <input type="hidden" id="verified_enrollment" name="enrollment_number" value="">
                <input type="hidden" id="verified_email" name="verified_email" value="">
                
                <div class="space-y-4">
                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                        <input id="name" name="name" type="text" required readonly
                                class="appearance-none rounded-md relative block w-full px-3 py-3 border
                                      border-gray-300 placeholder-gray-500 text-gray-900
                                      focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="Full Name">
                        <p id="nameError" class="mt-1 hidden text-xs text-red-600"></p>
                    </div>
                    <div>
                        <label for="username" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
                        <input id="username" name="username" type="text" required 
                                class="appearance-none rounded-md relative block w-full px-3 py-3 border
                                      border-gray-300 placeholder-gray-500 text-gray-900
                                      focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="Username">
                        <p id="usernameError" class="mt-1 hidden text-xs text-red-600"></p>
                    </div>
                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email address</label>
                        <input id="email" name="email" type="email" required readonly
                                class="appearance-none rounded-md relative block w-full px-3 py-3 border
                                      border-gray-300 placeholder-gray-500 text-gray-900
                                      focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="Email address">
                        <p id="emailError" class="mt-1 hidden text-xs text-red-600"></p>
                    </div>
                    <div>
                        <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                        <input id="password" name="password" type="password" required 
                                class="appearance-none rounded-md relative block w-full px-3 py-3 border
                                      border-gray-300 placeholder-gray-500 text-gray-900
                                      focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="Password">
                        <p id="passwordError" class="mt-1 hidden text-xs text-red-600"></p>
                    </div>
                </div>
    
                <div class="flex items-center">
                    <div class="flex items-center">
                        <div class="text-sm w-full">
                            <p class="font-medium text-gray-700">Password requirements:</p>
                            <ul class="list-none pl-0 text-xs mt-2 space-y-2">
                                <li id="length-check" class="flex items-center text-red-500">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                    At least 8 characters long
                                </li>
                                <li id="uppercase-check" class="flex items-center text-red-500">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                    Include at least one uppercase letter
                                </li>
                                <li id="special-check" class="flex items-center text-red-500">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                    Include at least one special character
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
    
                <div>
                    <button type="submit" 
                            class="btn-primary group relative w-full flex justify-center py-3 px-4 border border-transparent
                                    text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700
                                    focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow-md">
                        Register
                    </button>
                </div>
            </form>
        </div>
    </div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const step1 = document.getElementById('step1');
    const step2 = document.getElementById('step2');
    const registerForm = document.getElementById('registerForm');
    const requestOtpBtn = document.getElementById('requestOtpBtn');
    const verifyOtpBtn = document.getElementById('verifyOtpBtn');
    const resendOtpBtn = document.getElementById('resendOtp');
    const enrollmentInput = document.getElementById('enrollment_number');
    const enrollmentError = document.getElementById('enrollmentError');
    const otpError = document.getElementById('otpError');
    const countdownTimer = document.getElementById('countdownTimer');
    const maskedEmail = document.getElementById('maskedEmail');
    const verifiedEnrollment = document.getElementById('verified_enrollment');
    const verifiedEmail = document.getElementById('verified_email');
    const otpInputs = document.querySelectorAll('.otp-input');
    
    // Variables for the registration form elements
    const nameInput = document.getElementById('name');
    const username = document.getElementById('username');
    const email = document.getElementById('email');
    const password = document.getElementById('password');
    const nameError = document.getElementById('nameError');
    const usernameError = document.getElementById('usernameError');
    const emailError = document.getElementById('emailError');
    const passwordError = document.getElementById('passwordError');
    
    // Student data for autofill
    let studentData = null;
    
    // OTP countdown timer variables
    let countdownInterval;
    let timeLeft = 120; // 2 minutes
    
    // Password validation elements
    const lengthCheck = document.getElementById('length-check');
    const uppercaseCheck = document.getElementById('uppercase-check');
    const specialCheck = document.getElementById('special-check');
    
    // Handle OTP input navigation
    otpInputs.forEach((input, index) => {
        input.addEventListener('keyup', function(e) {
            // If the input has a value, move to the next input
            if (this.value.length === 1) {
                if (index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
            }
            
            // If backspace is pressed and the input is empty, focus on the previous input
            if (e.key === 'Backspace' && this.value.length === 0) {
                if (index > 0) {
                    otpInputs[index - 1].focus();
                }
            }
        });
    });
    
    // Check URL parameters for error messages
    const urlParams = new URLSearchParams(window.location.search);
    const errorParam = urlParams.get('error');
    
    if (errorParam) {
        let errorMessage = '';
        
        switch(errorParam) {
            case 'username_taken':
                errorMessage = 'Username is already taken. Please choose a different username.';
                break;
            case 'email_taken':
                errorMessage = 'Email is already registered. Please use a different email or login.';
                break;
            case 'enrollment_taken':
                errorMessage = 'This enrollment number is already registered. Please login instead.';
                break;
            case 'invalid_enrollment':
                errorMessage = 'Invalid enrollment number. Only university students can register.';
                break;
            case 'otp_expired':
                errorMessage = 'OTP has expired. Please request a new one.';
                break;
            case 'invalid_otp':
                errorMessage = 'Invalid OTP. Please try again.';
                break;
            case 'not_verified':
                errorMessage = 'Your enrollment is not verified. Please complete the verification process.';
                break;
            case 'registration_failed':
                errorMessage = 'Registration failed. Please try again.';
                break;
            default:
                errorMessage = 'An error occurred. Please try again.';
        }
        
        showToast(errorMessage);
    }
    
    // Function to mask email for privacy
    function maskEmail(email) {
        if (!email) return '';
        
        const parts = email.split('@');
        if (parts.length !== 2) return email;
        
        const username = parts[0];
        const domain = parts[1];
        
        // If username is too short, don't mask
        if (username.length <= 2) return email;
        
        const firstChar = username.charAt(0);
        const lastChar = username.charAt(username.length - 1);
        const asterisks = '*'.repeat(username.length - 2);
        
        return `${firstChar}${asterisks}${lastChar}@${domain}`;
    }
    
    // Function to show toast
    function showToast(message, type = 'error') {
        let toast = document.getElementById('toast');
        if (!toast) {
            toast = document.createElement('div');
            toast.id = 'toast';
            document.body.appendChild(toast);
        }
        
        toast.innerHTML = message;
        toast.classList.add('show');
        
        // Always use the blue-purple gradient theme
        toast.style.background = 'linear-gradient(45deg, #3b82f6, #8b5cf6)';
        
        // Add common styles
        toast.style.color = 'white';
        toast.style.borderRadius = '8px';
        toast.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
        toast.style.padding = '12px 24px';
        
        setTimeout(() => {
            toast.classList.remove('show');
        }, 3000);
    }
    
    // Function to start countdown timer
    function startCountdownTimer() {
        timeLeft = 120; // 2 minutes
        
        clearInterval(countdownInterval);
        
        countdownInterval = setInterval(() => {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            
            countdownTimer.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
            
            if (timeLeft <= 0) {
                clearInterval(countdownInterval);
                countdownTimer.textContent = '0:00';
                resendOtpBtn.classList.remove('hidden');
            }
            
            timeLeft--;
        }, 1000);
    }
    
    // Request OTP
    requestOtpBtn.addEventListener('click', async function() {
        const enrollment_number = enrollmentInput.value.trim();
        
        if (!enrollment_number) {
            enrollmentError.textContent = 'Please enter your enrollment number.';
            enrollmentError.classList.remove('hidden');
            return;
        }
        
        enrollmentError.classList.add('hidden');
        
        try {
            requestOtpBtn.disabled = true;
            requestOtpBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Sending OTP...';
            
            const response = await fetch('/verify/request-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ enrollment_number })
            });
            
            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error);
            }
            
            // Save student data for later use
            if (data.student) {
                studentData = data.student;
            }
            
            // Set masked email
            maskedEmail.textContent = maskEmail(data.student_email);
            
            // Hide step 1, show step 2
            step1.classList.add('hidden');
            step2.classList.remove('hidden');
            
            // Set verified enrollment in hidden input
            verifiedEnrollment.value = enrollment_number;
            
            // Start countdown timer
            startCountdownTimer();
            
            // In development mode, show the OTP
            if (data.dev_otp) {
                showToast(`Development OTP: ${data.dev_otp}`, 'success');
            } else {
                showToast('OTP sent to your registered email address', 'success');
            }
            
            // Focus on first OTP input
            otpInputs[0].focus();
        } catch (error) {
            enrollmentError.textContent = error.message;
            enrollmentError.classList.remove('hidden');
        } finally {
            requestOtpBtn.disabled = false;
            requestOtpBtn.textContent = 'Request OTP';
        }
    });
    
    // Resend OTP
    resendOtpBtn.addEventListener('click', async function() {
        const enrollment_number = verifiedEnrollment.value;
        
        try {
            resendOtpBtn.disabled = true;
            resendOtpBtn.textContent = 'Sending...';
            
            const response = await fetch('/verify/request-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ enrollment_number })
            });
            
            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error);
            }
            
            // Reset OTP inputs
            otpInputs.forEach(input => input.value = '');
            
            // Start countdown timer
            startCountdownTimer();
            
            // Hide resend button
            resendOtpBtn.classList.add('hidden');
            
            // In development mode, show the OTP
            if (data.dev_otp) {
                showToast(`Development OTP: ${data.dev_otp}`, 'success');
            } else {
                showToast('OTP resent to your registered email address', 'success');
            }
            
            // Focus on first OTP input
            otpInputs[0].focus();
        } catch (error) {
            otpError.textContent = error.message;
            otpError.classList.remove('hidden');
        } finally {
            resendOtpBtn.disabled = false;
            resendOtpBtn.textContent = 'Resend OTP';
        }
    });
    
    // Verify OTP
    verifyOtpBtn.addEventListener('click', async function() {
        const enrollment_number = verifiedEnrollment.value;
        
        // Collect OTP from inputs
        const otp = Array.from(otpInputs).map(input => input.value).join('');
        
        if (otp.length !== 6) {
            otpError.textContent = 'Please enter a valid 6-digit OTP.';
            otpError.classList.remove('hidden');
            return;
        }
        
        otpError.classList.add('hidden');
        
        try {
            verifyOtpBtn.disabled = true;
            verifyOtpBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Verifying...';
            
            const response = await fetch('/verify/verify-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ enrollment_number, otp })
            });
            
            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error);
            }
            
            // Stop countdown timer
            clearInterval(countdownInterval);
            
            // Hide step 2, show registration form
            step2.classList.add('hidden');
            registerForm.classList.remove('hidden');
            
            // Auto-fill name and email if available
            if (data.student) {
                nameInput.value = data.student.name;
                email.value = data.student.email;
                verifiedEmail.value = data.student.email;
                
                // Suggest a username based on name (first name + random numbers)
                const firstName = data.student.name.split(' ')[0].toLowerCase();
                const randomNum = Math.floor(1000 + Math.random() * 9000);
                username.value = `${firstName}${randomNum}`;
            }
            
            showToast('OTP verified successfully!', 'success');
        } catch (error) {
            otpError.textContent = error.message;
            otpError.classList.remove('hidden');
        } finally {
            verifyOtpBtn.disabled = false;
            verifyOtpBtn.textContent = 'Verify OTP';
        }
    });
    
    // Form validation before submission
    registerForm.addEventListener('submit', function(e) {
        let isValid = true;
        
        // Reset error messages
        nameError.classList.add('hidden');
        usernameError.classList.add('hidden');
        emailError.classList.add('hidden');
        passwordError.classList.add('hidden');
        
        // Validate username
        if (!username.value) {
            usernameError.textContent = 'Username is required.';
            usernameError.classList.remove('hidden');
            isValid = false;
        } else if (username.value.length < 3) {
            usernameError.textContent = 'Username must be at least 3 characters.';
            usernameError.classList.remove('hidden');
            isValid = false;
        }
        
        // Validate password requirements
        const passwordValue = password.value;
        let passwordValid = true;
        
        if (!passwordValue) {
            passwordError.textContent = 'Password is required.';
            passwordError.classList.remove('hidden');
            isValid = false;
            passwordValid = false;
        } else {
            // Check all password requirements
            if (passwordValue.length < 8) {
                passwordValid = false;
            }
            if (!/[A-Z]/.test(passwordValue)) {
                passwordValid = false;
            }
            if (!/[!@#$%^&*(),.?":{}|<>]/.test(passwordValue)) {
                passwordValid = false;
            }
            
            if (!passwordValid) {
                passwordError.textContent = 'Please meet all password requirements.';
                passwordError.classList.remove('hidden');
                isValid = false;
            }
        }
        
        if (!isValid) {
            e.preventDefault();
        }
    });
    
    // Function to validate password in real-time
    function validatePassword() {
        const passwordValue = password.value;
        
        // Check length (at least 8 characters)
        if (passwordValue.length >= 8) {
            lengthCheck.classList.remove('text-red-500');
            lengthCheck.classList.add('text-green-500');
            lengthCheck.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                At least 8 characters long
            `;
        } else {
            lengthCheck.classList.remove('text-green-500');
            lengthCheck.classList.add('text-red-500');
            lengthCheck.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
                At least 8 characters long
            `;
        }
        
        // Check for uppercase letter
        if (/[A-Z]/.test(passwordValue)) {
            uppercaseCheck.classList.remove('text-red-500');
            uppercaseCheck.classList.add('text-green-500');
            uppercaseCheck.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                Include at least one uppercase letter
            `;
        } else {
            uppercaseCheck.classList.remove('text-green-500');
            uppercaseCheck.classList.add('text-red-500');
            uppercaseCheck.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
                Include at least one uppercase letter
            `;
        }
        
        // Check for special character
        if (/[!@#$%^&*(),.?":{}|<>]/.test(passwordValue)) {
            specialCheck.classList.remove('text-red-500');
            specialCheck.classList.add('text-green-500');
            specialCheck.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                Include at least one special character
            `;
        } else {
            specialCheck.classList.remove('text-green-500');
            specialCheck.classList.add('text-red-500');
            specialCheck.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
                Include at least one special character
            `;
        }
    }
    
    // Add event listener for password input
    if (password) {
        password.addEventListener('input', validatePassword);
    }
});
</script>

</body>
</html>
