<%- include('partials/header2') %>

<div class="min-h-screen bg-white dark:bg-gray-900">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 py-8">
        <div class="flex items-center justify-between mb-6">
            <h1 class="text-2xl sm:text-3xl font-bold bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 bg-clip-text text-transparent flex items-center">
                <i class="fas fa-bell text-blue-500 mr-3"></i>
                Notifications
            </h1>
            <button id="mark-all-read" class="px-4 py-2 bg-gradient-to-r from-blue-500/10 via-indigo-500/10 to-purple-500/10 text-transparent bg-clip-text hover:from-blue-600/20 hover:via-indigo-600/20 hover:to-purple-600/20 rounded-lg transition-colors duration-200 flex items-center text-sm font-medium">
                <span class="bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-500 bg-clip-text text-transparent">
                    <i class="fas fa-check-double mr-2"></i> Mark all as read
                </span>
            </button>
        </div>
        
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-100 dark:border-gray-700 overflow-hidden relative">
            <div class="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-500"></div>
            <!-- Notification Filters -->
            <div class="border-b border-gray-100 dark:border-gray-700 p-4">
                <div class="flex flex-wrap gap-2">
                    <button data-filter="all" class="notification-filter px-4 py-2 bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-600 text-white rounded-lg text-sm font-medium hover:from-blue-600 hover:via-indigo-600 hover:to-purple-700 transition-all shadow-sm">
                        All
                    </button>
                    <button data-filter="unread" class="notification-filter px-4 py-2 bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 rounded-lg text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                        Unread
                    </button>
                    <button data-filter="project" class="notification-filter px-4 py-2 bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 rounded-lg text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                        Projects
                    </button>
                    <button data-filter="social" class="notification-filter px-4 py-2 bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 rounded-lg text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                        Social
                    </button>
                </div>
            </div>
            
            <!-- Notifications List -->
            <div id="notifications-container" class="divide-y divide-gray-100 dark:divide-gray-700 max-h-[70vh] overflow-y-auto custom-scrollbar">
                <% if (notifications.length === 0) { %>
                    <div class="p-10 text-center relative overflow-hidden">
                        <div class="absolute -top-24 -right-24 w-48 h-48 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full blur-3xl opacity-10"></div>
                        <div class="absolute -bottom-24 -left-24 w-48 h-48 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full blur-3xl opacity-10"></div>
                        
                        <div class="w-20 h-20 mx-auto mb-6 bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-500 rounded-full flex items-center justify-center text-white shadow-lg">
                            <i class="fas fa-bell text-xl float-animation"></i>
                        </div>
                        <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-3">No notifications yet</h3>
                        <p class="text-gray-500 dark:text-gray-400 max-w-md mx-auto">When you get notifications, they'll appear here.</p>
                    </div>
                <% } else { %>
                    <% notifications.forEach(notification => { 
                        let notificationClass = notification.read ? '' : 'bg-blue-50 dark:bg-blue-900/10';
                        let iconClass = '';
                        let gradientClass = '';
                        
                        // Determine icon and gradient based on notification type
                        if (notification.type.includes('project_join')) {
                            iconClass = 'fas fa-project-diagram';
                            gradientClass = 'from-purple-500 via-indigo-500 to-purple-600';
                        } else if (notification.type.includes('follow')) {
                            iconClass = 'fas fa-user-plus';
                            gradientClass = 'from-green-500 via-green-400 to-teal-500';
                        } else if (notification.type === 'like') {
                            iconClass = 'fas fa-heart';
                            gradientClass = 'from-red-500 via-pink-500 to-rose-500';
                        } else if (notification.type.includes('comment') || notification.type === 'reply') {
                            iconClass = 'fas fa-comment';
                            gradientClass = 'from-yellow-500 via-amber-500 to-orange-500';
                        } else {
                            iconClass = 'fas fa-bell';
                            gradientClass = 'from-blue-500 via-indigo-500 to-purple-500';
                        }
                        
                        let timeAgo = new Date(notification.createdAt).toLocaleDateString(undefined, {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                        
                        // Determine data-type for filtering
                        let dataType = notification.type.includes('project_join') ? 'project' : 'social';
                    %>
                        <div class="notification-item p-4 <%= notificationClass %> hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors group" data-id="<%= notification._id %>" data-type="<%= dataType %>" data-read="<%= notification.read ? 'true' : 'false' %>">
                            <div class="flex items-start">
                                <div class="flex-shrink-0 mr-4">
                                    <div class="w-10 h-10 rounded-full bg-gradient-to-r <%= gradientClass %> flex items-center justify-center shadow-sm text-white">
                                        <i class="<%= iconClass %> text-lg"></i>
                                    </div>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <div class="flex items-center justify-between mb-1">
                                        <h3 class="text-sm font-semibold text-gray-900 dark:text-white group-hover:text-transparent group-hover:bg-gradient-to-r group-hover:bg-clip-text transition-colors" style="<%= 'background-image: linear-gradient(to right, var(--tw-gradient-stops));' %>" data-gradient="<%= gradientClass %>">
                                            <%= notification.title %>
                                        </h3>
                                        <span class="text-xs text-gray-500 dark:text-gray-400 whitespace-nowrap ml-2"><%= timeAgo %></span>
                                    </div>
                                    <p class="text-sm text-gray-600 dark:text-gray-300 mb-2">
                                        <%= notification.message || notification.displayMessage %>
                                    </p>
                                    <% if (!notification.read) { %>
                                        <button class="mark-read-btn text-xs text-transparent bg-gradient-to-r <%= gradientClass %> bg-clip-text hover:opacity-80 transition-colors">
                                            Mark as read
                                        </button>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% }) %>
                <% } %>
            </div>
        </div>
    </div>
</div>

<style>
    /* Custom scrollbar */
    .custom-scrollbar::-webkit-scrollbar {
        width: 6px;
    }
    
    .custom-scrollbar::-webkit-scrollbar-track {
        background: #f1f1f1;
    }
    
    .custom-scrollbar::-webkit-scrollbar-thumb {
        background: #d1d5db;
        border-radius: 3px;
    }
    
    .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: #9ca3af;
    }
    
    @media (prefers-color-scheme: dark) {
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #1f2937;
        }
        
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #4b5563;
        }
        
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #6b7280;
        }
    }
    
    /* Animation for notifications */
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .notification-item {
        animation: fadeIn 0.3s ease-out;
    }
    
    /* Pulse animation for unread notifications */
    @keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.3);
        }
        70% {
            box-shadow: 0 0 0 6px rgba(59, 130, 246, 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);
        }
    }
    
    .bg-blue-50 {
        animation: pulse 2s infinite;
    }

    /* Float animation for empty state */
    @keyframes float {
        0% {
            transform: translateY(0px);
        }
        50% {
            transform: translateY(-10px);
        }
        100% {
            transform: translateY(0px);
        }
    }

    .float-animation {
        animation: float 3s ease-in-out infinite;
    }

    /* Gradient animations */
    @keyframes gradient-shift {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }

    .bg-gradient-to-r {
        background-size: 200% 200%;
        animation: gradient-shift 15s ease infinite;
    }

    /* Responsive design adjustments */
    @media (max-width: 640px) {
        .notification-item {
            padding: 1rem 0.75rem;
        }

        h1 {
            font-size: 1.5rem;
        }

        #mark-all-read {
            padding: 0.5rem 0.75rem;
            font-size: 0.75rem;
        }

        .notification-filter {
            font-size: 0.75rem;
            padding: 0.375rem 0.75rem;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Filter notifications
        const filterButtons = document.querySelectorAll('.notification-filter');
        const notifications = document.querySelectorAll('.notification-item');
        
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Update active filter button
                filterButtons.forEach(btn => {
                    btn.classList.remove('bg-gradient-to-r', 'from-blue-500', 'via-indigo-500', 'to-purple-600', 'text-white');
                    btn.classList.add('bg-gray-100', 'text-gray-600', 'dark:bg-gray-700', 'dark:text-gray-300');
                });
                this.classList.remove('bg-gray-100', 'text-gray-600', 'dark:bg-gray-700', 'dark:text-gray-300');
                this.classList.add('bg-gradient-to-r', 'from-blue-500', 'via-indigo-500', 'to-purple-600', 'text-white');
                
                const filter = this.getAttribute('data-filter');
                
                notifications.forEach(notification => {
                    if (filter === 'all') {
                        notification.style.display = '';
                    } else if (filter === 'unread') {
                        notification.style.display = notification.getAttribute('data-read') === 'false' ? '' : 'none';
                    } else {
                        notification.style.display = notification.getAttribute('data-type') === filter ? '' : 'none';
                    }
                });
                
                // Show empty state if no visible notifications
                checkEmptyState();
            });
        });
        
        // Mark single notification as read
        const markReadButtons = document.querySelectorAll('.mark-read-btn');
        markReadButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.stopPropagation(); // Don't trigger parent click
                const notificationItem = this.closest('.notification-item');
                const notificationId = notificationItem.getAttribute('data-id');
                
                // Show loading indicator
                const originalText = this.textContent;
                this.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> Marking...';
                this.disabled = true;
                
        fetch(`/api/notifications/${notificationId}/read`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
                    },
                    credentials: 'include'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to mark notification as read');
                    }
                    return response.json();
                })
                .then(() => {
                    // Update UI
                    notificationItem.classList.remove('bg-blue-50', 'dark:bg-blue-900/10');
                    notificationItem.setAttribute('data-read', 'true');
                    this.remove();
                    
                    // Show toast
                    showToast('Notification marked as read');
                })
                .catch(error => {
                    console.error('Error marking notification as read:', error);
                    this.textContent = originalText;
                    this.disabled = false;
                    showToast('Failed to mark notification as read', 'error');
                });
            });
        });
        
        // Make notification items clickable
        notifications.forEach(notification => {
            notification.addEventListener('click', function() {
                const notificationId = this.getAttribute('data-id');
                const isRead = this.getAttribute('data-read') === 'true';
                
                // Only mark as read if it's unread
                if (!isRead) {
                    fetch(`/api/notifications/${notificationId}/read`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include'
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to mark notification as read');
                        }
                        return response.json();
                    })
                    .then(() => {
                        // Update UI
                        this.classList.remove('bg-blue-50', 'dark:bg-blue-900/10');
                        this.setAttribute('data-read', 'true');
                        const markReadBtn = this.querySelector('.mark-read-btn');
                        if (markReadBtn) markReadBtn.remove();
        })
        .catch(error => {
            console.error('Error marking notification as read:', error);
        });
    }
    
                // Navigate based on notification type (optional)
                // You can add navigation logic here if you want notifications to link somewhere
            });
        });
        
        // Mark all notifications as read
        const markAllReadButton = document.getElementById('mark-all-read');
        markAllReadButton.addEventListener('click', function() {
            // Show loading indicator
            const originalText = this.innerHTML;
            this.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> Marking all as read...';
            this.disabled = true;
            
        fetch('/api/notifications/mark-all-read', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
                },
                credentials: 'include'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to mark all notifications as read');
                }
                return response.json();
            })
            .then(() => {
            // Update UI
                notifications.forEach(notification => {
                    notification.classList.remove('bg-blue-50', 'dark:bg-blue-900/10');
                    notification.setAttribute('data-read', 'true');
                    const markReadBtn = notification.querySelector('.mark-read-btn');
                    if (markReadBtn) markReadBtn.remove();
                });
                
                // Reset button
                this.innerHTML = originalText;
                this.disabled = false;
                
                // Show toast
                showToast('All notifications marked as read');
        })
        .catch(error => {
            console.error('Error marking all notifications as read:', error);
                this.innerHTML = originalText;
                this.disabled = false;
                showToast('Failed to mark all notifications as read', 'error');
            });
        });
        
        // Check if there are no visible notifications to show empty state
        function checkEmptyState() {
            const visibleNotifications = Array.from(notifications).filter(notification => 
                notification.style.display !== 'none'
            );
            
            const container = document.getElementById('notifications-container');
            if (visibleNotifications.length === 0) {
                // Create empty state
                container.innerHTML = `
                    <div class="p-10 text-center">
                        <div class="w-16 h-16 bg-blue-50 dark:bg-blue-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
                            <i class="fas fa-bell-slash text-blue-500 text-xl"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">No notifications found</h3>
                        <p class="text-gray-500 dark:text-gray-400">There are no notifications matching the selected filter.</p>
                    </div>
                `;
            }
        }
        
        // Toast notification function
        function showToast(message, type = 'success') {
            // Remove existing toast if present
            const existingToast = document.getElementById('toast');
            if (existingToast) {
                existingToast.remove();
            }
            
            // Create new toast
            const toast = document.createElement('div');
            toast.id = 'toast';
            toast.className = `fixed bottom-4 right-4 px-6 py-3 rounded-lg text-white shadow-lg transform transition-all duration-300 z-50 ${
                type === 'success' ? 'bg-green-500' : 'bg-red-500'
            }`;
            toast.innerHTML = `
                <div class="flex items-center">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} mr-2"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(toast);
            
            // Animate entry
            setTimeout(() => {
                toast.classList.add('translate-y-0', 'opacity-100');
            }, 10);
            
            // Auto-remove after 3 seconds
            setTimeout(() => {
                toast.classList.add('opacity-0', 'translate-y-2');
                setTimeout(() => {
                    if (toast.parentNode) {
                        document.body.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        // Apply gradients to notification titles on hover
        const notificationItems = document.querySelectorAll('.notification-item');
        notificationItems.forEach(item => {
            const titleElement = item.querySelector('h3[data-gradient]');
            if (titleElement) {
                const gradientClass = titleElement.getAttribute('data-gradient');
                
                item.addEventListener('mouseenter', () => {
                    titleElement.classList.add(gradientClass);
                });
                
                item.addEventListener('mouseleave', () => {
                    titleElement.classList.remove(gradientClass);
                });
            }
        });
    });
</script>

<%- include('partials/footer') %> 