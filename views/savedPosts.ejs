<%- include('partials/header2') %>

<div class="min-h-screen bg-white dark:bg-gray-900 pb-12">
    <div class="max-w-4xl mx-auto pt-8 px-4">
        <div class="flex items-center justify-between mb-6">
            <h1 class="text-2xl font-bold text-gray-800 dark:text-white flex items-center">
                <i class="fas fa-bookmark text-blue-500 mr-3"></i>
                <span class="bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">Saved Posts</span>
            </h1>
            <a href="/feed" class="text-gray-600 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400 flex items-center transition-colors">
                <i class="fas fa-arrow-left mr-2"></i> Back to Feed
            </a>
        </div>

        <% if (savedPosts.length === 0) { %>
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 text-center border border-gray-100 dark:border-gray-700 overflow-hidden relative">
                <div class="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 to-indigo-600"></div>
                
                <div class="w-16 h-16 mx-auto mb-6 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white shadow-md">
                    <i class="fas fa-bookmark text-xl float-animation"></i>
                </div>
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-3">No saved posts yet</h3>
                <p class="text-gray-600 dark:text-gray-400 max-w-md mx-auto mb-6">
                    When you save posts, they'll appear here. Only you can see what you've saved.
                </p>
                <a href="/feed" class="inline-block px-5 py-2.5 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-lg hover:from-blue-600 hover:to-indigo-700 transition-all shadow-sm">
                    <i class="fas fa-compass mr-2"></i> Browse Feed
                </a>
            </div>
        <% } else { %>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <% savedPosts.forEach(post => { %>
                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm overflow-hidden post-container flex flex-col border border-gray-100 dark:border-gray-700 relative">
                        <div class="absolute top-0 left-0 w-full h-0.5 bg-gradient-to-r from-blue-500 to-indigo-600"></div>
                        
                        <div class="p-1.5 flex items-center justify-between">
                            <% if (post.user) { %>
                                <a href="/user/<%= post.user.username %>" class="flex items-center group">
                                    <img src="<%= post.user.profileImage || '/images/placeholder.webp' %>" 
                                         alt="<%= post.user.name %>" 
                                         onerror="this.src='/images/placeholder.webp'"
                                         class="w-8 h-8 rounded-full object-cover border border-gray-200 dark:border-gray-600">
                                    <div class="ml-2">
                                        <span class="font-medium text-gray-800 dark:text-white group-hover:text-blue-500 text-sm"><%= post.user.name %></span>
                                        <p class="text-xs text-gray-500 dark:text-gray-400">@<%= post.user.username %></p>
                                    </div>
                                </a>
                            <% } else { %>
                                <div class="flex items-center">
                                    <img src="/images/placeholder.webp" 
                                         alt="User" 
                                         class="w-8 h-8 rounded-full object-cover border border-gray-200 dark:border-gray-600">
                                    <div class="ml-2">
                                        <span class="font-medium text-gray-800 dark:text-white text-sm">User unavailable</span>
                                        <p class="text-xs text-gray-500 dark:text-gray-400">@unknown</p>
                                    </div>
                                </div>
                            <% } %>
                            <button onclick="toggleSavePost('<%= post._id %>')" class="text-blue-500 hover:text-blue-600 p-1 rounded-full hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors">
                                <i class="fas fa-bookmark text-base"></i>
                            </button>
                        </div>
                        
                        <!-- Post Content -->
                        <div class="flex-1 flex flex-col overflow-hidden">
                            <!-- Post Image -->
                            <% if (post.images && post.images.length > 0) { %>
                                <div class="relative aspect-square post-image" ondblclick="handleDoubleTap('<%= post._id %>')">
                                    <div class="swiper-container h-full">
                                        <div class="swiper-wrapper h-full">
                                            <% post.images.forEach(image => { %>
                                                <div class="swiper-slide h-full">
                                                    <img src="<%= image.url %>" 
                                                         alt="Post image"
                                                         class="w-full h-full object-cover">
                                                </div>
                                            <% }) %>
                                        </div>
                                        <% if (post.images.length > 1) { %>
                                            <div class="swiper-pagination"></div>
                                            <div class="swiper-button-next"></div>
                                            <div class="swiper-button-prev"></div>
                                            <div class="absolute bottom-2 right-2 bg-black/50 text-white text-xs px-2 py-1 rounded-full z-10">
                                                <span class="current-slide">1</span>/<%= post.images.length %>
                                            </div>
                                        <% } %>
                                    </div>
                                    <div class="heart-animation hidden">
                                        <i class="fas fa-heart"></i>
                                    </div>
                                </div>
                            <% } else { %>
                                <!-- Placeholder for text-only posts -->
                                <div class="h-4"></div>
                            <% } %>
                            
                            <!-- Post Text Content -->
                            <div class="p-2.5 flex-1">
                                <div class="mb-1">
                                    <div class="text-sm flex flex-wrap items-start">
                                        <span class="font-medium text-gray-800 dark:text-white mr-1"><%= post.user ? post.user.username : 'Unknown' %></span>
                                        <span class="caption-content text-gray-600 dark:text-gray-300">
                                            <%= post.content && post.content.length > 100 ? post.content.substring(0, 100) + '...' : post.content %>
                                        </span>
                                    </div>
                                </div>
                                
                                <a href="/post/<%= post._id %>" class="text-sm text-blue-500 hover:text-blue-600 font-medium">
                                    View post
                                </a>
                            </div>
                        </div>
                        
                        <!-- Post Actions -->
                        <div class="p-1.5 bg-gray-50 dark:bg-gray-700/20">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-3">
                                    <button onclick="toggleLike('<%= post._id %>')" 
                                            id="like-btn-<%= post._id %>"
                                            class="like-btn flex items-center <%= post.likes.some(id => id.toString() === user._id.toString()) ? 'text-red-500' : 'text-gray-500' %> hover:text-red-500">
                                        <i class="fas fa-heart text-base"></i>
                                        <span class="like-count text-sm ml-1"><%= post.likes.length %></span>
                                    </button>
                                    <a href="/post/<%= post._id %>" class="flex items-center text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300">
                                        <i class="fas fa-comment text-base"></i>
                                        <span class="text-sm ml-1"><%= post.comments.length %></span>
                                    </a>
                                </div>
                                <button onclick="sharePost('<%= post._id %>')" class="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors">
                                    <i class="fas fa-share text-base"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                <% }) %>
            </div>
        <% } %>
    </div>
</div>

<!-- Share Modal -->
<div id="shareModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
    <div class="bg-white dark:bg-gray-900 rounded-lg max-w-md w-full mx-4 overflow-hidden modal-content relative">
        <div class="absolute top-0 left-0 w-full h-0.5 bg-gradient-to-r from-blue-500 to-indigo-600"></div>
        <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
            <h3 class="font-semibold text-lg text-gray-800 dark:text-white">Share Post</h3>
            <button onclick="closeShareModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="p-4">
            <div class="mb-4">
                <label for="shareRecipient" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Share with:</label>
                <input type="text" id="shareRecipient" placeholder="Type username..." class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-800 text-gray-800 dark:text-white">
                <div id="userResults" class="mt-2 max-h-40 overflow-y-auto hidden custom-scrollbar"></div>
            </div>
            <div class="mb-4">
                <label for="shareMessage" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Message (optional):</label>
                <textarea id="shareMessage" rows="3" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-800 text-gray-800 dark:text-white custom-scrollbar"></textarea>
            </div>
            <div id="shareError" class="text-red-500 text-sm mb-4 hidden"></div>
            <div class="flex justify-end">
                <button onclick="closeShareModal()" class="mr-2 px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
                    Cancel
                </button>
                <button id="confirmShareButton" class="px-4 py-2 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-md hover:from-blue-600 hover:to-indigo-700 focus:outline-none transition-all shadow-sm">
                    Share
                </button>
            </div>
        </div>
    </div>
</div>

<style>
/* Animations */
@keyframes like-animation {
    0% { transform: scale(0); opacity: 0; }
    15% { transform: scale(1.5); opacity: 1; }
    30% { transform: scale(0.8); opacity: 1; }
    45% { transform: scale(1.2); opacity: 1; }
    60% { transform: scale(0.9); opacity: 1; }
    75% { transform: scale(1.1); opacity: 1; }
    100% { transform: scale(1); opacity: 0; }
}

.heart-animation {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 120px;
    color: white;
    text-shadow: 0 0 30px rgba(0,0,0,0.4);
    pointer-events: none;
    z-index: 10;
    opacity: 0;
}

.heart-animation.active {
    animation: like-animation 1s ease-in-out forwards;
}

.like-btn {
    transition: transform 0.2s, color 0.2s;
}

.like-btn.liked {
    animation: like-button-animation 0.3s ease-in-out;
}

@keyframes like-button-animation {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1); }
}

/* Custom scrollbar styles for post content */
.custom-scrollbar::-webkit-scrollbar {
    width: 4px;
}

.custom-scrollbar::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
    background: #d1d5db;
    border-radius: 10px;
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
}

@media (prefers-color-scheme: dark) {
    .custom-scrollbar::-webkit-scrollbar-track {
        background: #374151;
    }
    
    .custom-scrollbar::-webkit-scrollbar-thumb {
        background: #4b5563;
    }
    
    .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: #6b7280;
    }
}

/* Animation for empty state */
@keyframes float {
    0% {
        transform: translateY(0px);
    }
    50% {
        transform: translateY(-10px);
    }
    100% {
        transform: translateY(0px);
    }
}

.float-animation {
    animation: float 3s ease-in-out infinite;
}

/* Responsive design adjustments */
@media (max-width: 640px) {
    .post-container {
        min-height: auto;
    }

    .swiper-button-next,
    .swiper-button-prev {
        display: none;
    }
    
    .grid {
        gap: 1rem;
    }
    
    .p-3 {
        padding: 0.75rem;
    }
}

/* Gradient animations */
@keyframes gradient-shift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

.animated-gradient {
    background-size: 200% 200%;
    animation: gradient-shift 15s ease infinite;
}

/* Toast notification with gradient */
#toast {
    background: linear-gradient(to right, #3b82f6, #8b5cf6, #ec4899);
    background-size: 200% 200%;
    animation: gradient-shift 3s ease infinite;
}

/* Add to existing style section */
.caption-content {
    word-break: break-word;
    max-width: 100%;
    display: inline;
    color: #4B5563;
    line-height: 1.4;
}

/* Fixed height for post content area to maintain card consistency */
.post-container .p-3.flex-1 {
    min-height: 60px;
}

.post-container {
    line-height: 1.4;
}

/* Story ring gradient styling */
.story-ring, div[class*="bg-gradient-to-tr from-yellow-400 to-fuchsia-600"] {
    background: linear-gradient(to right, #3B82F6, #8B5CF6, #D946EF);
}

@media (max-width: 640px) {
    .post-container {
        margin-bottom: 1rem;
        border-radius: 0.5rem;
    }
}
</style>

<script src="https://unpkg.com/swiper@8/swiper-bundle.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Swiper for all post images
        const swipers = document.querySelectorAll('.swiper-container');
        swipers.forEach((container, index) => {
            const swiper = new Swiper(container, {
                loop: false,
                pagination: {
                    el: container.querySelector('.swiper-pagination'),
                    clickable: true,
                    dynamicBullets: true,
                },
                navigation: {
                    nextEl: container.querySelector('.swiper-button-next'),
                    prevEl: container.querySelector('.swiper-button-prev'),
                },
                grabCursor: true,
                slidesPerView: 1,
                observer: true,
                observeParents: true,
                observeSlideChildren: true,
                keyboard: {
                    enabled: true,
                },
                on: {
                    slideChange: function() {
                        const currentSlideIndicator = container.querySelector('.current-slide');
                        if (currentSlideIndicator) {
                            currentSlideIndicator.textContent = this.activeIndex + 1;
                        }
                    },
                    init: function() {
                        console.log('Swiper initialized with ' + this.slides.length + ' slides');
                    }
                }
            });
        });
        
        // Setup double tap detection on post images
        const postImages = document.querySelectorAll('.post-image');
        postImages.forEach(img => {
            let lastTap = 0;
            img.addEventListener('touchend', function(e) {
                const currentTime = new Date().getTime();
                const tapLength = currentTime - lastTap;
                if (tapLength < 500 && tapLength > 0) {
                    // Double tap detected
                    const postId = img.closest('.post-container').querySelector('.like-btn').id.replace('like-btn-', '');
                    handleDoubleTap(postId);
                    e.preventDefault();
                }
                lastTap = currentTime;
            });
            
            // Add click event for faster testing on desktop (two clicks within 500ms)
            img.addEventListener('click', function(e) {
                const currentTime = new Date().getTime();
                const clickLength = currentTime - lastTap;
                if (clickLength < 500 && clickLength > 0) {
                    // Double click detected
                    const postId = this.closest('.post-container').querySelector('.like-btn').id.replace('like-btn-', '');
                    handleDoubleTap(postId);
                }
                lastTap = currentTime;
            });
        });

        // Add animation class to empty state icon
        const emptyIcon = document.querySelector('.fas.fa-bookmark.text-3xl');
        if (emptyIcon) {
            emptyIcon.classList.add('float-animation');
        }
    });

    // Like functionality
    function toggleLike(postId) {
        fetch(`/post/${postId}/like`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            const likeBtn = document.getElementById(`like-btn-${postId}`);
            const likeCount = likeBtn.querySelector('.like-count');
            
            if (data.isLiked) {
                likeBtn.classList.remove('text-gray-500');
                likeBtn.classList.add('text-red-500');
                likeBtn.classList.add('liked');
                setTimeout(() => likeBtn.classList.remove('liked'), 300);
            } else {
                likeBtn.classList.remove('text-red-500');
                likeBtn.classList.add('text-gray-500');
            }
            
            likeCount.textContent = data.likes;
        })
        .catch(error => console.error('Error:', error));
    }

    // Double tap to like
    function handleDoubleTap(postId) {
        const likeBtn = document.getElementById(`like-btn-${postId}`);
        const imgContainer = event.currentTarget;
        const heartAnimation = imgContainer.querySelector('.heart-animation');
        
        // Only like if not already liked
        if (!likeBtn.classList.contains('text-red-500')) {
            toggleLike(postId);
            
            // Show heart animation
            heartAnimation.classList.remove('hidden');
            heartAnimation.classList.add('active');
            setTimeout(() => {
                heartAnimation.classList.add('hidden');
                heartAnimation.classList.remove('active');
            }, 1000);
        }
    }

    // Save post functionality
    function toggleSavePost(postId) {
        fetch(`/post/${postId}/save`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            // If the post was unsaved, remove it from the saved posts page with animation
            if (!data.saved) {
                const postElement = document.querySelector(`button[onclick="toggleSavePost('${postId}')"]`).closest('.post-container');
                
                if (postElement) {
                    postElement.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                    postElement.style.opacity = '0';
                    postElement.style.transform = 'scale(0.9)';
                    
                    setTimeout(() => {
                        postElement.remove();
                        
                        // Check if there are any posts left
                        const remainingPosts = document.querySelectorAll('.post-container');
                        if (remainingPosts.length === 0) {
                            // Reload the page to show the "No saved posts" message
                            window.location.reload();
                        }
                    }, 300);
                }
            }
        })
        .catch(error => console.error('Error:', error));
    }

    // Share post functionality
    let currentPostId = null;
    let selectedUserId = null;

    function sharePost(postId) {
        currentPostId = postId;
        document.getElementById('shareModal').classList.remove('hidden');
        document.getElementById('shareRecipient').value = '';
        document.getElementById('shareMessage').value = '';
        document.getElementById('shareError').classList.add('hidden');
        document.getElementById('userResults').classList.add('hidden');
    }

    function closeShareModal() {
        document.getElementById('shareModal').classList.add('hidden');
        currentPostId = null;
        selectedUserId = null;
    }

    // User search for share functionality
    document.getElementById('shareRecipient').addEventListener('input', function(e) {
        const query = e.target.value.trim();
        const userResults = document.getElementById('userResults');
        
        if (query.length < 2) {
            userResults.classList.add('hidden');
            return;
        }
        
        fetch(`/search?q=${encodeURIComponent(query)}&format=json`)
            .then(response => response.json())
            .then(data => {
                userResults.innerHTML = '';
                
                if (data.users && data.users.length > 0) {
                    data.users.forEach(user => {
                        const userItem = document.createElement('div');
                        userItem.className = 'flex items-center p-2 hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer search-result-item';
                        userItem.innerHTML = `
                            <img src="${user.profileImage}" alt="${user.name}" class="w-8 h-8 rounded-full mr-2">
                            <div>
                                <div class="font-semibold text-gray-800 dark:text-white">${user.name}</div>
                                <div class="text-xs text-gray-500 dark:text-gray-400">@${user.username}</div>
                            </div>
                        `;
                        userItem.addEventListener('click', function() {
                            document.getElementById('shareRecipient').value = user.username;
                            selectedUserId = user._id;
                            userResults.classList.add('hidden');
                        });
                        userResults.appendChild(userItem);
                    });
                    userResults.classList.remove('hidden');
                } else {
                    userResults.innerHTML = '<div class="p-2 text-gray-500 dark:text-gray-400">No users found</div>';
                    userResults.classList.remove('hidden');
                }
            })
            .catch(error => console.error('Error:', error));
    });

    // Share confirmation
    document.getElementById('confirmShareButton').addEventListener('click', function() {
        const username = document.getElementById('shareRecipient').value.trim();
        const message = document.getElementById('shareMessage').value.trim();
        const errorElement = document.getElementById('shareError');
        
        if (!username) {
            errorElement.textContent = 'Please enter a username to share with';
            errorElement.classList.remove('hidden');
            return;
        }
        
        fetch(`/post/${currentPostId}/share`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, message })
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(data => {
                    throw new Error(data.error || 'Failed to share post');
                });
            }
            return response.json();
        })
        .then(data => {
            closeShareModal();
            navigator.clipboard.writeText(data.postUrl);
            showToast('Post shared successfully!');
        })
        .catch(error => {
            errorElement.textContent = error.message;
            errorElement.classList.remove('hidden');
        });
    });

    // Close modals when clicking outside
    window.addEventListener('click', function(event) {
        const shareModal = document.getElementById('shareModal');
        
        if (event.target === shareModal) {
            closeShareModal();
        }
    });

    // Toast notification function
    function showToast(message) {
        // If toast exists, remove it
        let toast = document.getElementById('toast');
        if (toast) {
            document.body.removeChild(toast);
        }
        
        // Create new toast
        toast = document.createElement('div');
        toast.id = 'toast';
        toast.className = 'fixed bottom-5 left-1/2 transform -translate-x-1/2 text-white px-6 py-3 rounded-lg shadow-lg z-50 opacity-0 transition-opacity duration-300 animated-gradient';
        toast.textContent = message;
        document.body.appendChild(toast);
        
        // Show toast
        setTimeout(() => {
            toast.classList.add('opacity-100');
        }, 100);
        
        // Hide toast after 3 seconds
        setTimeout(() => {
            toast.classList.remove('opacity-100');
            
            // Remove after fade out
            setTimeout(() => {
                if (toast.parentNode) {
                    document.body.removeChild(toast);
                }
            }, 300);
        }, 3000);
    }
</script>

</body>
</html> 