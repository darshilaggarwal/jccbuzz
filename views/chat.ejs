<%- include('partials/header') %>

<div class="max-w-4xl mx-auto mt-8 px-4">
    <div class="bg-white dark:bg-black rounded-lg shadow-md overflow-hidden flex flex-col h-[calc(100vh-8rem)]">
        <!-- Chat Header - Make it sticky -->
        <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between bg-white dark:bg-black sticky top-0 z-10">
            <a href="/user/<%= otherUser.username %>" class="flex items-center hover:opacity-80">
                <div class="relative">
                    <img src="<%= otherUser.profileImage %>" 
                         alt="Profile" 
                         class="w-10 h-10 rounded-full object-cover border-2 border-white dark:border-gray-700">
                    <div class="absolute bottom-0 right-0 w-3 h-3 <%= otherUser.isOnline ? 'bg-green-500' : 'bg-gray-400' %> rounded-full border-2 border-white dark:border-gray-700"></div>
                </div>
                <div class="ml-3">
                    <h5 class="font-semibold text-gray-800 dark:text-white"><%= otherUser.name %></h5>
                    <p class="text-xs text-gray-500 dark:text-gray-400">
                        @<%= otherUser.username %>
                        <span id="typingStatus" class="ml-2 text-blue-500 italic hidden">typing...</span>
                    </p>
                </div>
            </a>
        </div>

        <!-- Messages Container -->
        <div class="flex-1 overflow-y-auto p-4 space-y-4" id="messages">
            <% chat.messages.forEach(message => { %>
                <div class="flex <%= message.sender._id.toString() === user._id.toString() ? 'justify-end' : 'justify-start' %> group">
                    <div class="relative max-w-[70%] <%= message.sender._id.toString() === user._id.toString() ? 'bg-blue-500 text-white' : 'bg-gray-200 dark:bg-gray-700' %> rounded-lg p-3">
                        <% if (message.isPostShare && message.sharedPostPreview) { %>
                            <!-- Shared Post Preview -->
                            <div class="border rounded-lg p-3 mb-2 bg-white dark:bg-gray-800">
                                <% if (message.sharedPostPreview.image) { %>
                                    <img src="<%= message.sharedPostPreview.image %>" alt="Post preview" class="w-full h-48 object-cover rounded-lg mb-2">
                                <% } %>
                                <div class="text-gray-800 dark:text-white font-medium mb-1"><%= message.sharedPostPreview.title %></div>
                                <div class="text-gray-600 dark:text-gray-300 text-sm"><%= message.sharedPostPreview.content %></div>
                                <a href="/post/<%= message.sharedPostPreview.postId %>" class="text-blue-500 text-sm mt-2 inline-block">View Post</a>
                            </div>
                        <% } %>
                        
                        <% if (message.mediaType !== 'none' && message.mediaUrl) { %>
                            <% if (message.mediaType === 'image') { %>
                                <img src="<%= message.mediaUrl %>" alt="Shared image" class="max-w-full rounded-lg mb-2">
                            <% } else if (message.mediaType === 'video') { %>
                                <video src="<%= message.mediaUrl %>" controls class="max-w-full rounded-lg mb-2"></video>
                            <% } %>
                        <% } %>
                        
                        <% if (message.content) { %>
                            <div class="<%= message.isEdited ? 'flex items-center gap-1' : '' %>">
                                <span><%= message.content %></span>
                                <% if (message.isEdited) { %>
                                    <span class="text-xs opacity-75">(edited)</span>
                                <% } %>
                            </div>
                        <% } %>

                        <!-- Message Options Button - Show on hover -->
                        <% if (message.sender._id.toString() === user._id.toString()) { %>
                            <button onclick="showMyMessageOptions('<%= message._id %>')" 
                                    class="absolute top-2 right-2 text-white opacity-0 group-hover:opacity-100 transition-opacity">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                        <% } %>
                        
                        <div class="text-xs <%= message.sender._id.toString() === user._id.toString() ? 'text-blue-100' : 'text-gray-500' %> mt-1">
                            <%= new Date(message.createdAt).toLocaleTimeString() %>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>

        <!-- Message Input -->
        <div class="p-3 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-black sticky bottom-0">
            <form id="messageForm" class="flex items-center space-x-2">
                <input type="file" id="mediaInput" class="hidden" accept="image/*,video/*">
                <button type="button" id="mediaButton" class="p-2 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 rounded-full hover:bg-gray-100 dark:hover:bg-gray-900">
                    <i class="fas fa-image"></i>
                </button>
                <div class="relative flex-1">
                    <input type="text" 
                           id="messageInput"
                           placeholder="Message..." 
                           class="w-full px-4 py-3 border border-gray-300 dark:border-gray-700 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-white"
                           required>
                </div>
                <button type="submit" 
                        class="p-3 bg-blue-500 dark:bg-blue-600 text-white rounded-full hover:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </form>
        </div>
    </div>
</div>

<!-- Message Options Modal -->
<div id="messageOptionsModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
    <div class="fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-900 rounded-t-xl">
        <div class="p-0 divide-y divide-gray-200 dark:divide-gray-700">
            <button onclick="showReactionPicker()" class="w-full text-left py-3 px-4 text-sm hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300">
                React
            </button>
            <button onclick="editMessage()" class="w-full text-left py-3 px-4 text-sm hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300">
                Edit
            </button>
            <button onclick="deleteMessage()" class="w-full text-left py-3 px-4 text-sm hover:bg-gray-100 dark:hover:bg-gray-800 text-red-500">
                Delete
            </button>
            <button onclick="closeMessageOptions()" class="w-full text-center py-3 text-sm text-gray-500">
                Cancel
            </button>
        </div>
    </div>
</div>

<!-- Reaction Picker Modal -->
<div id="reactionPickerModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
    <div class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white dark:bg-gray-900 rounded-xl shadow-lg">
        <div class="p-3">
            <div class="flex justify-around text-2xl">
                <button onclick="addReaction('‚ù§Ô∏è')" class="p-2 hover:scale-125 transition-transform">‚ù§Ô∏è</button>
                <button onclick="addReaction('üòÇ')" class="p-2 hover:scale-125 transition-transform">üòÇ</button>
                <button onclick="addReaction('üòÆ')" class="p-2 hover:scale-125 transition-transform">üòÆ</button>
                <button onclick="addReaction('üò¢')" class="p-2 hover:scale-125 transition-transform">üò¢</button>
                <button onclick="addReaction('üî•')" class="p-2 hover:scale-125 transition-transform">üî•</button>
                <button onclick="addReaction('üëç')" class="p-2 hover:scale-125 transition-transform">üëç</button>
            </div>
        </div>
    </div>
</div>

<!-- Media Preview -->
<div id="mediaPreview" class="fixed bottom-20 left-0 right-0 bg-white dark:bg-gray-900 p-4 hidden">
    <div class="flex items-center justify-between">
        <div id="previewContent" class="flex-1"></div>
        <button id="cancelMedia" class="ml-4 text-red-500">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
const socket = io();
const userId = '<%= user._id %>';
const chatId = '<%= chat._id %>';
const receiverId = '<%= otherUser._id %>';
let typingTimeout;
let selectedMedia = null;
let currentMessageId = null;

const messagesContainer = document.getElementById('messages');
const messageForm = document.getElementById('messageForm');
const messageInput = document.getElementById('messageInput');
const typingStatus = document.getElementById('typingStatus');
const mediaInput = document.getElementById('mediaInput');
const mediaButton = document.getElementById('mediaButton');
const mediaPreview = document.getElementById('mediaPreview');
const previewContent = document.getElementById('previewContent');
const cancelMedia = document.getElementById('cancelMedia');

function scrollToBottom() {
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Update appendMessage function to separate message options based on ownership
function appendMessage(message, isSender) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `flex ${isSender ? 'justify-end' : 'justify-start'} group mb-5`;
    
    const messageContent = `
        <div class="relative max-w-[70%] ${isSender ? 'bg-blue-500 text-white' : 'bg-gray-200 dark:bg-gray-700'} rounded-lg p-3" data-message-id="${message._id}">
            ${message.mediaType !== 'none' && message.mediaUrl ? `
                ${message.mediaType === 'image' ? 
                    `<img src="${message.mediaUrl}" alt="Shared image" class="max-w-full rounded-lg mb-2">` :
                    `<video src="${message.mediaUrl}" controls class="max-w-full rounded-lg mb-2"></video>`
                }
            ` : ''}
            
            ${message.content ? `
                <div class="message-text ${message.isEdited ? 'flex items-center gap-1' : ''}">
                    <span class="message-content">${message.content}</span>
                    ${message.isEdited ? '<span class="text-xs opacity-75">(edited)</span>' : ''}
                </div>
            ` : ''}
            
            <!-- Different options buttons for own vs other's messages -->
            ${isSender ? 
                `<button onclick="showMyMessageOptions('${message._id}')" 
                        class="absolute -top-3 -right-3 bg-white dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                    <i class="fas fa-ellipsis-h text-xs text-gray-500 dark:text-gray-400"></i>
                </button>` 
                : 
                `<button onclick="showReactionPickerForMessage('${message._id}')" 
                        class="absolute -top-3 -right-3 bg-white dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                    <i class="fas fa-smile text-xs text-gray-500 dark:text-gray-400"></i>
                </button>`
            }
            
            ${message.reaction ? `
                <div class="absolute -bottom-6 ${isSender ? 'right-2' : 'left-2'} reaction-bubble">
                    <span class="reaction">${message.reaction}</span>
                </div>
            ` : ''}
            
            <div class="text-xs ${isSender ? 'text-blue-100' : 'text-gray-500'} mt-1">
                ${new Date(message.createdAt || Date.now()).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
            </div>
        </div>
    `;
    
    messageDiv.innerHTML = messageContent;
    messagesContainer.appendChild(messageDiv);
}

// Authenticate with Socket.IO
socket.emit('authenticate', userId);

// Listen for online/offline status
socket.on('userOnline', (onlineUserId) => {
    if (onlineUserId === receiverId) {
        const statusDot = document.querySelector('.absolute.bottom-0.right-0');
        if (statusDot) {
            statusDot.classList.remove('bg-gray-400');
            statusDot.classList.add('bg-green-500');
        }
    }
});

socket.on('userOffline', (offlineUserId) => {
    if (offlineUserId === receiverId) {
        const statusDot = document.querySelector('.absolute.bottom-0.right-0');
        if (statusDot) {
            statusDot.classList.remove('bg-green-500');
            statusDot.classList.add('bg-gray-400');
        }
    }
});

// Listen for new messages
socket.on('newMessage', (data) => {
    if (data.chatId === chatId) {
        appendMessage(data.message, false);
        scrollToBottom();
    }
});

// Listen for typing status
socket.on('userTyping', (data) => {
    if (data.chatId === chatId && data.userId === receiverId) {
        typingStatus.classList.remove('hidden');
        clearTimeout(typingTimeout);
        typingTimeout = setTimeout(() => {
            typingStatus.classList.add('hidden');
        }, 3000);
    }
});

// Handle message input
messageInput.addEventListener('input', () => {
    socket.emit('typing', { receiverId, chatId });
});

// Handle message submission
messageForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const content = messageInput.value.trim();
    
    if (!content && !selectedMedia) return;
    
    if (selectedMedia) {
        const formData = new FormData();
        formData.append('media', selectedMedia);
        if (content) formData.append('content', content);
        formData.append('receiverId', receiverId);
        
        try {
            const response = await fetch(`/chat/${chatId}/media`, {
                method: 'POST',
                body: formData
            });
            const data = await response.json();
            appendMessage(data, true);
            scrollToBottom();
        } catch (error) {
            console.error('Error sending media message:', error);
        }
        
        selectedMedia = null;
        mediaPreview.classList.add('hidden');
        mediaInput.value = '';
    } else {
        try {
            const response = await fetch(`/chat/${chatId}/message`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    content,
                    receiverId
                })
            });
            
            const data = await response.json();
            appendMessage(data, true);
            scrollToBottom();
        } catch (error) {
            console.error('Error sending message:', error);
        }
    }
    
    messageInput.value = '';
});

// Handle media button click
mediaButton.addEventListener('click', () => {
    mediaInput.click();
});

// Handle media selection
mediaInput.addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    selectedMedia = file;
    previewContent.innerHTML = '';
    mediaPreview.classList.remove('hidden');
    
    if (file.type.startsWith('image/')) {
        const img = document.createElement('img');
        img.className = 'h-20 rounded object-contain';
        img.file = file;
        previewContent.appendChild(img);
        
        const reader = new FileReader();
        reader.onload = (e) => { img.src = e.target.result; };
        reader.readAsDataURL(file);
    } else if (file.type.startsWith('video/')) {
        const video = document.createElement('video');
        video.className = 'h-20 rounded';
        video.controls = true;
        previewContent.appendChild(video);
        
        const reader = new FileReader();
        reader.onload = (e) => { video.src = e.target.result; };
        reader.readAsDataURL(file);
    }
});

// Update the message options to separate own vs other functions
function showMyMessageOptions(messageId) {
    if (!messageId) {
        console.error("No message ID provided");
        return;
    }
    currentMessageId = messageId;
    document.getElementById('messageOptionsModal').classList.remove('hidden');
}

function showReactionPickerForMessage(messageId) {
    if (!messageId) {
        console.error("No message ID provided");
        return;
    }
    currentMessageId = messageId;
    showReactionPicker();
}

// Improved reaction picker display
function showReactionPicker() {
    if (!currentMessageId) {
        console.error("No message selected for reaction");
        return;
    }
    document.getElementById('messageOptionsModal').classList.add('hidden');
    document.getElementById('reactionPickerModal').classList.remove('hidden');
}

// Improved addReaction function with better error handling
async function addReaction(reaction) {
    if (!currentMessageId) {
        console.error("Cannot add reaction: No message ID");
        closeReactionPicker();
        return;
    }
    
    try {
        const response = await fetch(`/message/${currentMessageId}/react`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ reaction })
        });
        
        if (response.ok) {
            const messageElement = document.querySelector(`[data-message-id="${currentMessageId}"]`);
            if (!messageElement) {
                console.error("Message element not found for reaction");
                return;
            }
            
            // Remove existing reaction if any
            const existingReaction = messageElement.querySelector('.reaction-bubble');
            if (existingReaction) {
                existingReaction.remove();
            }
            
            // Create and add the new reaction
            const reactionElement = document.createElement('div');
            reactionElement.className = 'absolute -bottom-6 right-2 reaction-bubble';
            reactionElement.innerHTML = `<span class="reaction">${reaction}</span>`;
            messageElement.appendChild(reactionElement);
            
            // Emit reaction to other user
            socket.emit('messageReacted', {
                chatId,
                messageId: currentMessageId,
                reaction,
                receiverId
            });
        } else {
            const errorText = await response.text();
            console.error("Failed to add reaction:", errorText);
        }
    } catch (error) {
        console.error('Error adding reaction:', error);
    }
    
    closeReactionPicker();
    currentMessageId = null; // Reset after use
}

// Fix delete function to also reset currentMessageId
async function deleteMessage() {
    if (!currentMessageId) {
        console.error("Cannot delete: No message ID");
        closeMessageOptions();
        return;
    }
    
    try {
        const response = await fetch(`/message/${currentMessageId}/delete`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            const messageElement = document.querySelector(`[data-message-id="${currentMessageId}"]`).closest('.flex');
            if (messageElement) {
                // Add fade-out animation
                messageElement.style.transition = 'opacity 0.3s ease-out';
                messageElement.style.opacity = '0';
                setTimeout(() => {
                    messageElement.remove();
                }, 300);
                
                // Emit delete event to other user
                socket.emit('messageDeleted', {
                    chatId,
                    messageId: currentMessageId,
                    receiverId
                });
            }
        } else {
            console.error("Failed to delete message:", await response.text());
        }
    } catch (error) {
        console.error('Error deleting message:', error);
    }
    
    closeMessageOptions();
    currentMessageId = null; // Reset after use
}

// Improved edit function to reset currentMessageId after use
async function editMessage() {
    closeMessageOptions();
    
    if (!currentMessageId) {
        console.error("Cannot edit: No message ID");
        return;
    }
    
    const messageElement = document.querySelector(`[data-message-id="${currentMessageId}"]`);
    if (!messageElement) {
        console.error("Message element not found");
        currentMessageId = null; // Reset on error
        return;
    }
    
    const messageTextContainer = messageElement.querySelector('.message-text');
    const messageSpan = messageElement.querySelector('.message-content');
    
    if (!messageSpan) {
        console.error("Message content span not found");
        currentMessageId = null; // Reset on error
        return;
    }
    
    const currentContent = messageSpan.textContent;
    
    // Create inline edit input with background for better visibility
    const inputElement = document.createElement('input');
    inputElement.type = 'text';
    inputElement.value = currentContent;
    inputElement.className = 'w-full bg-blue-600 border-none focus:outline-none focus:ring-0 p-0 text-white rounded';
    
    // Replace text with input
    messageSpan.replaceWith(inputElement);
    inputElement.focus();
    inputElement.select();
    
    // Store messageId in a local variable since we'll reset currentMessageId
    const messageIdForEdit = currentMessageId;
    
    // Handle edit completion
    const completeEdit = async (save = true) => {
        const newContent = inputElement.value.trim();
        if (save && newContent && newContent !== currentContent) {
            try {
                const response = await fetch(`/message/${messageIdForEdit}/edit`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ content: newContent })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    const newSpan = document.createElement('span');
                    newSpan.className = 'message-content';
                    newSpan.textContent = data.content;
                    inputElement.replaceWith(newSpan);
                    
                    // Add edited indicator if not already present
                    if (data.isEdited && messageTextContainer && !messageTextContainer.querySelector('.text-xs.opacity-75')) {
                        messageTextContainer.classList.add('flex', 'items-center', 'gap-1');
                        const editedSpan = document.createElement('span');
                        editedSpan.className = 'text-xs opacity-75';
                        editedSpan.textContent = '(edited)';
                        messageTextContainer.appendChild(editedSpan);
                    }
                    
                    // Emit edit event to other user for real-time update
                    socket.emit('messageEdited', {
                        chatId,
                        messageId: messageIdForEdit,
                        content: data.content,
                        receiverId
                    });
                } else {
                    console.error("Failed to update message:", await response.text());
                    // Restore original content if update failed
                    const newSpan = document.createElement('span');
                    newSpan.className = 'message-content';
                    newSpan.textContent = currentContent;
                    inputElement.replaceWith(newSpan);
                }
            } catch (error) {
                console.error('Error editing message:', error);
                // Restore original content on error
                const newSpan = document.createElement('span');
                newSpan.className = 'message-content';
                newSpan.textContent = currentContent;
                inputElement.replaceWith(newSpan);
            }
        } else {
            // Restore original content if cancelled or no changes
            const newSpan = document.createElement('span');
            newSpan.className = 'message-content';
            newSpan.textContent = currentContent;
            inputElement.replaceWith(newSpan);
        }
    };
    
    // Handle input blur and Enter key
    inputElement.addEventListener('blur', () => completeEdit(true));
    inputElement.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            completeEdit(true);
        } else if (e.key === 'Escape') {
            completeEdit(false);
        }
    });
    
    // Reset currentMessageId after setting up edit
    currentMessageId = null;
}

// Handle message options
function closeMessageOptions() {
    document.getElementById('messageOptionsModal').classList.add('hidden');
    currentMessageId = null;
}

// Cancel media upload
cancelMedia.addEventListener('click', () => {
    selectedMedia = null;
    mediaInput.value = '';
    mediaPreview.classList.add('hidden');
});

function closeReactionPicker() {
    document.getElementById('reactionPickerModal').classList.add('hidden');
    currentMessageId = null; // Reset after use
}

// Add back event listeners
// Add listener for message deletion from other user
socket.on('messageDeleted', (data) => {
    if (data.chatId === chatId) {
        const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`).closest('.flex');
        if (messageElement) {
            messageElement.style.transition = 'opacity 0.3s ease-out';
            messageElement.style.opacity = '0';
            setTimeout(() => {
                messageElement.remove();
            }, 300);
        }
    }
});

// Fix the messageEdited listener to properly update edited messages
socket.on('messageEdited', (data) => {
    if (data.chatId === chatId) {
        const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
        if (messageElement) {
            const messageSpan = messageElement.querySelector('.message-content');
            if (messageSpan) {
                messageSpan.textContent = data.content;
                
                // Add edited indicator if not already present
                const messageTextContainer = messageElement.querySelector('.message-text');
                if (messageTextContainer && !messageTextContainer.querySelector('.text-xs.opacity-75')) {
                    messageTextContainer.classList.add('flex', 'items-center', 'gap-1');
                    const editedSpan = document.createElement('span');
                    editedSpan.className = 'text-xs opacity-75';
                    editedSpan.textContent = '(edited)';
                    messageTextContainer.appendChild(editedSpan);
                }
            } else {
                console.error("Message span not found for edit");
            }
        }
    }
});

// Add socket listener for reactions
socket.on('messageReacted', (data) => {
    if (data.chatId === chatId) {
        const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
        if (!messageElement) {
            console.error("Message element not found for reaction");
            return;
        }
        
        // Remove existing reaction if any
        const existingReaction = messageElement.querySelector('.reaction-bubble');
        if (existingReaction) {
            existingReaction.remove();
        }
        
        // Create and add the new reaction
        const reactionElement = document.createElement('div');
        reactionElement.className = 'absolute -bottom-6 left-2 reaction-bubble';
        reactionElement.innerHTML = `<span class="reaction">${data.reaction}</span>`;
        messageElement.appendChild(reactionElement);
    }
});

// Initial scroll to bottom
scrollToBottom();

// Update reaction bubble styling
document.head.insertAdjacentHTML('beforeend', `
<style>
.reaction-bubble {
    background-color: white;
    border-radius: 1rem;
    padding: 0.2rem 0.5rem;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    z-index: 10;
    display: inline-block;
    font-size: 1rem;
}

.dark .reaction-bubble {
    background-color: rgb(31, 41, 55);
}

.message-options-btn {
    width: 24px;
    height: 24px;
}

.message-text {
    word-break: break-word;
}
</style>
`);
</script>

<%- include('partials/footer') %> 