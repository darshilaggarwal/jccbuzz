<%- include('partials/header2') %>

<!-- Add Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<!-- Add Tailwind CSS properly -->
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<!-- Add message sound -->
<audio id="messageSound" preload="auto" style="display: none;">
    <source src="https://assets.mixkit.co/active_storage/sfx/2869/2869-preview.mp3" type="audio/mpeg">
</audio>

<!-- Add toast container -->
<div id="toast" class="fixed bottom-4 right-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white px-4 py-2 rounded-lg shadow-lg transform translate-y-full opacity-0 transition-all duration-300 z-50">
    <span id="toast-message"></span>
</div>

<!-- Add connection status indicator -->
<div id="connection-status" class="fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg hidden">
    <span>Connecting to chat server...</span>
</div>

<div class="max-w-4xl mx-auto mt-8 px-4">
    <div class="bg-white dark:bg-black rounded-lg shadow-md overflow-hidden flex flex-col h-[calc(100vh-8rem)]">
        <!-- Chat Header - Make it sticky -->
        <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between bg-white dark:bg-black sticky top-0 z-10 relative">
            <!-- Gradient accent line at top -->
            <div class="absolute top-0 left-0 w-full h-0.5 bg-gradient-to-r from-blue-500 to-purple-600"></div>
            
            <a href="/user/<%= otherUser.username %>" class="flex items-center hover:opacity-80">
                <div class="relative">
                    <div class="<%= otherUser.hasActiveStory ? 'p-[1px] bg-gradient-to-r from-blue-500 to-purple-600 rounded-full' : '' %>">
                    <img src="<%= otherUser.profileImage %>" 
                         alt="Profile" 
                         class="w-10 h-10 rounded-full object-cover border-2 border-white dark:border-gray-700">
                    </div>
                    <div class="absolute bottom-0 right-0 w-3 h-3 <%= otherUser.isOnline ? 'bg-green-500' : 'bg-gray-400' %> rounded-full border-2 border-white dark:border-gray-700 online-status-dot" data-user-id="<%= otherUser._id %>"></div>
                </div>
                <div class="ml-3">
                    <h5 class="font-semibold text-gray-800 dark:text-white"><%= otherUser.name %></h5>
                    <p class="text-xs text-gray-500 dark:text-gray-400">
                        @<%= otherUser.username %>
                        <span id="typingStatus" class="ml-2 bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent italic hidden">typing...</span>
                    </p>
                </div>
            </a>
            
            <!-- Add call button -->
            <button id="callButton" class="p-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-full hover:shadow-lg transition-shadow focus:outline-none transform hover:scale-105 transition-transform">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
                </svg>
            </button>
        </div>

        <!-- Add this right after the chat header -->
        <div id="connection-status" class="bg-red-500 text-white text-center py-1 px-4 text-sm hidden">
            Connecting to chat server...
        </div>

        <!-- Messages Container -->
        <div class="flex-1 overflow-y-auto p-4 space-y-4" id="messages">
            <% chat.messages.forEach(message => { %>
                <div class="flex <%= message.sender._id.toString() === user._id.toString() ? 'justify-end' : 'justify-start' %> group mb-6">
                    <% const isSender = message.sender._id.toString() === user._id.toString(); %>
                    
                    <% if (message.isPostShare && message.sharedPostPreview) { %>
                        <!-- Shared Post Message -->
                        <div class="relative max-w-[70%] <%= isSender ? 'bg-gradient-to-br from-blue-500 to-purple-600 text-white' : 'bg-gray-200 dark:bg-gray-700' %> rounded-lg p-3 <%= isSender ? 'shadow-blue-500/20 shadow-md' : '' %>" 
                             data-message-id="<%= message._id %>" 
                             data-shared-post-id="<%= message.sharedPostPreview.postId %>"
                             style="cursor: pointer;">
                            
                            <div class="message-text <%= message.isEdited ? 'flex items-center gap-1' : '' %>">
                                <span class="message-content"><%= message.content %></span>
                                <% if (message.isEdited) { %>
                                    <span class="text-xs opacity-75">(edited)</span>
                                <% } %>
                            </div>
                            
                            <!-- Post preview card -->
                            <div class="shared-post-card bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-sm">
                                <!-- Post header -->
                                <div class="p-2 flex items-center border-b border-gray-100 dark:border-gray-700">
                                    <div class="relative">
                                        <img src="<%= message.sender.profileImage %>" alt="<%= message.sender.username %>" class="w-6 h-6 rounded-full object-cover">
                                    </div>
                                    <div class="ml-2">
                                        <p class="text-xs font-medium text-gray-900 dark:text-white"><%= message.sharedPostPreview.title %></p>
                                    </div>
                                </div>
                                
                                <!-- Post media -->
                                <div class="aspect-square w-full bg-black overflow-hidden">
                                    <img src="<%= message.sharedPostPreview.image %>" alt="Post" class="w-full h-full object-cover">
                                </div>
                                
                                <!-- Post caption (truncated) -->
                                <div class="px-2 py-2 text-xs text-gray-800 dark:text-gray-200">
                                    <span class="font-semibold"><%= message.sharedPostPreview.title %></span> 
                                    <% const content = message.sharedPostPreview.content; %>
                                    <%= content && content.length > 50 ? content.substring(0, 50) + '...' : content || '' %>
                                </div>
                            </div>
                            
                            <!-- Message Options Button - Show on hover -->
                            <% if (isSender) { %>
                                <button onclick="showMyMessageOptions('<%= message._id %>')" 
                                        class="absolute -top-3 -right-3 bg-blue-500 dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                                    <i class="fas fa-ellipsis-h text-xs text-white"></i>
                                </button>
                            <% } else { %>
                                <button onclick="showReactionPickerForMessage('<%= message._id %>')" 
                                        class="absolute -top-3 -right-3 bg-blue-500 dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                                    <i class="fas fa-smile text-xs text-white"></i>
                                </button>
                            <% } %>
                            
                            <!-- Show Reaction if it exists -->
                            <% if (message.reaction) { %>
                                <div class="absolute -bottom-6 <%= isSender ? 'right-2' : 'left-2' %> reaction-bubble">
                                    <span class="reaction"><%= message.reaction %></span>
                                </div>
                            <% } %>
                            
                            <div class="text-xs <%= isSender ? 'text-blue-100' : 'text-gray-500' %> mt-1">
                                <%= new Date(message.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                            </div>
                        </div>
                    <% } else if (message.isStoryReply) { %>
                        <!-- Story Reply Message -->
                        <div class="relative max-w-[70%] <%= isSender ? 'bg-gradient-to-br from-blue-500 to-purple-600 text-white' : 'bg-gray-200 dark:bg-gray-700' %> rounded-lg p-3 <%= isSender ? 'shadow-blue-500/20 shadow-md' : '' %>" data-message-id="<%= message._id %>">
                            <!-- Story reply text for server-side rendering -->
                            <div class="story-reply mb-1 text-sm font-semibold <%= isSender ? 'text-blue-100' : 'text-gray-600 dark:text-gray-300' %>">
                                <%= isSender ? 'Replied to their story' : 'Replied to your story' %>
                            </div>
                            
                            <!-- Very small story photo below the text -->
                            <% if (message.mediaUrl) { %>
                                <div class="w-12 h-12 mb-2 rounded-sm overflow-hidden bg-black relative">
                                    <img src="<%= message.mediaUrl %>" alt="Story" class="w-full h-full object-cover">
                                    <% if (!isSender && message.replyContext && message.replyContext.storyOwner && message.replyContext.storyOwner.toString() === user._id.toString()) { %>
                                        <button onclick="deleteStory('<%= message.storyId %>')" class="absolute top-1 right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center">
                                            <i class="fas fa-trash text-xs"></i>
                                        </button>
                                    <% } %>
                                </div>
                            <% } %>
                            
                            <!-- Message content -->
                            <% if (message.content) { %>
                                <div class="message-text <%= message.isEdited ? 'flex items-center gap-1' : '' %>">
                                    <span class="message-content"><%= message.content %></span>
                                    <% if (message.isEdited) { %>
                                        <span class="text-xs opacity-75">(edited)</span>
                                    <% } %>
                                </div>
                        <% } %>
                        
                            <!-- Message Options Button -->
                            <% if (isSender) { %>
                                <button onclick="showMyMessageOptions('<%= message._id %>')" 
                                        class="absolute -top-3 -right-3 bg-blue-500 dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                                    <i class="fas fa-ellipsis-h text-xs text-white"></i>
                                </button>
                            <% } else { %>
                                <button onclick="showReactionPickerForMessage('<%= message._id %>')" 
                                        class="absolute -top-3 -right-3 bg-blue-500 dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                                    <i class="fas fa-smile text-xs text-white"></i>
                                </button>
                            <% } %>
                            
                            <!-- Show Reaction if it exists -->
                            <% if (message.reaction) { %>
                                <div class="absolute -bottom-6 <%= isSender ? 'right-2' : 'left-2' %> reaction-bubble">
                                    <span class="reaction"><%= message.reaction %></span>
                                </div>
                            <% } %>
                            
                            <!-- Timestamp -->
                            <div class="text-xs <%= isSender ? 'text-blue-100' : 'text-gray-500' %> mt-1">
                                <%= new Date(message.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                            </div>
                        </div>
                    <% } else { %>
                        <!-- Regular Message -->
                        <div class="relative max-w-[70%] <%= isSender ? 'bg-gradient-to-br from-blue-500 to-purple-600 text-white' : 'bg-gray-200 dark:bg-gray-700' %> rounded-lg p-3 <%= isSender ? 'shadow-blue-500/20 shadow-md' : '' %>" data-message-id="<%= message._id %>">
                            <% if (message.mediaType !== 'none' && message.mediaUrl) { %>
                            <% if (message.mediaType === 'image') { %>
                                <img src="<%= message.mediaUrl %>" alt="Shared image" class="max-w-full rounded-lg mb-2">
                            <% } else if (message.mediaType === 'video') { %>
                                <video src="<%= message.mediaUrl %>" controls class="max-w-full rounded-lg mb-2"></video>
                            <% } else if (message.mediaType === 'audio') { %>
                                <div class="audio-player w-full mb-2">
                                    <audio src="<%= message.mediaUrl %>" class="hidden"></audio>
                                    <div class="flex items-center gap-3">
                                            <button class="play-btn text-<%= isSender ? 'white' : 'blue-500' %> rounded-full bg-<%= isSender ? 'blue-700' : 'gray-200' %> dark:bg-<%= isSender ? 'blue-800' : 'gray-700' %> w-8 h-8 flex items-center justify-center">
                                            <i class="fas fa-play play-icon"></i>
                                            <i class="fas fa-pause pause-icon hidden"></i>
                                        </button>
                                        <div class="flex-1 relative">
                                                <div class="waveform h-8 bg-<%= isSender ? 'blue-400/30' : 'gray-300' %> dark:bg-<%= isSender ? 'blue-600/30' : 'gray-600' %> rounded-full overflow-hidden">
                                                    <div class="progress-bar absolute top-0 left-0 h-full bg-<%= isSender ? 'blue-500' : 'gray-400' %> dark:bg-<%= isSender ? 'blue-700' : 'gray-500' %>" style="width: 0%;"></div>
                                            </div>
                                                <div class="flex justify-between text-xs text-<%= isSender ? 'white' : 'gray-600' %> mt-1">
                                                <span class="current-time">0:00</span>
                                                <span class="audio-duration">0:00</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <% } %>
                        <% } %>
                        
                        <% if (message.content) { %>
                            <div class="message-text <%= message.isEdited ? 'flex items-center gap-1' : '' %>">
                                <span class="message-content"><%= message.content %></span>
                                <% if (message.isEdited) { %>
                                    <span class="text-xs opacity-75">(edited)</span>
                                <% } %>
                            </div>
                        <% } %>

                            <!-- Message Options Button -->
                            <% if (isSender) { %>
                            <button onclick="showMyMessageOptions('<%= message._id %>')" 
                                    class="absolute -top-3 -right-3 bg-blue-500 dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                                <i class="fas fa-ellipsis-h text-xs text-white"></i>
                            </button>
                        <% } else { %>
                            <button onclick="showReactionPickerForMessage('<%= message._id %>')" 
                                    class="absolute -top-3 -right-3 bg-blue-500 dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                                <i class="fas fa-smile text-xs text-white"></i>
                            </button>
                        <% } %>
                        
                        <!-- Show Reaction if it exists -->
                        <% if (message.reaction) { %>
                                <div class="absolute -bottom-6 <%= isSender ? 'right-2' : 'left-2' %> reaction-bubble">
                                <span class="reaction"><%= message.reaction %></span>
                            </div>
                        <% } %>
                        
                            <!-- Timestamp -->
                            <div class="text-xs <%= isSender ? 'text-blue-100' : 'text-gray-500' %> mt-1">
                            <%= new Date(message.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                        </div>
                    </div>
                    <% } %>
                </div>
            <% }); %>
        </div>

        <!-- Message Input -->
        <div class="p-3 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-black sticky bottom-0 relative">
            <!-- Subtle gradient line above input -->
            <div class="absolute top-0 left-0 w-full h-[1px] bg-gradient-to-r from-blue-500/30 to-purple-600/30"></div>
            
            <form id="messageForm" class="flex items-center space-x-2">
                <input type="file" id="mediaInput" class="hidden" accept="image/*,video/*">
                <button type="button" id="mediaButton" class="p-2 text-gray-500 dark:text-gray-400 hover:text-blue-500 dark:hover:text-purple-400 rounded-full hover:bg-gray-100 dark:hover:bg-gray-900 transition-colors">
                    <i class="fas fa-image"></i>
                </button>
                
                <!-- Voice Recording Button -->
                <button type="button" id="voiceButton" class="p-2 text-gray-500 dark:text-gray-400 hover:text-blue-500 dark:hover:text-purple-400 rounded-full hover:bg-gray-100 dark:hover:bg-gray-900 transition-colors">
                    <i class="fas fa-microphone"></i>
                </button>
                
                <div class="relative flex-1">
                    <input type="text" 
                           id="messageInput"
                           placeholder="Message..." 
                           class="w-full px-4 py-3 border border-gray-300 dark:border-gray-700 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-white"
                           required>
                           
                    <!-- Voice Recording Indicator (Hidden by default) -->
                    <div id="recordingIndicator" class="absolute inset-0 flex items-center px-4 hidden">
                        <div class="flex-1 flex items-center">
                            <div class="recording-dot mr-2"></div>
                            <span class="text-red-500">Recording...</span>
                            <div id="recordingVisualizer" class="flex-1 mx-4 h-6"></div>
                            <span id="recordingTimer" class="text-gray-500">0:00</span>
                        </div>
                    </div>
                </div>
                
                <button type="submit" 
                        class="p-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-full hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transform hover:scale-105 transition-all">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </form>
        </div>
    </div>
</div>

<!-- Message Options Modal -->
<div id="messageOptionsModal" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 hidden">
    <div class="fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-900 rounded-t-xl overflow-hidden max-w-sm mx-auto mb-16">
        <!-- Gradient accent line at top -->
        <div class="h-0.5 w-full bg-gradient-to-r from-blue-500 to-purple-600"></div>
        
        <div class="p-0 divide-y divide-gray-200 dark:divide-gray-700">
            <button onclick="showReactionPicker()" class="w-full text-left py-2.5 px-4 text-sm hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-blue-500 dark:hover:text-purple-400 text-gray-700 dark:text-gray-300 transition-colors">
                React
            </button>
            <button onclick="editMessage()" class="w-full text-left py-2.5 px-4 text-sm hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-blue-500 dark:hover:text-purple-400 text-gray-700 dark:text-gray-300 transition-colors">
                Edit
            </button>
            <button onclick="deleteMessage()" class="w-full text-left py-2.5 px-4 text-sm hover:bg-gray-100 dark:hover:bg-gray-800 text-red-500 transition-colors">
                Delete
            </button>
            <button onclick="closeMessageOptions()" class="w-full text-center py-2.5 text-sm text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
                Cancel
            </button>
        </div>
    </div>
</div>

<!-- Reaction Picker Modal -->
<div id="reactionPickerModal" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 hidden">
    <div class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white dark:bg-gray-900 rounded-xl shadow-lg overflow-hidden max-w-xs">
        <!-- Gradient accent line at top -->
        <div class="h-0.5 w-full bg-gradient-to-r from-blue-500 to-purple-600"></div>
        
        <div class="p-3">
            <div class="flex justify-around text-2xl">
                <button onclick="addReaction('❤️')" class="p-2 hover:scale-125 transition-transform">❤️</button>
                <button onclick="addReaction('😂')" class="p-2 hover:scale-125 transition-transform">😂</button>
                <button onclick="addReaction('😮')" class="p-2 hover:scale-125 transition-transform">😮</button>
                <button onclick="addReaction('😢')" class="p-2 hover:scale-125 transition-transform">😢</button>
                <button onclick="addReaction('🔥')" class="p-2 hover:scale-125 transition-transform">🔥</button>
                <button onclick="addReaction('👍')" class="p-2 hover:scale-125 transition-transform">👍</button>
            </div>
        </div>
    </div>
</div>

<!-- Media Preview -->
<div id="mediaPreview" class="fixed bottom-20 left-0 right-0 bg-white dark:bg-gray-900 p-4 hidden shadow-lg">
    <!-- Gradient accent line at top -->
    <div class="absolute top-0 left-0 w-full h-0.5 bg-gradient-to-r from-blue-500 to-purple-600"></div>
    
    <div class="flex items-center justify-between">
        <div id="previewContent" class="flex-1"></div>
        <button id="cancelMedia" class="ml-4 text-red-500 hover:text-red-600 transition-colors">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>

<!-- Voice Recording Controls (Hidden by default) -->
<div id="voiceControls" class="fixed bottom-20 left-0 right-0 bg-white dark:bg-gray-900 p-4 hidden shadow-lg">
    <!-- Gradient accent line at top -->
    <div class="absolute top-0 left-0 w-full h-0.5 bg-gradient-to-r from-blue-500 to-purple-600"></div>
    
    <div class="flex items-center justify-between max-w-4xl mx-auto">
        <button id="cancelRecording" class="p-2 text-red-500 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
            <i class="fas fa-trash"></i>
        </button>
        <div class="flex-1 flex items-center justify-center">
            <div id="waveform" class="w-full h-12"></div>
        </div>
        <button id="sendRecording" class="p-2 text-blue-500 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
            <i class="fas fa-paper-plane"></i>
        </button>
    </div>
</div>

<!-- Add the audio message template -->
<template id="audio-message-template">
    <div class="flex items-center p-3 rounded-lg w-full max-w-xs bg-white dark:bg-gray-800 shadow">
        <div class="audio-player w-full">
            <div class="flex items-center gap-3">
                <div class="play-btn bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-500 play-icon" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                    </svg>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-500 pause-icon hidden" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 011-1h.01a1 1 0 110 2H8a1 1 0 01-1-1zm3 0a1 1 0 011-1h.01a1 1 0 110 2H11a1 1 0 01-1-1z" clip-rule="evenodd" />
                    </svg>
                </div>
                <div class="flex-1 relative">
                    <div class="waveform h-8 bg-gray-200 dark:bg-gray-700 rounded-lg overflow-hidden">
                        <div class="progress-bar absolute top-0 left-0 h-full bg-purple-300 dark:bg-purple-800 opacity-50" style="width: 0%;"></div>
                    </div>
                    <div class="flex justify-between text-xs text-gray-500 mt-1">
                        <span class="current-time">0:00</span>
                        <span class="duration">0:00</span>
                    </div>
                </div>
            </div>
            <audio class="hidden"></audio>
        </div>
    </div>
</template>

<!-- Add jQuery before other scripts -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/socket.io/socket.io.js"></script>

<script>
// Initialize variables
const messagesContainer = document.getElementById('messages');
const messageForm = document.getElementById('messageForm');
const messageInput = document.getElementById('messageInput');
const userId = '<%= user._id %>';
const chatId = '<%= chat._id %>';
const receiverId = '<%= otherUser._id %>';
let selectedMedia = null;

// Initialize socket connection
const socketOptions = {
    transports: ['websocket'],
    reconnection: true,
    reconnectionAttempts: 5,
    reconnectionDelay: 1000,
    reconnectionDelayMax: 5000,
    timeout: 20000,
    autoConnect: true,
    path: '/socket.io',
    auth: {
        userId: userId
    }
};

// Create socket with options
const socket = io(window.location.origin, socketOptions);

// Track connection state
let isSocketConnected = false;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 5;

// Track existing messages to prevent duplicates
const renderedMessageIds = new Set();
const messageQueue = new Set();

// Track scroll position
let lastScrollPosition = 0;
let isInitialLoad = true;

// Save scroll position before page unload
window.addEventListener('beforeunload', () => {
    if (messagesContainer) {
        lastScrollPosition = messagesContainer.scrollTop;
        sessionStorage.setItem('chatScrollPosition', lastScrollPosition);
    }
});

// Restore scroll position on page load
document.addEventListener('DOMContentLoaded', () => {
    // Track existing messages and prevent duplicates
    const existingMessages = new Set();
    document.querySelectorAll('[data-message-id]').forEach(element => {
        const messageId = element.getAttribute('data-message-id');
        if (messageId) {
            if (!existingMessages.has(messageId)) {
                existingMessages.add(messageId);
                renderedMessageIds.add(messageId);
            } else {
                // Remove duplicate message
                element.remove();
            }
        }
    });
    
    // Join chat room
    if (isSocketConnected) {
        socket.emit('joinChat', chatId);
    }
    
    // Mark all existing messages as read if page is visible
    if (document.visibilityState !== 'hidden' && isSocketConnected) {
        document.querySelectorAll('[data-message-id]').forEach(element => {
            const messageId = element.getAttribute('data-message-id');
            if (messageId) {
                socket.emit('markAsRead', { messageId });
            }
        });
    }

    // Immediately scroll to bottom on initial load
    if (isInitialLoad) {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        isInitialLoad = false;
    }

    // Restore scroll position after a short delay to ensure messages are loaded
    setTimeout(() => {
        const savedPosition = sessionStorage.getItem('chatScrollPosition');
        if (savedPosition && messagesContainer) {
            messagesContainer.scrollTop = parseInt(savedPosition);
            // Clear the saved position after restoring
            sessionStorage.removeItem('chatScrollPosition');
        } else {
            // If no saved position, scroll to bottom
            scrollToBottom();
        }
    }, 100);
});

// Update scrollToBottom function to handle new messages
function scrollToBottom() {
    if (messagesContainer) {
        // Only scroll if we're near the bottom (within 100px)
        const isNearBottom = messagesContainer.scrollHeight - messagesContainer.scrollTop - messagesContainer.clientHeight < 100;
        if (isNearBottom) {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
    }
}

// Add scroll event listener to track user's scroll position
messagesContainer.addEventListener('scroll', () => {
    if (messagesContainer) {
        lastScrollPosition = messagesContainer.scrollTop;
    }
});

// Initialize socket connection
socket.on('connect', () => {
    console.log('✅ Socket connected with ID:', socket.id);
    isSocketConnected = true;
    reconnectAttempts = 0;
    
    // Set auth data
    socket.auth = { userId };
    
    // Authenticate after connection
socket.emit('authenticate', userId);

    // Join relevant chat room
    socket.emit('joinChat', chatId);
    
    // Process any queued messages
    processMessageQueue();
    
    // Inform UI that connection is established
    document.getElementById('connection-status')?.classList.add('hidden');
});

// Handle connection errors
socket.on('connect_error', (error) => {
    console.error('❌ Socket connection error:', error.message);
    isSocketConnected = false;
    
    const statusEl = document.getElementById('connection-status');
    if (statusEl) {
        statusEl.textContent = 'Connection error. Trying to reconnect...';
        statusEl.classList.remove('hidden');
    }
    
    // Attempt to reconnect
    if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
        reconnectAttempts++;
        setTimeout(() => {
            socket.connect();
        }, 1000 * reconnectAttempts);
    } else {
        showToast('Failed to connect to chat server. Please refresh the page.', 'error');
    }
});

// Handle disconnection
socket.on('disconnect', (reason) => {
    console.log('Socket disconnected, reason:', reason);
    isSocketConnected = false;
    
    const statusEl = document.getElementById('connection-status');
    if (statusEl) {
        statusEl.textContent = 'Disconnected. Reconnecting...';
        statusEl.classList.remove('hidden');
    }
    
    // Attempt to reconnect
    if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
        reconnectAttempts++;
        setTimeout(() => {
            socket.connect();
        }, 1000 * reconnectAttempts);
    }
});

// Handle reconnection
socket.on('reconnect', (attemptNumber) => {
    console.log('Socket reconnected after', attemptNumber, 'attempts');
    isSocketConnected = true;
    reconnectAttempts = 0;
    
    socket.auth = { userId };
    socket.emit('authenticate', userId);
    socket.emit('joinChat', chatId);
    document.getElementById('connection-status')?.classList.add('hidden');
    processMessageQueue();
});

// Process queued messages
function processMessageQueue() {
    if (!isSocketConnected) return;
    
    messageQueue.forEach(messageId => {
        socket.emit('markAsRead', { messageId });
    });
    messageQueue.clear();
}

// Handle message form submission
messageForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const content = messageInput.value.trim();
    
    if (!content && !selectedMedia) return;
    
        try {
            const response = await fetch(`/chat/${chatId}/message`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    content,
                receiverId: receiverId
                })
            });
            
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
                    const data = await response.json();
                    
        // Create and append the message
        const messageDiv = document.createElement('div');
        messageDiv.className = `flex justify-end group mb-6`;
        messageDiv.innerHTML = createMessageHTML(data);
        messagesContainer.appendChild(messageDiv);
        
        // Scroll to bottom
scrollToBottom();

        // Clear input
        messageInput.value = '';
        
        // Emit message via socket if connected
        if (isSocketConnected) {
            socket.emit('chatMessage', {
                chatId: chatId,
                message: data,
                receiverId: receiverId
            });
        } else {
            showToast('Message sent but not delivered in real-time. Reconnecting...', 'warning');
        }
        
    } catch (error) {
        console.error('Error sending message:', error);
        showToast('Failed to send message. Please try again.', 'error');
    }
});

// Toast notification function
function showToast(message, type = 'error') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    
    toastMessage.textContent = message;
    
    // Always use the blue-purple gradient theme
    toast.style.background = 'linear-gradient(45deg, #3b82f6, #8b5cf6)';
    
    // Add common styles
    toast.style.color = 'white';
    toast.style.borderRadius = '8px';
    toast.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
    
    // Show toast
    toast.classList.remove('opacity-0', 'translate-y-full');
    toast.classList.add('opacity-100', 'translate-y-0');
    
    // Auto-hide after 3 seconds
    setTimeout(() => {
        toast.classList.remove('opacity-100', 'translate-y-0');
        toast.classList.add('opacity-0', 'translate-y-full');
    }, 3000);
}

// Function to delete a story
async function deleteStory(storyId) {
    if (!storyId) return;
    
    if (!confirm('Are you sure you want to delete this story?')) {
        return;
    }
    
    try {
        const response = await fetch(`/story/${storyId}/delete`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            // Find all messages related to this story and fade them out
            const storyMessages = document.querySelectorAll(`[data-story-id="${storyId}"]`);
            storyMessages.forEach(msgEl => {
                const messageContainer = msgEl.closest('.flex');
                if (messageContainer) {
                    messageContainer.style.opacity = '0.5';
                    messageContainer.style.transition = 'opacity 0.3s ease';
                }
            });
            
            showToast('Story deleted successfully', 'success');
        } else {
            const errorData = await response.json();
            showToast(errorData.error || 'Failed to delete story', 'error');
        }
    } catch (error) {
        console.error('Error deleting story:', error);
        showToast('An error occurred while deleting the story', 'error');
    }
}

// Add data-story-id attribute to story reply messages
document.querySelectorAll('[data-message-id]').forEach(messageEl => {
    const deleteBtn = messageEl.querySelector('button[onclick^="deleteStory"]');
    if (deleteBtn) {
        const storyId = deleteBtn.getAttribute('onclick').match(/'([^']+)'/)[1];
        if (storyId) {
            messageEl.setAttribute('data-story-id', storyId);
        }
    }
});

// Add ripple effect to buttons
document.querySelectorAll('button').forEach(button => {
    button.classList.add('ripple');
    
    button.addEventListener('click', function(e) {
        // Remove existing ripple elements
        const ripples = button.querySelectorAll('.ripple-element');
        ripples.forEach(ripple => ripple.remove());
        
        // Create new ripple element
        const rippleEl = document.createElement('span');
        rippleEl.classList.add('ripple-element');
        button.appendChild(rippleEl);
        
        // Position the ripple
        const rect = button.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        rippleEl.style.width = rippleEl.style.height = `${size}px`;
        rippleEl.style.left = `${e.clientX - rect.left - size/2}px`;
        rippleEl.style.top = `${e.clientY - rect.top - size/2}px`;
        
        // Remove after animation completes
        setTimeout(() => {
            rippleEl.remove();
        }, 600);
    });
});

// Add styles for the ripple element
const styleEl = document.createElement('style');
styleEl.textContent = `
    .ripple {
        position: relative;
        overflow: hidden;
    }
    .ripple-element {
        position: absolute;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.7);
        transform: scale(0);
        animation: ripple-animation 0.6s linear;
        pointer-events: none;
    }
    @keyframes ripple-animation {
        to {
            transform: scale(4);
            opacity: 0;
        }
    }
`;
document.head.appendChild(styleEl);

// Add message bubble hover effect
document.querySelectorAll('[data-message-id]').forEach(message => {
    message.classList.add('message-bubble');
});

// Apply glass-effect to modals
document.querySelectorAll('#messageOptionsModal > div, #reactionPickerModal > div, #mediaPreview, #voiceControls').forEach(modal => {
    modal.classList.add('glass-effect');
});

// Add shimmer effect to loading states 
function addShimmerToLoading() {
    const waveforms = document.querySelectorAll('.waveform');
    waveforms.forEach(waveform => {
        waveform.classList.add('shimmer');
    });
}

// Add gradient text effect to appropriate elements
document.querySelectorAll('#typingStatus, .story-reply').forEach(element => {
    element.classList.add('gradient-text');
});

// Enhance message bubbles with ripple effect on click
document.querySelectorAll('[data-message-id]').forEach(message => {
    message.addEventListener('click', function(e) {
        if (e.target.closest('button')) return; // Don't trigger if clicking a button inside
        
        // Add ripple effect
        const ripple = document.createElement('div');
        ripple.className = 'absolute inset-0 bg-white bg-opacity-10 rounded-lg transform scale-0 origin-center';
        message.appendChild(ripple);
        
        // Animate the ripple
        requestAnimationFrame(() => {
            ripple.style.transition = 'transform 0.4s ease-out, opacity 0.4s ease-out';
            ripple.style.transform = 'scale(1)';
            ripple.style.opacity = '0.5';
            
            setTimeout(() => {
                ripple.style.opacity = '0';
                setTimeout(() => ripple.remove(), 400);
            }, 200);
        });
    });
});

// Initialize audio players with enhanced visuals
document.querySelectorAll('.audio-player').forEach(player => {
    // Apply gradient to audio player waveforms
    const waveform = player.querySelector('.waveform');
    if (waveform) {
        waveform.classList.add('bg-gradient-to-r', 'from-blue-500/10', 'to-purple-600/10');
        
        // Update progress bar with gradient
        const progressBar = waveform.querySelector('.progress-bar');
        if (progressBar) {
            progressBar.classList.add('bg-gradient-to-r', 'from-blue-500', 'to-purple-600');
        }
    }
});

// Add this to the JavaScript section
function sharePost(postId) {
    const recipient = currentChatUser._id;
    
    // Show loading toast
    showToast('Sharing post...', 'info');
    
    // Make API call to share post
    fetch('/api/posts/share', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            postId: postId,
            recipientId: recipient
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('Post shared successfully', 'success');
            // Append the new message to the chat
            appendNewMessage(data.message);
        } else {
            showToast('Error: ' + (data.error || 'Failed to share post'), 'error');
        }
    })
    .catch(error => {
        console.error('Error sharing post:', error);
        showToast('Error sharing post', 'error');
    });
}

function appendNewMessage(message) {
    const messagesContainer = document.getElementById('messages');
    const messageHTML = createMessageHTML(message);
    
    // Create a temporary div to hold the HTML
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = messageHTML;
    
    // Append the message
    messagesContainer.appendChild(tempDiv.firstElementChild);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Consolidated formatTime function that handles all cases
function formatTime(input) {
    // Handle null/undefined/empty input
    if (!input) return '0:00';
    
    // If input is a Date object or timestamp string
    if (input instanceof Date || typeof input === 'string') {
        const date = input instanceof Date ? input : new Date(input);
        
        // Check if date is valid
        if (isNaN(date.getTime())) return '0:00';
        
        // Format as time (HH:MM)
        return date.toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit',
            timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
        });
    }
    
    // If input is a number (duration in seconds)
    if (typeof input === 'number') {
        if (isNaN(input)) return '0:00';
        
        const minutes = Math.floor(Math.abs(input) / 60);
        const seconds = Math.floor(Math.abs(input) % 60);
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
    
    return '0:00';
}

// Handle incoming messages
socket.on('newMessage', (data) => {
    console.log('💬 New message received:', data);
    
    try {
        const messageData = data.message || data;
        const messageChatId = data.chatId || messageData.chat;
        
        if (messageChatId === chatId || messageChatId === chatId.toString()) {
            // Skip if we've already rendered this message
            if (messageData._id && renderedMessageIds.has(messageData._id)) {
                console.log('Skipping duplicate message:', messageData._id);
                return;
            }
            
            // Skip if this is our own message
            if (messageData.sender && messageData.sender._id === userId) {
                if (messageData._id) {
                    renderedMessageIds.add(messageData._id);
                }
                return;
            }
            
            // Create and append the message
            const messageDiv = document.createElement('div');
            messageDiv.className = `flex justify-start group mb-6`;
            messageDiv.innerHTML = createMessageHTML(messageData);
            
            // Check for duplicate before appending
            const existingMessage = document.querySelector(`[data-message-id="${messageData._id}"]`);
            if (!existingMessage) {
                messagesContainer.appendChild(messageDiv);
                
                // Mark message as rendered
                if (messageData._id) {
                    renderedMessageIds.add(messageData._id);
                }
                
                // Scroll to new message
                scrollToBottom();
                
                // Mark message as read if page is visible
                if (document.visibilityState !== 'hidden' && messageData._id) {
                    if (isSocketConnected) {
                        socket.emit('markAsRead', { messageId: messageData._id });
                    } else {
                        messageQueue.add(messageData._id);
                    }
                } else if (messageData._id) {
                    messageQueue.add(messageData._id);
                }
            }
        }
    } catch (error) {
        console.error('Error handling new message:', error);
        showToast('Error receiving message. Please refresh the page.', 'error');
    }
});

// Handle message read events
socket.on('messageRead', (data) => {
    console.log('Message read event received:', data);
    try {
        if (data.messageId) {
            const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
            if (messageElement) {
                messageElement.classList.add('read');
            }
        }
    } catch (error) {
        console.error('Error handling message read event:', error);
    }
});

// Add page visibility change listener
document.addEventListener('visibilitychange', () => {
    if (document.visibilityState !== 'hidden' && isSocketConnected) {
        processMessageQueue();
    }
});

// Add function to create HTML for a message
function createMessageHTML(message) {
    const isSender = message.sender._id === '<%= user._id %>';
    let messageHTML = '';
    
    if (message.isPostShare && message.sharedPostPreview) {
        messageHTML = `
            <div class="relative max-w-[70%] ${isSender ? 'bg-gradient-to-br from-blue-500 to-purple-600 text-white' : 'bg-gray-200 dark:bg-gray-700'} rounded-lg p-3 ${isSender ? 'shadow-blue-500/20 shadow-md' : ''}" 
                 data-message-id="${message._id}" 
                 data-shared-post-id="${message.sharedPostPreview.postId}"
                 style="cursor: pointer;">
                
                <div class="message-text ${message.isEdited ? 'flex items-center gap-1' : ''}">
                    <span class="message-content">${message.content}</span>
                    ${message.isEdited ? '<span class="text-xs opacity-75">(edited)</span>' : ''}
                </div>
                
                <div class="shared-post-card bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-sm">
                    <div class="p-2 flex items-center border-b border-gray-100 dark:border-gray-700">
                        <div class="relative">
                            <img src="${message.sender.profileImage}" alt="${message.sender.username}" class="w-6 h-6 rounded-full object-cover">
                        </div>
                        <div class="ml-2">
                            <p class="text-xs font-medium text-gray-900 dark:text-white">${message.sharedPostPreview.title}</p>
                        </div>
                    </div>
                    
                    <div class="aspect-square w-full bg-black overflow-hidden">
                        <img src="${message.sharedPostPreview.image}" alt="Post" class="w-full h-full object-cover">
                    </div>
                    
                    <div class="px-2 py-2 text-xs text-gray-800 dark:text-gray-200">
                        <span class="font-semibold">${message.sharedPostPreview.title}</span> 
                        ${message.sharedPostPreview.content && message.sharedPostPreview.content.length > 50 ? 
                            message.sharedPostPreview.content.substring(0, 50) + '...' : 
                            message.sharedPostPreview.content || ''}
                    </div>
                </div>
                
                ${isSender ? `
                    <button onclick="showMyMessageOptions('${message._id}')" 
                            class="absolute -top-3 -right-3 bg-blue-500 dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                        <i class="fas fa-ellipsis-h text-xs text-white"></i>
                    </button>
                ` : `
                    <button onclick="showReactionPickerForMessage('${message._id}')" 
                            class="absolute -top-3 -right-3 bg-blue-500 dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                        <i class="fas fa-smile text-xs text-white"></i>
                    </button>
                `}
                
                ${message.reaction ? `
                    <div class="absolute -bottom-6 ${isSender ? 'right-2' : 'left-2'} reaction-bubble">
                        <span class="reaction">${message.reaction}</span>
                    </div>
                ` : ''}
                
                <div class="text-xs ${isSender ? 'text-blue-100' : 'text-gray-500'} mt-1">
                    ${new Date(message.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                </div>
            </div>
        `;
    } else if (message.mediaType !== 'none' && message.mediaUrl) {
        messageHTML = `
            <div class="relative max-w-[70%] ${isSender ? 'bg-gradient-to-br from-blue-500 to-purple-600 text-white' : 'bg-gray-200 dark:bg-gray-700'} rounded-lg p-3 ${isSender ? 'shadow-blue-500/20 shadow-md' : ''}" data-message-id="${message._id}">
                ${message.mediaType === 'image' ? `
                    <img src="${message.mediaUrl}" alt="Shared image" class="max-w-full rounded-lg mb-2">
                ` : message.mediaType === 'video' ? `
                    <video src="${message.mediaUrl}" controls class="max-w-full rounded-lg mb-2"></video>
                ` : message.mediaType === 'audio' ? `
                    <div class="audio-player w-full mb-2">
                        <audio src="${message.mediaUrl}" class="hidden"></audio>
                        <div class="flex items-center gap-3">
                            <button class="play-btn text-${isSender ? 'white' : 'blue-500'} rounded-full bg-${isSender ? 'blue-700' : 'gray-200'} dark:bg-${isSender ? 'blue-800' : 'gray-700'} w-8 h-8 flex items-center justify-center">
                                <i class="fas fa-play play-icon"></i>
                                <i class="fas fa-pause pause-icon hidden"></i>
                            </button>
                            <div class="flex-1 relative">
                                <div class="waveform h-8 bg-${isSender ? 'blue-400/30' : 'gray-300'} dark:bg-${isSender ? 'blue-600/30' : 'gray-600'} rounded-full overflow-hidden">
                                    <div class="progress-bar absolute top-0 left-0 h-full bg-${isSender ? 'blue-500' : 'gray-400'} dark:bg-${isSender ? 'blue-700' : 'gray-500'}" style="width: 0%;"></div>
                                </div>
                                <div class="flex justify-between text-xs text-${isSender ? 'white' : 'gray-600'} mt-1">
                                    <span class="current-time">0:00</span>
                                    <span class="audio-duration">0:00</span>
                                </div>
                            </div>
                        </div>
                    </div>
                ` : ''}
                
                ${message.content ? `
                    <div class="message-text ${message.isEdited ? 'flex items-center gap-1' : ''}">
                        <span class="message-content">${message.content}</span>
                        ${message.isEdited ? '<span class="text-xs opacity-75">(edited)</span>' : ''}
                    </div>
                ` : ''}
                
                ${isSender ? `
                    <button onclick="showMyMessageOptions('${message._id}')" 
                            class="absolute -top-3 -right-3 bg-blue-500 dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                        <i class="fas fa-ellipsis-h text-xs text-white"></i>
                    </button>
                ` : `
                    <button onclick="showReactionPickerForMessage('${message._id}')" 
                            class="absolute -top-3 -right-3 bg-blue-500 dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                        <i class="fas fa-smile text-xs text-white"></i>
                    </button>
                `}
                
                ${message.reaction ? `
                    <div class="absolute -bottom-6 ${isSender ? 'right-2' : 'left-2'} reaction-bubble">
                        <span class="reaction">${message.reaction}</span>
                    </div>
                ` : ''}
                
                <div class="text-xs ${isSender ? 'text-blue-100' : 'text-gray-500'} mt-1">
                    ${new Date(message.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                </div>
            </div>
        `;
        } else {
        messageHTML = `
            <div class="relative max-w-[70%] ${isSender ? 'bg-gradient-to-br from-blue-500 to-purple-600 text-white' : 'bg-gray-200 dark:bg-gray-700'} rounded-lg p-3 ${isSender ? 'shadow-blue-500/20 shadow-md' : ''}" data-message-id="${message._id}">
                ${message.content ? `
                    <div class="message-text ${message.isEdited ? 'flex items-center gap-1' : ''}">
                        <span class="message-content">${message.content}</span>
                        ${message.isEdited ? '<span class="text-xs opacity-75">(edited)</span>' : ''}
                    </div>
                ` : ''}
                
                ${isSender ? `
                    <button onclick="showMyMessageOptions('${message._id}')" 
                            class="absolute -top-3 -right-3 bg-blue-500 dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                        <i class="fas fa-ellipsis-h text-xs text-white"></i>
                    </button>
                ` : `
                    <button onclick="showReactionPickerForMessage('${message._id}')" 
                            class="absolute -top-3 -right-3 bg-blue-500 dark:bg-gray-800 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 flex items-center justify-center">
                        <i class="fas fa-smile text-xs text-white"></i>
                    </button>
                `}
                
                ${message.reaction ? `
                    <div class="absolute -bottom-6 ${isSender ? 'right-2' : 'left-2'} reaction-bubble">
                        <span class="reaction">${message.reaction}</span>
                    </div>
                ` : ''}
                
                <div class="text-xs ${isSender ? 'text-blue-100' : 'text-gray-500'} mt-1">
                    ${new Date(message.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                </div>
            </div>
        `;
    }
    
    return messageHTML;
}
</script>

<%- include('partials/footer') %> 